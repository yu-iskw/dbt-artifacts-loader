{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v6.json", "dbt_version": "1.2.0", "generated_at": "2022-09-13T12:42:00.566071Z", "invocation_id": "550ce981-33c0-4b00-9dea-d1483920d33d", "env": {}, "project_id": "9c7e77d37c2efd3d2ba268d277e3b33d", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "bigquery"}, "nodes": {"model.jaffle_shop2.stg_customers": {"raw_sql": "with source as (\n\n    {#-\n    Normally we would select from the table here, but we are using seeds to load\n    our data in this project\n    #}\n    select * from {{ ref('raw_customers') }}\n\n),\n\nrenamed as (\n\n    select\n        id as customer_id,\n        first_name,\n        last_name,\n        email\n\n    from source\n\n)\n\nselect * from renamed", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.jaffle_shop2.raw_customers"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "your-project", "schema": "my_dataset", "fqn": ["jaffle_shop2", "staging", "stg_customers"], "unique_id": "model.jaffle_shop2.stg_customers", "package_name": "jaffle_shop2", "root_path": "/Users/yu/local/src/github/jaffle_shop", "path": "staging/stg_customers.sql", "original_file_path": "models/staging/stg_customers.sql", "name": "stg_customers", "alias": "stg_customers", "checksum": {"name": "sha256", "checksum": "8aaf3f82d6948a706a8fd6e40493a59446ab84436c800b9bb986d6af6d3dc073"}, "tags": [], "refs": [["raw_customers"]], "sources": [], "metrics": [], "description": "", "columns": {"customer_id": {"name": "customer_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jaffle_shop2://models/staging/schema.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663072921.662942}, "model.jaffle_shop2.stg_payments": {"raw_sql": "{{\n  config(\n    alias=\"__stg_payments\",\n  )\n}}\n\n\nwith source as (\n\n    {#-\n    Normally we would select from the table here, but we are using seeds to load\n    our data in this project\n    #}\n    select * from {{ ref('raw_payments') }}\n\n),\n\nrenamed as (\n\n    select\n        id as payment_id,\n        order_id,\n        payment_method,\n\n        --`amount` is currently stored in cents, so we convert it to dollars\n        amount / 100 as amount\n\n    from source\n\n)\n\nselect * from renamed", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.jaffle_shop2.raw_payments"]}, "config": {"enabled": true, "alias": "__stg_payments", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "your-project", "schema": "my_dataset", "fqn": ["jaffle_shop2", "staging", "stg_payments"], "unique_id": "model.jaffle_shop2.stg_payments", "package_name": "jaffle_shop2", "root_path": "/Users/yu/local/src/github/jaffle_shop", "path": "staging/stg_payments.sql", "original_file_path": "models/staging/stg_payments.sql", "name": "stg_payments", "alias": "__stg_payments", "checksum": {"name": "sha256", "checksum": "9a118c884701c2c7a2c0f566edabc360e139120cc52c4c9c8f47159f98a8d87c"}, "tags": [], "refs": [["raw_payments"]], "sources": [], "metrics": [], "description": "", "columns": {"payment_id": {"name": "payment_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_method": {"name": "payment_method", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jaffle_shop2://models/staging/schema.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "__stg_payments"}, "created_at": 1663072921.664039}, "model.jaffle_shop2.stg_orders": {"raw_sql": "with source as (\n\n    {#-\n    Normally we would select from the table here, but we are using seeds to load\n    our data in this project\n    #}\n    select * from {{ ref('raw_orders') }}\n\n),\n\nrenamed as (\n\n    select\n        id as order_id,\n        user_id as customer_id,\n        order_date,\n        status\n\n    from source\n\n)\n\nselect * from renamed", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.jaffle_shop2.raw_orders"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "your-project", "schema": "my_dataset", "fqn": ["jaffle_shop2", "staging", "stg_orders"], "unique_id": "model.jaffle_shop2.stg_orders", "package_name": "jaffle_shop2", "root_path": "/Users/yu/local/src/github/jaffle_shop", "path": "staging/stg_orders.sql", "original_file_path": "models/staging/stg_orders.sql", "name": "stg_orders", "alias": "stg_orders", "checksum": {"name": "sha256", "checksum": "afffa9cbc57e5fd2cf5898ebf571d444a62c9d6d7929d8133d30567fb9a2ce97"}, "tags": [], "refs": [["raw_orders"]], "sources": [], "metrics": [], "description": "", "columns": {"order_id": {"name": "order_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jaffle_shop2://models/staging/schema.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663072921.663551}, "model.jaffle_shop2.dim_customers": {"raw_sql": "with customers as (\n\n    select * from {{ ref('stg_customers') }}\n\n),\n\ncustomer_orders as (\n\n    select * from {{ ref('customer_orders') }}\n\n),\n\ncustomer_payments as (\n\n    select * from {{ ref('customer_payments') }}\n\n),\n\nfinal as (\n\n    select\n        customers.customer_id,\n        customer_orders.first_order,\n        customer_orders.most_recent_order,\n        customer_orders.number_of_orders,\n        customer_payments.total_amount as customer_lifetime_value\n\n    from customers\n\n    left join customer_orders using (customer_id)\n\n    left join customer_payments using (customer_id)\n\n)\n\n-- test\nselect * from final", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.jaffle_shop2.stg_customers", "model.jaffle_shop2.customer_orders", "model.jaffle_shop2.customer_payments"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "your-project", "schema": "my_dataset", "fqn": ["jaffle_shop2", "marts", "core", "dim_customers"], "unique_id": "model.jaffle_shop2.dim_customers", "package_name": "jaffle_shop2", "root_path": "/Users/yu/local/src/github/jaffle_shop", "path": "marts/core/dim_customers.sql", "original_file_path": "models/marts/core/dim_customers.sql", "name": "dim_customers", "alias": "dim_customers", "checksum": {"name": "sha256", "checksum": "b30c00717501b892876915011f35d699cc9c36014d69dd307417d843becd3d1e"}, "tags": [], "refs": [["stg_customers"], ["customer_orders"], ["customer_payments"]], "sources": [], "metrics": [], "description": "This table has basic information about a customer, as well as some derived facts based on a customer's orders", "columns": {"customer_id": {"name": "customer_id", "description": "This is a unique identifier for a customer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "Customer's first name. PII.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "Customer's last name. PII.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Customer's email address. PII.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_order": {"name": "first_order", "description": "Date (UTC) of a customer's first order", "meta": {}, "data_type": null, "quote": null, "tags": []}, "most_recent_order": {"name": "most_recent_order", "description": "Date (UTC) of a customer's most recent order", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_orders": {"name": "number_of_orders", "description": "Count of the number of orders a customer has placed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_order_amount": {"name": "total_order_amount", "description": "Total value (AUD) of a customer's orders", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jaffle_shop2://models/marts/core/schema.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663072921.6844249}, "model.jaffle_shop2.fct_orders": {"raw_sql": "{% set payment_methods = ['credit_card', 'coupon', 'bank_transfer', 'gift_card'] %}\n\nwith orders as (\n\n    select * from {{ ref('stg_orders') }}\n\n),\n\norder_payments as (\n\n    select * from {{ ref('order_payments') }}\n\n),\n\nfinal as (\n\n    select\n        orders.order_id,\n        orders.customer_id,\n        orders.order_date,\n        orders.status,\n\n        {% for payment_method in payment_methods -%}\n\n        order_payments.{{payment_method}}_amount,\n\n        {% endfor -%}\n\n        order_payments.total_amount as amount\n\n    from orders\n\n    left join order_payments using (order_id)\n\n)\n\nselect * from final", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.jaffle_shop2.stg_orders", "model.jaffle_shop2.order_payments"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "your-project", "schema": "my_dataset", "fqn": ["jaffle_shop2", "marts", "core", "fct_orders"], "unique_id": "model.jaffle_shop2.fct_orders", "package_name": "jaffle_shop2", "root_path": "/Users/yu/local/src/github/jaffle_shop", "path": "marts/core/fct_orders.sql", "original_file_path": "models/marts/core/fct_orders.sql", "name": "fct_orders", "alias": "fct_orders", "checksum": {"name": "sha256", "checksum": "49634cca4e40171ea98f62a1a3a9999e3487c42aca3ee79ecaaf99900ead1fd8"}, "tags": [], "refs": [["stg_orders"], ["order_payments"]], "sources": [], "metrics": [], "description": "This table has basic information about orders, as well as some derived facts based on payments", "columns": {"order_id": {"name": "order_id", "description": "This is a unique identifier for an order", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "Foreign key to the customers table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_date": {"name": "order_date", "description": "Date (UTC) that the order was placed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Orders can be one of the following statuses:\n\n| status         | description                                                                                                            |\n|----------------|------------------------------------------------------------------------------------------------------------------------|\n| placed         | The order has been placed but has not yet left the warehouse                                                           |\n| shipped        | The order has ben shipped to the customer and is currently in transit                                                  |\n| completed      | The order has been received by the customer                                                                            |\n| return_pending | The customer has indicated that they would like to return the order, but it has not yet been received at the warehouse |\n| returned       | The order has been returned by the customer and received at the warehouse                                              |", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Total amount (AUD) of the order", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credit_card_amount": {"name": "credit_card_amount", "description": "Amount of the order (AUD) paid for by credit card", "meta": {}, "data_type": null, "quote": null, "tags": []}, "coupon_amount": {"name": "coupon_amount", "description": "Amount of the order (AUD) paid for by coupon", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bank_transfer_amount": {"name": "bank_transfer_amount", "description": "Amount of the order (AUD) paid for by bank transfer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gift_card_amount": {"name": "gift_card_amount", "description": "Amount of the order (AUD) paid for by gift card", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jaffle_shop2://models/marts/core/schema.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663072921.68595}, "model.jaffle_shop2.order_payments": {"raw_sql": "{% set payment_methods = ['credit_card', 'coupon', 'bank_transfer', 'gift_card'] %}\n\nwith payments as (\n\n    select * from {{ ref('stg_payments') }}\n\n),\n\nfinal as (\n\n    select\n        order_id,\n\n        {% for payment_method in payment_methods -%}\n        sum(case when payment_method = '{{payment_method}}' then amount else 0 end) as {{payment_method}}_amount,\n        {% endfor -%}\n\n        sum(amount) as total_amount\n\n    from payments\n\n    group by 1\n\n)\n\nselect * from final", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.jaffle_shop2.stg_payments"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "your-project", "schema": "my_dataset", "fqn": ["jaffle_shop2", "marts", "core", "intermediate", "order_payments"], "unique_id": "model.jaffle_shop2.order_payments", "package_name": "jaffle_shop2", "root_path": "/Users/yu/local/src/github/jaffle_shop", "path": "marts/core/intermediate/order_payments.sql", "original_file_path": "models/marts/core/intermediate/order_payments.sql", "name": "order_payments", "alias": "order_payments", "checksum": {"name": "sha256", "checksum": "6af89b1b7d0e9fe6b2b54118cf2addf0bab34ccc49b054eab93f8d7056fb7c52"}, "tags": [], "refs": [["stg_payments"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663072921.382179}, "model.jaffle_shop2.customer_payments": {"raw_sql": "with payments as (\n\n    select * from {{ ref('stg_payments') }}\n\n),\n\norders as (\n\n    select * from {{ ref('stg_orders') }}\n\n),\n\nfinal as (\n\n    select\n        orders.customer_id,\n        sum(amount) as total_amount\n\n    from payments\n\n    left join orders using (order_id)\n\n    group by 1\n\n)\n\nselect * from final", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.jaffle_shop2.stg_payments", "model.jaffle_shop2.stg_orders"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "your-project", "schema": "my_dataset", "fqn": ["jaffle_shop2", "marts", "core", "intermediate", "customer_payments"], "unique_id": "model.jaffle_shop2.customer_payments", "package_name": "jaffle_shop2", "root_path": "/Users/yu/local/src/github/jaffle_shop", "path": "marts/core/intermediate/customer_payments.sql", "original_file_path": "models/marts/core/intermediate/customer_payments.sql", "name": "customer_payments", "alias": "customer_payments", "checksum": {"name": "sha256", "checksum": "feb9a66904fe7968464b947a2289c795d58fbc7f1e14a3c9975dc261d94cb351"}, "tags": [], "refs": [["stg_payments"], ["stg_orders"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663072921.384993}, "model.jaffle_shop2.customer_orders": {"raw_sql": "with orders as (\n\n    select * from {{ ref('stg_orders') }}\n\n),\n\nfinal as (\n\n    select\n        customer_id,\n\n        min(order_date) as first_order,\n        max(order_date) as most_recent_order,\n        count(order_id) as number_of_orders\n    from orders\n\n    group by 1\n\n)\n\nselect * from final", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.jaffle_shop2.stg_orders"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "your-project", "schema": "my_dataset", "fqn": ["jaffle_shop2", "marts", "core", "intermediate", "customer_orders"], "unique_id": "model.jaffle_shop2.customer_orders", "package_name": "jaffle_shop2", "root_path": "/Users/yu/local/src/github/jaffle_shop", "path": "marts/core/intermediate/customer_orders.sql", "original_file_path": "models/marts/core/intermediate/customer_orders.sql", "name": "customer_orders", "alias": "customer_orders", "checksum": {"name": "sha256", "checksum": "20c96fcb3cf2235582de807d64cd1cdbdd3a419786bf1ceaae0ef208e7ed3dd7"}, "tags": [], "refs": [["stg_orders"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663072921.3862379}, "seed.jaffle_shop2.raw_customers": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "your-project", "schema": "my_dataset", "fqn": ["jaffle_shop2", "raw_customers"], "unique_id": "seed.jaffle_shop2.raw_customers", "package_name": "jaffle_shop2", "root_path": "/Users/yu/local/src/github/jaffle_shop", "path": "raw_customers.csv", "original_file_path": "data/raw_customers.csv", "name": "raw_customers", "alias": "raw_customers", "checksum": {"name": "sha256", "checksum": "714f9e3dddfcd62fe967462621908ba59cae1502d1661ee8d8649ba7a56cb830"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663072921.393158}, "seed.jaffle_shop2.raw_orders": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "your-project", "schema": "my_dataset", "fqn": ["jaffle_shop2", "raw_orders"], "unique_id": "seed.jaffle_shop2.raw_orders", "package_name": "jaffle_shop2", "root_path": "/Users/yu/local/src/github/jaffle_shop", "path": "raw_orders.csv", "original_file_path": "data/raw_orders.csv", "name": "raw_orders", "alias": "raw_orders", "checksum": {"name": "sha256", "checksum": "ee6c68d1639ec2b23a4495ec12475e09b8ed4b61e23ab0411ea7ec76648356f7"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663072921.394144}, "seed.jaffle_shop2.raw_payments": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "your-project", "schema": "my_dataset", "fqn": ["jaffle_shop2", "raw_payments"], "unique_id": "seed.jaffle_shop2.raw_payments", "package_name": "jaffle_shop2", "root_path": "/Users/yu/local/src/github/jaffle_shop", "path": "raw_payments.csv", "original_file_path": "data/raw_payments.csv", "name": "raw_payments", "alias": "raw_payments", "checksum": {"name": "sha256", "checksum": "03fd407f3135f84456431a923f22fc185a2154079e210c20b690e3ab11687d11"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663072921.395211}, "operation.jaffle_shop2.jaffle_shop2-on-run-end-0": {"raw_sql": "{{ elementary.upload_dbt_artifacts(results) }}", "resource_type": "operation", "depends_on": {"macros": ["macro.elementary.upload_dbt_artifacts"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "your-project", "schema": "my_dataset", "fqn": ["jaffle_shop2", "hooks", "jaffle_shop2-on-run-end-0"], "unique_id": "operation.jaffle_shop2.jaffle_shop2-on-run-end-0", "package_name": "jaffle_shop2", "root_path": "/Users/yu/local/src/github/jaffle_shop", "path": "hooks/jaffle_shop2-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "name": "jaffle_shop2-on-run-end-0", "alias": "jaffle_shop2-on-run-end-0", "checksum": {"name": "sha256", "checksum": "30316fe4afee1b2f6e0e6913db11fc66e53bc07c522f1aec43205a41cf8120c1"}, "tags": ["on-run-end"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663072921.401023, "index": 0}, "model.elementary.alerts_dbt_tests": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    bind=False\n  )\n}}\n\nwith elementary_test_results as (\n    select * from {{ ref('elementary_test_results') }}\n),\n\nalerts_dbt_tests as (\n    select id as alert_id,\n           data_issue_id,\n           test_execution_id,\n           test_unique_id,\n           model_unique_id,\n           detected_at,\n           database_name,\n           schema_name,\n           table_name,\n           column_name,\n           test_type as alert_type,\n           test_sub_type as sub_type,\n           test_results_description as alert_description,\n           owners,\n           tags,\n           test_results_query as alert_results_query,\n           other,\n           test_name,\n           test_params,\n           severity,\n           status\n        from elementary_test_results\n        where lower(status) != 'pass' and test_type = 'dbt_test'\n)\n\nselect * from alerts_dbt_tests\n{{ dbt_utils.group_by(21) }}", "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.elementary.elementary_test_results"]}, "config": {"enabled": true, "alias": null, "schema": "xxx_elementary_yyy", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "your-project", "schema": "my_dataset_xxx_elementary_yyy", "fqn": ["elementary", "edr", "alerts", "alerts_dbt_tests"], "unique_id": "model.elementary.alerts_dbt_tests", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "edr/alerts/alerts_dbt_tests.sql", "original_file_path": "models/edr/alerts/alerts_dbt_tests.sql", "name": "alerts_dbt_tests", "alias": "alerts_dbt_tests", "checksum": {"name": "sha256", "checksum": "543179742049c78872293b46c02133072a6a68772654fa0885b0f63b0775bc9b"}, "tags": [], "refs": [["elementary_test_results"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "bind": false, "schema": "xxx_elementary_yyy"}, "created_at": 1663072921.417496}, "model.elementary.alerts_schema_changes": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    bind=False\n  )\n}}\n\n\nwith elementary_test_results as (\n    select * from {{ ref('elementary_test_results') }}\n),\n\nalerts_schema_changes as (\n    select id as alert_id,\n           data_issue_id,\n           test_execution_id,\n           test_unique_id,\n           model_unique_id,\n           detected_at,\n           database_name,\n           schema_name,\n           table_name,\n           column_name,\n           test_type as alert_type,\n           test_sub_type as sub_type,\n           test_results_description as alert_description,\n           owners,\n           tags,\n           test_results_query as alert_results_query,\n           other,\n           test_name,\n           test_params,\n           severity,\n           status\n        from elementary_test_results\n        where lower(status) != 'pass' and test_type = 'schema_change'\n)\n\nselect * from alerts_schema_changes\n{{ dbt_utils.group_by(21) }}", "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.elementary.elementary_test_results"]}, "config": {"enabled": true, "alias": null, "schema": "xxx_elementary_yyy", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "your-project", "schema": "my_dataset_xxx_elementary_yyy", "fqn": ["elementary", "edr", "alerts", "alerts_schema_changes"], "unique_id": "model.elementary.alerts_schema_changes", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "edr/alerts/alerts_schema_changes.sql", "original_file_path": "models/edr/alerts/alerts_schema_changes.sql", "name": "alerts_schema_changes", "alias": "alerts_schema_changes", "checksum": {"name": "sha256", "checksum": "04b6436dd3b16ba77a8859b38538a67d3c7bd4c9b4f02324132fb5fc8cb43601"}, "tags": [], "refs": [["elementary_test_results"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "bind": false, "schema": "xxx_elementary_yyy"}, "created_at": 1663072921.422113}, "model.elementary.alerts_data_monitoring": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    bind=False\n  )\n}}\n\nwith elementary_test_results as (\n    select * from {{ ref('elementary_test_results') }}\n),\n\nalerts_data_monitoring as (\n    select id as alert_id,\n           data_issue_id,\n           test_execution_id,\n           test_unique_id,\n           model_unique_id,\n           detected_at,\n           database_name,\n           schema_name,\n           table_name,\n           column_name,\n           test_type as alert_type,\n           test_sub_type as sub_type,\n           test_results_description as alert_description,\n           owners,\n           tags,\n           test_results_query as alert_results_query,\n           other,\n           test_name,\n           test_params,\n           severity,\n           status\n        from elementary_test_results\n        where lower(status) != 'pass' and test_type = 'anomaly_detection'\n\n)\n\nselect * from alerts_data_monitoring\n{{ dbt_utils.group_by(21) }}", "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by"], "nodes": ["model.elementary.elementary_test_results"]}, "config": {"enabled": true, "alias": null, "schema": "xxx_elementary_yyy", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "your-project", "schema": "my_dataset_xxx_elementary_yyy", "fqn": ["elementary", "edr", "alerts", "alerts_data_monitoring"], "unique_id": "model.elementary.alerts_data_monitoring", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "edr/alerts/alerts_data_monitoring.sql", "original_file_path": "models/edr/alerts/alerts_data_monitoring.sql", "name": "alerts_data_monitoring", "alias": "alerts_data_monitoring", "checksum": {"name": "sha256", "checksum": "e0e595c16bea81127e5a5dcd762f62dd41bbac1ae9e2a295f7ff40d28423078f"}, "tags": [], "refs": [["elementary_test_results"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "bind": false, "schema": "xxx_elementary_yyy"}, "created_at": 1663072921.4255822}, "model.elementary.monitors_runs": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    bind=False\n  )\n}}\n\nwith data_monitoring_metrics as (\n\n    select * from {{ ref('data_monitoring_metrics') }}\n\n),\n\nmax_bucket_end as (\n\n    select full_table_name,\n           column_name,\n           metric_name,\n           max(bucket_end) as last_bucket_end\n    from data_monitoring_metrics\n    group by 1,2,3\n\n)\n\nselect * from max_bucket_end", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.elementary.data_monitoring_metrics"]}, "config": {"enabled": true, "alias": null, "schema": "xxx_elementary_yyy", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "your-project", "schema": "my_dataset_xxx_elementary_yyy", "fqn": ["elementary", "edr", "system", "monitors_runs"], "unique_id": "model.elementary.monitors_runs", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "edr/system/monitors_runs.sql", "original_file_path": "models/edr/system/monitors_runs.sql", "name": "monitors_runs", "alias": "monitors_runs", "checksum": {"name": "sha256", "checksum": "3ea6b2307779564cab2f48294968553fa4360057e7ec96083f87e913716facb1"}, "tags": [], "refs": [["data_monitoring_metrics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "bind": false, "schema": "xxx_elementary_yyy"}, "created_at": 1663072921.456169}, "model.elementary.elementary_test_results": {"raw_sql": "{{\n  config(\n    materialized = 'incremental',\n    unique_key = 'id',\n    on_schema_change = 'append_new_columns'\n  )\n}}\n\n{{ elementary.empty_elementary_test_results() }}", "resource_type": "model", "depends_on": {"macros": ["macro.elementary.empty_elementary_test_results"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "xxx_elementary_yyy", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "append_new_columns", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "your-project", "schema": "my_dataset_xxx_elementary_yyy", "fqn": ["elementary", "edr", "test_results", "elementary_test_results"], "unique_id": "model.elementary.elementary_test_results", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "edr/test_results/elementary_test_results.sql", "original_file_path": "models/edr/test_results/elementary_test_results.sql", "name": "elementary_test_results", "alias": "elementary_test_results", "checksum": {"name": "sha256", "checksum": "ea91af4e343fa87f2d7f71e145b65a88586ac2378fd5ac7edc986270b4386976"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "id", "on_schema_change": "append_new_columns", "schema": "xxx_elementary_yyy"}, "created_at": 1663072921.457779}, "model.elementary.dbt_tests": {"raw_sql": "{{\n  config(\n    materialized='table',\n    transient=False,\n    post_hook='{{ elementary.upload_dbt_tests() }}'\n  )\n}}\n\n{{ elementary.get_dbt_tests_empty_table_query() }}", "resource_type": "model", "depends_on": {"macros": ["macro.elementary.get_dbt_tests_empty_table_query", "macro.elementary.upload_dbt_tests"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "xxx_elementary_yyy", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "transient": false, "post-hook": [{"sql": "{{ elementary.upload_dbt_tests() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "your-project", "schema": "my_dataset_xxx_elementary_yyy", "fqn": ["elementary", "edr", "dbt_artifacts", "dbt_tests"], "unique_id": "model.elementary.dbt_tests", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "edr/dbt_artifacts/dbt_tests.sql", "original_file_path": "models/edr/dbt_artifacts/dbt_tests.sql", "name": "dbt_tests", "alias": "dbt_tests", "checksum": {"name": "sha256", "checksum": "3956b404ed65a102ba81f11017b907552259fee6d90908c3070a6590363d8742"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "transient": false, "post-hook": ["{{ elementary.upload_dbt_tests() }}"], "schema": "xxx_elementary_yyy"}, "created_at": 1663072921.4757838}, "model.elementary.dbt_models": {"raw_sql": "{{\n  config(\n    materialized='table',\n    transient=False,\n    post_hook='{{ elementary.upload_dbt_models() }}'\n  )\n}}\n\n{{ elementary.get_dbt_models_empty_table_query() }}", "resource_type": "model", "depends_on": {"macros": ["macro.elementary.get_dbt_models_empty_table_query", "macro.elementary.upload_dbt_models"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "xxx_elementary_yyy", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "transient": false, "post-hook": [{"sql": "{{ elementary.upload_dbt_models() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "your-project", "schema": "my_dataset_xxx_elementary_yyy", "fqn": ["elementary", "edr", "dbt_artifacts", "dbt_models"], "unique_id": "model.elementary.dbt_models", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "edr/dbt_artifacts/dbt_models.sql", "original_file_path": "models/edr/dbt_artifacts/dbt_models.sql", "name": "dbt_models", "alias": "dbt_models", "checksum": {"name": "sha256", "checksum": "8680ed09504aa131ec7dabe69d2eb9262157554f8dcdc3795ad3dbd94e7bbf39"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "transient": false, "post-hook": ["{{ elementary.upload_dbt_models() }}"], "schema": "xxx_elementary_yyy"}, "created_at": 1663072921.491414}, "model.elementary.dbt_sources": {"raw_sql": "{{\n  config(\n    materialized='table',\n    transient=False,\n    post_hook='{{ elementary.upload_dbt_sources() }}'\n    )\n}}\n\n{{ elementary.get_dbt_sources_empty_table_query() }}", "resource_type": "model", "depends_on": {"macros": ["macro.elementary.get_dbt_sources_empty_table_query", "macro.elementary.upload_dbt_sources"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "xxx_elementary_yyy", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "transient": false, "post-hook": [{"sql": "{{ elementary.upload_dbt_sources() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "your-project", "schema": "my_dataset_xxx_elementary_yyy", "fqn": ["elementary", "edr", "dbt_artifacts", "dbt_sources"], "unique_id": "model.elementary.dbt_sources", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "edr/dbt_artifacts/dbt_sources.sql", "original_file_path": "models/edr/dbt_artifacts/dbt_sources.sql", "name": "dbt_sources", "alias": "dbt_sources", "checksum": {"name": "sha256", "checksum": "a590a62c56df560f7bc2883a34682f77d6df92cbcd1cf61a6f5d0163b3b0ab21"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "transient": false, "post-hook": ["{{ elementary.upload_dbt_sources() }}"], "schema": "xxx_elementary_yyy"}, "created_at": 1663072921.502781}, "model.elementary.dbt_metrics": {"raw_sql": "{{\n  config(\n    materialized='table',\n    transient=False,\n    post_hook='{{ elementary.upload_dbt_metrics() }}'\n    )\n}}\n\n{{ elementary.get_dbt_metrics_empty_table_query() }}", "resource_type": "model", "depends_on": {"macros": ["macro.elementary.get_dbt_metrics_empty_table_query", "macro.elementary.upload_dbt_metrics"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "xxx_elementary_yyy", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "transient": false, "post-hook": [{"sql": "{{ elementary.upload_dbt_metrics() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "your-project", "schema": "my_dataset_xxx_elementary_yyy", "fqn": ["elementary", "edr", "dbt_artifacts", "dbt_metrics"], "unique_id": "model.elementary.dbt_metrics", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "edr/dbt_artifacts/dbt_metrics.sql", "original_file_path": "models/edr/dbt_artifacts/dbt_metrics.sql", "name": "dbt_metrics", "alias": "dbt_metrics", "checksum": {"name": "sha256", "checksum": "b733a8cc552f3e0f7433ff938f52cfb7ae87f0bc20a33b806b775bf66ad24aba"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "transient": false, "post-hook": ["{{ elementary.upload_dbt_metrics() }}"], "schema": "xxx_elementary_yyy"}, "created_at": 1663072921.515292}, "model.elementary.dbt_run_results": {"raw_sql": "{{\n  config(\n    materialized = 'incremental',\n    transient=False,\n    unique_key = 'model_execution_id',\n    on_schema_change = 'append_new_columns'\n  )\n}}\n\n{{ elementary.get_dbt_run_results_empty_table_query() }}", "resource_type": "model", "depends_on": {"macros": ["macro.elementary.get_dbt_run_results_empty_table_query"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "xxx_elementary_yyy", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "model_execution_id", "on_schema_change": "append_new_columns", "grants": {}, "transient": false, "post-hook": [], "pre-hook": []}, "database": "your-project", "schema": "my_dataset_xxx_elementary_yyy", "fqn": ["elementary", "edr", "dbt_artifacts", "dbt_run_results"], "unique_id": "model.elementary.dbt_run_results", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "edr/dbt_artifacts/dbt_run_results.sql", "original_file_path": "models/edr/dbt_artifacts/dbt_run_results.sql", "name": "dbt_run_results", "alias": "dbt_run_results", "checksum": {"name": "sha256", "checksum": "051e32a439ef1a82ef82629c17c2f7f4a838da31a7c29a2c911c888acd7e4e97"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "transient": false, "unique_key": "model_execution_id", "on_schema_change": "append_new_columns", "schema": "xxx_elementary_yyy"}, "created_at": 1663072921.5285492}, "model.elementary.dbt_exposures": {"raw_sql": "{{\n  config(\n    materialized='table',\n    transient=False,\n    post_hook='{{ elementary.upload_dbt_exposures() }}'\n    )\n}}\n\n{{ elementary.get_dbt_exposures_empty_table_query() }}", "resource_type": "model", "depends_on": {"macros": ["macro.elementary.get_dbt_exposures_empty_table_query", "macro.elementary.upload_dbt_exposures"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "xxx_elementary_yyy", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "transient": false, "post-hook": [{"sql": "{{ elementary.upload_dbt_exposures() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "your-project", "schema": "my_dataset_xxx_elementary_yyy", "fqn": ["elementary", "edr", "dbt_artifacts", "dbt_exposures"], "unique_id": "model.elementary.dbt_exposures", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "edr/dbt_artifacts/dbt_exposures.sql", "original_file_path": "models/edr/dbt_artifacts/dbt_exposures.sql", "name": "dbt_exposures", "alias": "dbt_exposures", "checksum": {"name": "sha256", "checksum": "f829fd29996b076f76f7c689497b8d67f8ab3af5fbd6d482783877291797827e"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "transient": false, "post-hook": ["{{ elementary.upload_dbt_exposures() }}"], "schema": "xxx_elementary_yyy"}, "created_at": 1663072921.539072}, "model.elementary.metrics_anomaly_score": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    bind=False\n  )\n}}\n\n{%- set timeframe_end = \"'\"~ run_started_at.strftime(\"%Y-%m-%d 00:00:00\")~\"'\" %}\n\nwith data_monitoring_metrics as (\n\n    select * from {{ ref('data_monitoring_metrics') }}\n\n),\n\ndaily_buckets as (\n\n   {{ elementary.daily_buckets_cte() }}\n\n),\n\ntime_window_aggregation as (\n\n    select\n        *,\n        avg(metric_value) over (partition by metric_name, full_table_name, column_name order by edr_daily_bucket asc rows between {{ elementary.get_config_var('days_back') }} preceding and current row) as training_avg,\n        stddev(metric_value) over (partition by metric_name, full_table_name, column_name order by edr_daily_bucket asc rows between {{ elementary.get_config_var('days_back') }} preceding and current row) as training_stddev,\n        count(metric_value) over (partition by metric_name, full_table_name, column_name order by edr_daily_bucket asc rows between {{ elementary.get_config_var('days_back') }} preceding and current row) as training_set_size,\n        last_value(bucket_end) over (partition by metric_name, full_table_name, column_name order by edr_daily_bucket asc rows between {{ elementary.get_config_var('days_back') }} preceding and current row) training_end,\n        first_value(bucket_end) over (partition by metric_name, full_table_name, column_name order by edr_daily_bucket asc rows between {{ elementary.get_config_var('days_back') }} preceding and current row) as training_start\n    from daily_buckets left join\n        data_monitoring_metrics on (edr_daily_bucket = bucket_end)\n    {{ dbt_utils.group_by(11) }}\n\n),\n\nmetrics_anomaly_score as (\n\n    select\n        id,\n        full_table_name,\n        column_name,\n        metric_name,\n        case\n           when training_stddev = 0 then 0\n           else (metric_value - training_avg) / (training_stddev)\n        end as z_score,\n        metric_value as latest_metric_value,\n        bucket_start,\n        bucket_end,\n        training_avg,\n        training_stddev,\n        training_start,\n        training_end,\n        training_set_size,\n        max(updated_at) as updated_at\n    from time_window_aggregation\n        where\n            metric_value is not null\n            and training_avg is not null\n            and training_stddev is not null\n            and training_set_size >= {{ elementary.get_config_var('days_back') - 1 }}\n            and bucket_end >= {{ elementary.timeadd('day', '-7', timeframe_end) }}\n    {{ dbt_utils.group_by(13) }}\n    order by bucket_end desc\n\n\n),\n\nfinal as (\n\n    select *,\n        case\n            when abs(z_score) > {{ elementary.get_config_var('anomaly_sensitivity') }} then true\n            else false end\n        as is_anomaly\n    from metrics_anomaly_score\n    {{ dbt_utils.group_by(14) }}\n\n)\n\nselect * from final", "resource_type": "model", "depends_on": {"macros": ["macro.elementary.daily_buckets_cte", "macro.elementary.get_config_var", "macro.dbt_utils.group_by", "macro.elementary.timeadd"], "nodes": ["model.elementary.data_monitoring_metrics"]}, "config": {"enabled": true, "alias": null, "schema": "xxx_elementary_yyy", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "your-project", "schema": "my_dataset_xxx_elementary_yyy", "fqn": ["elementary", "edr", "data_monitoring", "anomaly_detection", "metrics_anomaly_score"], "unique_id": "model.elementary.metrics_anomaly_score", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "edr/data_monitoring/anomaly_detection/metrics_anomaly_score.sql", "original_file_path": "models/edr/data_monitoring/anomaly_detection/metrics_anomaly_score.sql", "name": "metrics_anomaly_score", "alias": "metrics_anomaly_score", "checksum": {"name": "sha256", "checksum": "0a7962cd286c0eb2198885660b431ece337790e039c36be87782afffa5e29132"}, "tags": [], "refs": [["data_monitoring_metrics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "bind": false, "schema": "xxx_elementary_yyy"}, "created_at": 1663072921.5511522}, "model.elementary.anomaly_threshold_sensitivity": {"raw_sql": "{{\n  config(\n    materialized = 'view',\n    bind=False\n  )\n}}\n\nwith metrics_anomaly_score as (\n\n    select * from {{ ref('metrics_anomaly_score') }}\n\n),\n\nscore_sensitivity as (\n\n    select\n        full_table_name,\n        column_name,\n        metric_name,\n        latest_metric_value,\n        training_avg as metric_avg,\n        z_score,\n        case when abs(z_score) >= 1.5 then true else false end as {{ elementary.quote_column('is_anomaly_1_5') }},\n        case when abs(z_score) >= 2 then true else false end as {{ elementary.quote_column('is_anomaly_2') }},\n        case when abs(z_score) >= 2.5 then true else false end as {{ elementary.quote_column('is_anomaly_2_5') }},\n        case when abs(z_score) >= 3 then true else false end as {{ elementary.quote_column('is_anomaly_3') }},\n        case when abs(z_score) >= 3.5 then true else false end as {{ elementary.quote_column('is_anomaly_3_5') }},\n        case when abs(z_score) >= 4 then true else false end as {{ elementary.quote_column('is_anomaly_4') }},\n        case when abs(z_score) >= 4.5 then true else false end as {{ elementary.quote_column('is_anomaly_4_5') }}\n    from metrics_anomaly_score\n    where abs(z_score) >= 1.5\n\n)\n\nselect * from score_sensitivity", "resource_type": "model", "depends_on": {"macros": ["macro.elementary.quote_column"], "nodes": ["model.elementary.metrics_anomaly_score"]}, "config": {"enabled": true, "alias": null, "schema": "xxx_elementary_yyy", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "bind": false, "post-hook": [], "pre-hook": []}, "database": "your-project", "schema": "my_dataset_xxx_elementary_yyy", "fqn": ["elementary", "edr", "data_monitoring", "anomaly_detection", "anomaly_threshold_sensitivity"], "unique_id": "model.elementary.anomaly_threshold_sensitivity", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "edr/data_monitoring/anomaly_detection/anomaly_threshold_sensitivity.sql", "original_file_path": "models/edr/data_monitoring/anomaly_detection/anomaly_threshold_sensitivity.sql", "name": "anomaly_threshold_sensitivity", "alias": "anomaly_threshold_sensitivity", "checksum": {"name": "sha256", "checksum": "84a665bc19a3a195e9460e22e5721ad8c99c9477b64ac213acbe9d76d72167a3"}, "tags": [], "refs": [["metrics_anomaly_score"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "bind": false, "schema": "xxx_elementary_yyy"}, "created_at": 1663072921.561132}, "model.elementary.schema_columns_snapshot": {"raw_sql": "{{\n  config(\n    materialized='incremental',\n    unique_key = 'column_state_id'\n  )\n}}\n\n\nwith information_schema_columns as (\n\n    select * from {{ ref('filtered_information_schema_columns') }}\n\n),\n\ncolumns_snapshot as (\n\n    select\n        full_table_name,\n        database_name,\n        schema_name,\n        table_name,\n        column_name,\n        cast(data_type as {{ dbt_utils.type_string() }}) as data_type,\n        {{ elementary.run_start_column() }} as detected_at,\n\n        {% if is_incremental() %}\n            {%- set known_columns_query %}\n                select full_column_name from {{ this }}\n                where detected_at = (select max(detected_at) from {{ this }})\n            {% endset %}\n            {%- set known_columns = elementary.result_column_to_list(known_columns_query) %}\n\n            {%- set known_tables_query %}\n                select distinct full_table_name from {{ this }}\n                where detected_at = (select max(detected_at) from {{ this }})\n            {% endset %}\n            {%- set known_tables = elementary.result_column_to_list(known_tables_query) %}\n\n            case when\n                {{ elementary.full_column_name() }} not in {{ elementary.strings_list_to_tuple(known_columns) }}\n                and full_table_name in {{ elementary.strings_list_to_tuple(known_tables) }}\n            then true\n            else false end\n            as is_new\n        {% else %}\n            false as is_new\n        {% endif %}\n    from information_schema_columns\n\n),\n\ncolumns_snapshot_with_id as (\n\n    select\n        {{ dbt_utils.surrogate_key([\n          'full_table_name',\n          'column_name',\n          'data_type'\n        ]) }} as column_state_id,\n        {{ elementary.full_column_name() }} as full_column_name,\n        full_table_name,\n        column_name,\n        data_type,\n        is_new,\n        max(detected_at) as detected_at\n    from columns_snapshot\n    group by 1,2,3,4,5,6\n\n)\n\nselect\n    {{ elementary.cast_as_string('column_state_id') }} as column_state_id,\n    {{ elementary.cast_as_string('full_column_name') }} as full_column_name,\n    {{ elementary.cast_as_string('full_table_name') }} as full_table_name,\n    {{ elementary.cast_as_string('column_name') }} as column_name,\n    {{ elementary.cast_as_string('data_type') }} as data_type,\n    {{ elementary.cast_as_bool('is_new') }} as is_new,\n    {{ elementary.cast_as_timestamp('detected_at') }} as detected_at\nfrom columns_snapshot_with_id", "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.elementary.run_start_column", "macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key", "macro.elementary.full_column_name", "macro.elementary.cast_as_string", "macro.elementary.cast_as_bool", "macro.elementary.cast_as_timestamp"], "nodes": ["model.elementary.filtered_information_schema_columns"]}, "config": {"enabled": true, "alias": null, "schema": "xxx_elementary_yyy", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "column_state_id", "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "your-project", "schema": "my_dataset_xxx_elementary_yyy", "fqn": ["elementary", "edr", "data_monitoring", "schema_changes", "schema_columns_snapshot"], "unique_id": "model.elementary.schema_columns_snapshot", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "edr/data_monitoring/schema_changes/schema_columns_snapshot.sql", "original_file_path": "models/edr/data_monitoring/schema_changes/schema_columns_snapshot.sql", "name": "schema_columns_snapshot", "alias": "schema_columns_snapshot", "checksum": {"name": "sha256", "checksum": "e9711a36e5091e570dfc71f6ef96a8591a64fa81036cd735cbfff5fcf70dccb2"}, "tags": [], "refs": [["filtered_information_schema_columns"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "column_state_id", "schema": "xxx_elementary_yyy"}, "created_at": 1663072921.567752}, "model.elementary.table_changes": {"raw_sql": "{{\n  config(\n    materialized = 'incremental',\n    unique_key = 'change_id'\n  )\n}}\n\nwith cur as (\n\n    select * from {{ ref('current_schema_tables')}}\n\n),\n\npre as (\n\n    select * from {{ ref('previous_schema_tables')}}\n\n),\n\ntable_added as (\n\n    select\n        full_table_name,\n        'table_added' as change,\n        detected_at\n    from cur\n    where is_new = true\n\n),\n\ntable_removed as (\n\n    select\n        pre.full_table_name,\n        'table_removed' as change,\n        pre.detected_at as detected_at\n    from pre left join cur\n        on (cur.full_table_name = pre.full_table_name and cur.full_schema_name = pre.full_schema_name)\n    where cur.full_table_name is null\n    and pre.full_schema_name in {{ elementary.configured_schemas_from_graph_as_tuple() }}\n\n),\n\nall_table_changes as (\n\n    select * from table_removed\n    union all\n    select * from table_added\n\n),\n\ntable_changes_desc as (\n\n    select\n        {{ dbt_utils.surrogate_key(['full_table_name', 'change', 'detected_at']) }} as change_id,\n        {{ elementary.full_name_split('database_name') }},\n        {{ elementary.full_name_split('schema_name') }},\n        {{ elementary.full_name_split('table_name') }},\n        {{ elementary.run_start_column() }} as detected_at,\n        change,\n        case\n            when change='table_added'\n                then 'The table \"' || full_table_name || '\" was added'\n            when change='table_removed'\n                then 'The table \"' || full_table_name || '\" was removed'\n            else NULL\n        end as change_description\n    from all_table_changes\n\n)\n\nselect\n    {{ elementary.cast_as_string('change_id') }} as change_id,\n    {{ elementary.cast_as_string('database_name') }} as database_name,\n    {{ elementary.cast_as_string('schema_name') }} as schema_name,\n    {{ elementary.cast_as_string('table_name') }} as table_name,\n    {{ elementary.cast_as_timestamp('detected_at') }} as detected_at,\n    {{ elementary.cast_as_string('change') }} as change,\n    {{ elementary.cast_as_long_string('change_description') }} as change_description\nfrom table_changes_desc\n{{ dbt_utils.group_by(7) }}", "resource_type": "model", "depends_on": {"macros": ["macro.elementary.configured_schemas_from_graph_as_tuple", "macro.dbt_utils.surrogate_key", "macro.elementary.full_name_split", "macro.elementary.run_start_column", "macro.elementary.cast_as_string", "macro.elementary.cast_as_timestamp", "macro.elementary.cast_as_long_string", "macro.dbt_utils.group_by"], "nodes": ["model.elementary.current_schema_tables", "model.elementary.previous_schema_tables"]}, "config": {"enabled": true, "alias": null, "schema": "xxx_elementary_yyy", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "change_id", "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "your-project", "schema": "my_dataset_xxx_elementary_yyy", "fqn": ["elementary", "edr", "data_monitoring", "schema_changes", "table_changes"], "unique_id": "model.elementary.table_changes", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "edr/data_monitoring/schema_changes/table_changes.sql", "original_file_path": "models/edr/data_monitoring/schema_changes/table_changes.sql", "name": "table_changes", "alias": "table_changes", "checksum": {"name": "sha256", "checksum": "dc394fdca39b4d2492caaac734bef429c98f93a076e7f6d6fde6377e7aed4f54"}, "tags": [], "refs": [["current_schema_tables"], ["previous_schema_tables"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "change_id", "schema": "xxx_elementary_yyy"}, "created_at": 1663072921.585624}, "model.elementary.column_changes": {"raw_sql": "{{\n  config(\n    materialized = 'incremental',\n    unique_key = 'change_id'\n  )\n}}\n\nwith cur as (\n\n    select * from {{ ref('current_schema_columns')}}\n\n),\n\npre as (\n\n    select * from {{ ref('previous_schema_columns')}}\n\n),\n\ntype_changes as (\n\n    select\n        cur.full_table_name,\n        'type_changed' as change,\n        cur.column_name,\n        cur.data_type as data_type,\n        pre.data_type as pre_data_type,\n        pre.detected_at\n    from cur inner join pre\n        on (cur.full_table_name = pre.full_table_name and cur.column_name = pre.column_name)\n    where cur.data_type != pre.data_type\n\n),\n\ncolumns_added as (\n\n    select\n        full_table_name,\n        'column_added' as change,\n        column_name,\n        data_type,\n        {{ elementary.null_string() }} as pre_data_type,\n        detected_at as detected_at\n    from cur\n    where is_new = true\n\n),\n\ncolumns_removed as (\n\n    select\n        pre.full_table_name,\n        'column_removed' as change,\n        pre.column_name as column_name,\n        {{ elementary.null_string() }} as data_type,\n        pre.data_type as pre_data_type,\n        pre.detected_at as detected_at\n    from pre left join cur\n        on (cur.full_table_name = pre.full_table_name and cur.column_name = pre.column_name)\n    where cur.full_table_name is null and cur.column_name is null\n\n),\n\ncolumns_removed_filter_deleted_tables as (\n\n    select\n        removed.full_table_name,\n        removed.change,\n        removed.column_name,\n        removed.data_type,\n        removed.pre_data_type,\n        removed.detected_at\n    from columns_removed as removed join cur\n        on (removed.full_table_name = cur.full_table_name)\n\n),\n\nall_column_changes as (\n\n    select * from type_changes\n    union all\n    select * from columns_removed_filter_deleted_tables\n    union all\n    select * from columns_added\n\n),\n\ncolumn_changes_desc as (\n\n    select\n        {{ dbt_utils.surrogate_key(['full_table_name', 'column_name', 'change', 'detected_at']) }} as change_id,\n        {{ elementary.full_name_split('database_name') }},\n        {{ elementary.full_name_split('schema_name') }},\n        {{ elementary.full_name_split('table_name') }},\n        column_name,\n        {{ elementary.run_start_column() }} as detected_at,\n        change,\n        case\n            when change= 'column_added'\n                then 'The column \"' || column_name || '\" was added'\n            when change= 'column_removed'\n                then 'The column \"' || column_name || '\" was removed'\n            when change= 'type_changed'\n                then 'The type of \"' || column_name || '\" was changed from ' || pre_data_type || ' to ' || data_type\n            else NULL\n        end as change_description\n    from all_column_changes\n\n)\n\nselect\n    {{ elementary.cast_as_string('change_id') }} as change_id,\n    {{ elementary.cast_as_string('database_name') }} as database_name,\n    {{ elementary.cast_as_string('schema_name') }} as schema_name,\n    {{ elementary.cast_as_string('table_name') }} as table_name,\n    {{ elementary.cast_as_string('column_name') }} as column_name,\n    {{ elementary.cast_as_timestamp('detected_at') }} as detected_at,\n    {{ elementary.cast_as_string('change') }} as change,\n    {{ elementary.cast_as_long_string('change_description') }} as change_description\nfrom column_changes_desc\n{{ dbt_utils.group_by(8) }}", "resource_type": "model", "depends_on": {"macros": ["macro.elementary.null_string", "macro.dbt_utils.surrogate_key", "macro.elementary.full_name_split", "macro.elementary.run_start_column", "macro.elementary.cast_as_string", "macro.elementary.cast_as_timestamp", "macro.elementary.cast_as_long_string", "macro.dbt_utils.group_by"], "nodes": ["model.elementary.current_schema_columns", "model.elementary.previous_schema_columns"]}, "config": {"enabled": true, "alias": null, "schema": "xxx_elementary_yyy", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "change_id", "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "your-project", "schema": "my_dataset_xxx_elementary_yyy", "fqn": ["elementary", "edr", "data_monitoring", "schema_changes", "column_changes"], "unique_id": "model.elementary.column_changes", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "edr/data_monitoring/schema_changes/column_changes.sql", "original_file_path": "models/edr/data_monitoring/schema_changes/column_changes.sql", "name": "column_changes", "alias": "column_changes", "checksum": {"name": "sha256", "checksum": "ca7d7254c65d9e2408a0c45bb0f6c5cb1189f289821bf93e144de48856ff5570"}, "tags": [], "refs": [["current_schema_columns"], ["previous_schema_columns"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "change_id", "schema": "xxx_elementary_yyy"}, "created_at": 1663072921.601218}, "model.elementary.schema_tables_snapshot": {"raw_sql": "{{\n  config(\n    materialized='incremental',\n    unique_key = 'table_state_id'\n  )\n}}\n\nwith information_schema_tables as (\n\n    select * from {{ ref('filtered_information_schema_tables') }}\n\n),\n\nschema_tables as (\n\n    select\n        full_schema_name,\n        table_name,\n        full_table_name,\n        {{ elementary.run_start_column() }} as detected_at,\n\n        {% if is_incremental() %}\n            {%- set known_tables_query %}\n                select full_table_name from {{ this }}\n                where detected_at = (select max(detected_at) from {{ this }})\n            {% endset %}\n            {%- set known_tables = elementary.result_column_to_list(known_tables_query) %}\n\n            {%- set known_schemas_query %}\n                select distinct full_schema_name from {{ this }}\n                where detected_at = (select max(detected_at) from {{ this }})\n            {% endset %}\n            {%- set known_schemas = elementary.result_column_to_list(known_schemas_query) %}\n\n            case when\n                full_table_name not in {{ elementary.strings_list_to_tuple(known_tables) }}\n                and full_schema_name in {{ elementary.strings_list_to_tuple(known_schemas) }}\n            then true\n            else false end\n            as is_new\n        {% else %}\n            false as is_new\n        {% endif %}\n\n    from information_schema_tables\n\n),\n\nschema_tables_with_id as (\n\n    select\n        {{ dbt_utils.surrogate_key([\n          'full_table_name'\n        ]) }} as table_state_id,\n        full_schema_name,\n        full_table_name,\n        is_new,\n        max(detected_at) as detected_at\n    from schema_tables\n    group by 1,2,3,4\n\n)\n\nselect\n    {{ elementary.cast_as_string('table_state_id') }} as table_state_id,\n    {{ elementary.cast_as_string('full_schema_name') }} as full_schema_name,\n    {{ elementary.cast_as_string('full_table_name') }} as full_table_name,\n    {{ elementary.cast_as_bool('is_new') }} as is_new,\n    {{ elementary.cast_as_timestamp('detected_at') }} as detected_at\nfrom schema_tables_with_id", "resource_type": "model", "depends_on": {"macros": ["macro.elementary.run_start_column", "macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key", "macro.elementary.cast_as_string", "macro.elementary.cast_as_bool", "macro.elementary.cast_as_timestamp"], "nodes": ["model.elementary.filtered_information_schema_tables"]}, "config": {"enabled": true, "alias": null, "schema": "xxx_elementary_yyy", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "table_state_id", "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "your-project", "schema": "my_dataset_xxx_elementary_yyy", "fqn": ["elementary", "edr", "data_monitoring", "schema_changes", "schema_tables_snapshot"], "unique_id": "model.elementary.schema_tables_snapshot", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "edr/data_monitoring/schema_changes/schema_tables_snapshot.sql", "original_file_path": "models/edr/data_monitoring/schema_changes/schema_tables_snapshot.sql", "name": "schema_tables_snapshot", "alias": "schema_tables_snapshot", "checksum": {"name": "sha256", "checksum": "f8e99a5ff3913b351e3242fcc6ddfeb9c8e59ab7681b3ae458878d8bfa138cbf"}, "tags": [], "refs": [["filtered_information_schema_tables"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "table_state_id", "schema": "xxx_elementary_yyy"}, "created_at": 1663072921.610945}, "model.elementary.previous_schema_tables": {"raw_sql": "{{\n  config(\n    materialized='ephemeral'\n  )\n}}\n\nwith tables_snapshot as (\n\n    select * from {{ ref('schema_tables_snapshot') }}\n),\n\nprevious_run_time as (\n\n    select detected_at\n    from tables_snapshot\n    group by detected_at\n    order by detected_at desc\n    limit 1 offset 1\n\n),\n\nprevious_schema as (\n\n    select\n        full_schema_name,\n        full_table_name,\n        is_new,\n        detected_at\n    from tables_snapshot\n    where detected_at = (select detected_at from previous_run_time)\n\n)\n\nselect * from previous_schema", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.elementary.schema_tables_snapshot"]}, "config": {"enabled": true, "alias": null, "schema": "xxx_elementary_yyy", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "your-project", "schema": "my_dataset_xxx_elementary_yyy", "fqn": ["elementary", "edr", "data_monitoring", "schema_changes", "previous_and_current_schemas", "previous_schema_tables"], "unique_id": "model.elementary.previous_schema_tables", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "edr/data_monitoring/schema_changes/previous_and_current_schemas/previous_schema_tables.sql", "original_file_path": "models/edr/data_monitoring/schema_changes/previous_and_current_schemas/previous_schema_tables.sql", "name": "previous_schema_tables", "alias": "previous_schema_tables", "checksum": {"name": "sha256", "checksum": "a90b264aa851e9ab9e159ee259617256960f9598dcf5ce5d5d35806eacd21b08"}, "tags": [], "refs": [["schema_tables_snapshot"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "schema": "xxx_elementary_yyy"}, "created_at": 1663072921.6183329}, "model.elementary.current_schema_columns": {"raw_sql": "{{\n  config(\n    materialized='ephemeral'\n  )\n}}\n\nwith columns_snapshot as (\n\n    select * from {{ ref('schema_columns_snapshot') }}\n),\n\nthis_run_time as (\n\n    select detected_at\n    from columns_snapshot\n    group by detected_at\n    order by detected_at desc\n    limit 1\n\n),\n\ncurrent_schema as (\n\n    select\n        full_table_name,\n        column_name,\n        data_type,\n        is_new,\n        detected_at\n    from columns_snapshot\n    where detected_at = (select detected_at from this_run_time)\n\n)\n\nselect * from current_schema", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.elementary.schema_columns_snapshot"]}, "config": {"enabled": true, "alias": null, "schema": "xxx_elementary_yyy", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "your-project", "schema": "my_dataset_xxx_elementary_yyy", "fqn": ["elementary", "edr", "data_monitoring", "schema_changes", "previous_and_current_schemas", "current_schema_columns"], "unique_id": "model.elementary.current_schema_columns", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "edr/data_monitoring/schema_changes/previous_and_current_schemas/current_schema_columns.sql", "original_file_path": "models/edr/data_monitoring/schema_changes/previous_and_current_schemas/current_schema_columns.sql", "name": "current_schema_columns", "alias": "current_schema_columns", "checksum": {"name": "sha256", "checksum": "fa72f2bb56d2ab2e11d06e4e0902c54d504b99ab80b99c79b2b0aa806366f95b"}, "tags": [], "refs": [["schema_columns_snapshot"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "schema": "xxx_elementary_yyy"}, "created_at": 1663072921.62001}, "model.elementary.current_schema_tables": {"raw_sql": "{{\n  config(\n    materialized='ephemeral'\n  )\n}}\n\nwith tables_snapshot as (\n\n    select * from {{ ref('schema_tables_snapshot') }}\n),\n\nthis_run_time as (\n\n    select detected_at\n    from tables_snapshot\n    order by detected_at desc\n    limit 1\n\n),\n\ncurrent_schema as (\n\n    select\n        full_schema_name,\n        full_table_name,\n        is_new,\n        detected_at\n    from tables_snapshot\n    where detected_at = (select detected_at from this_run_time)\n\n)\n\nselect * from current_schema", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.elementary.schema_tables_snapshot"]}, "config": {"enabled": true, "alias": null, "schema": "xxx_elementary_yyy", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "your-project", "schema": "my_dataset_xxx_elementary_yyy", "fqn": ["elementary", "edr", "data_monitoring", "schema_changes", "previous_and_current_schemas", "current_schema_tables"], "unique_id": "model.elementary.current_schema_tables", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "edr/data_monitoring/schema_changes/previous_and_current_schemas/current_schema_tables.sql", "original_file_path": "models/edr/data_monitoring/schema_changes/previous_and_current_schemas/current_schema_tables.sql", "name": "current_schema_tables", "alias": "current_schema_tables", "checksum": {"name": "sha256", "checksum": "132b641349472f7b14938198d953e372e4f6eef46022cbd61bdbacfc0c315706"}, "tags": [], "refs": [["schema_tables_snapshot"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "schema": "xxx_elementary_yyy"}, "created_at": 1663072921.621356}, "model.elementary.previous_schema_columns": {"raw_sql": "{{\n  config(\n    materialized='ephemeral'\n  )\n}}\n\nwith columns_snapshot as (\n\n    select * from {{ ref('schema_columns_snapshot') }}\n),\n\nprevious_run_time as (\n\n    select detected_at\n    from columns_snapshot\n    group by detected_at\n    order by detected_at desc\n    limit 1 offset 1\n\n),\n\nprevious_schema as (\n\n    select\n        full_table_name,\n        column_name,\n        data_type,\n        is_new,\n        detected_at\n    from columns_snapshot\n    where detected_at = (select detected_at from previous_run_time)\n\n)\n\nselect * from previous_schema", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.elementary.schema_columns_snapshot"]}, "config": {"enabled": true, "alias": null, "schema": "xxx_elementary_yyy", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "your-project", "schema": "my_dataset_xxx_elementary_yyy", "fqn": ["elementary", "edr", "data_monitoring", "schema_changes", "previous_and_current_schemas", "previous_schema_columns"], "unique_id": "model.elementary.previous_schema_columns", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "edr/data_monitoring/schema_changes/previous_and_current_schemas/previous_schema_columns.sql", "original_file_path": "models/edr/data_monitoring/schema_changes/previous_and_current_schemas/previous_schema_columns.sql", "name": "previous_schema_columns", "alias": "previous_schema_columns", "checksum": {"name": "sha256", "checksum": "2e3985af06b8766a4a23eaea59b868ea679d8c16cc6894039ea456def8edbab7"}, "tags": [], "refs": [["schema_columns_snapshot"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "schema": "xxx_elementary_yyy"}, "created_at": 1663072921.622795}, "model.elementary.data_monitoring_metrics": {"raw_sql": "{{\n  config(\n    materialized='incremental',\n    unique_key = 'id'\n  )\n}}\n\n{{ elementary.empty_data_monitoring_metrics() }}", "resource_type": "model", "depends_on": {"macros": ["macro.elementary.empty_data_monitoring_metrics"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "xxx_elementary_yyy", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "your-project", "schema": "my_dataset_xxx_elementary_yyy", "fqn": ["elementary", "edr", "data_monitoring", "data_monitoring", "data_monitoring_metrics"], "unique_id": "model.elementary.data_monitoring_metrics", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "edr/data_monitoring/data_monitoring/data_monitoring_metrics.sql", "original_file_path": "models/edr/data_monitoring/data_monitoring/data_monitoring_metrics.sql", "name": "data_monitoring_metrics", "alias": "data_monitoring_metrics", "checksum": {"name": "sha256", "checksum": "c7e50c3563c75941f84fdbb5e5513f3fe3fe1d479eb87e04173323a21a251bc7"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "id", "schema": "xxx_elementary_yyy"}, "created_at": 1663072921.624226}, "model.elementary.filtered_information_schema_columns": {"raw_sql": "{{\n  config(\n    materialized = 'view'\n  )\n}}\n\n{% set configured_schemas = elementary.get_configured_schemas_from_graph() %}\n\nwith filtered_information_schema_columns as (\n\n    {%- if configured_schemas | length > 0 -%}\n        {%- set columns_from_info_schema_macro = context['elementary']['get_columns_from_information_schema'] %}\n        {{ elementary.run_query_macro_on_list(configured_schemas, columns_from_info_schema_macro) }}\n    {%- else %}\n        {{ elementary.empty_table([('full_table_name', 'string'), ('database_name', 'string'), ('schema_name', 'string'), ('table_name', 'string'), ('column_name', 'string'), ('data_type', 'string')]) }}\n    {%- endif %}\n\n)\n\nselect *\nfrom filtered_information_schema_columns\nwhere full_table_name is not null", "resource_type": "model", "depends_on": {"macros": ["macro.elementary.get_configured_schemas_from_graph", "macro.elementary.empty_table"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "xxx_elementary_yyy", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "your-project", "schema": "my_dataset_xxx_elementary_yyy", "fqn": ["elementary", "edr", "metadata_store", "filtered_information_schema_columns"], "unique_id": "model.elementary.filtered_information_schema_columns", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "edr/metadata_store/filtered_information_schema_columns.sql", "original_file_path": "models/edr/metadata_store/filtered_information_schema_columns.sql", "name": "filtered_information_schema_columns", "alias": "filtered_information_schema_columns", "checksum": {"name": "sha256", "checksum": "91ba3a1e02fe6fea913435246e8bcd1ecf134305af74fd879b845d4612d39f56"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "xxx_elementary_yyy"}, "created_at": 1663072921.6313002}, "model.elementary.filtered_information_schema_tables": {"raw_sql": "{{\n  config(\n    materialized = 'view'\n  )\n}}\n\n{% set configured_schemas = elementary.get_configured_schemas_from_graph() %}\n\nwith filtered_information_schema_tables as (\n\n    {%- if configured_schemas | length > 0 -%}\n        {%- set tables_from_info_schema_macro = context['elementary']['get_tables_from_information_schema'] -%}\n        {{ elementary.run_query_macro_on_list(configured_schemas, tables_from_info_schema_macro) }}\n    {%- else %}\n        {{ elementary.empty_table([('full_table_name', 'string'), ('full_schema_name', 'string'), ('database_name', 'string'), ('schema_name', 'string'), ('table_name', 'string')]) }}\n    {%- endif %}\n\n)\n\nselect *\nfrom filtered_information_schema_tables\nwhere schema_name is not null", "resource_type": "model", "depends_on": {"macros": ["macro.elementary.get_configured_schemas_from_graph", "macro.elementary.empty_table"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "xxx_elementary_yyy", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "your-project", "schema": "my_dataset_xxx_elementary_yyy", "fqn": ["elementary", "edr", "metadata_store", "filtered_information_schema_tables"], "unique_id": "model.elementary.filtered_information_schema_tables", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "edr/metadata_store/filtered_information_schema_tables.sql", "original_file_path": "models/edr/metadata_store/filtered_information_schema_tables.sql", "name": "filtered_information_schema_tables", "alias": "filtered_information_schema_tables", "checksum": {"name": "sha256", "checksum": "9ba8031705c87d884bc23ee474262cfc127975d5977107534a5e74305fdc6803"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "xxx_elementary_yyy"}, "created_at": 1663072921.6366878}, "operation.elementary.elementary-on-run-start-0": {"raw_sql": "{{ elementary.create_elementary_tests_schema() if flags.WHICH in ['test', 'build'] }}", "resource_type": "operation", "depends_on": {"macros": ["macro.elementary.create_elementary_tests_schema"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "xxx_elementary_yyy", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "your-project", "schema": "my_dataset_xxx_elementary_yyy", "fqn": ["elementary", "hooks", "elementary-on-run-start-0"], "unique_id": "operation.elementary.elementary-on-run-start-0", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "hooks/elementary-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "name": "elementary-on-run-start-0", "alias": "elementary-on-run-start-0", "checksum": {"name": "sha256", "checksum": "d7f9e078ba537b596f76d748a8ae055153f3e82df1f434c211a5bac6b6331c4b"}, "tags": ["on-run-start"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "xxx_elementary_yyy"}, "created_at": 1663072921.64495, "index": 0}, "operation.elementary.elementary-on-run-end-0": {"raw_sql": "{{ handle_test_results(results) if flags.WHICH in ['test', 'build'] }}", "resource_type": "operation", "depends_on": {"macros": ["macro.elementary.handle_test_results"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "xxx_elementary_yyy", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "your-project", "schema": "my_dataset_xxx_elementary_yyy", "fqn": ["elementary", "hooks", "elementary-on-run-end-0"], "unique_id": "operation.elementary.elementary-on-run-end-0", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "hooks/elementary-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "name": "elementary-on-run-end-0", "alias": "elementary-on-run-end-0", "checksum": {"name": "sha256", "checksum": "d7f9e078ba537b596f76d748a8ae055153f3e82df1f434c211a5bac6b6331c4b"}, "tags": ["on-run-end"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "xxx_elementary_yyy"}, "created_at": 1663072921.649515, "index": 0}, "test.jaffle_shop2.unique_stg_customers_customer_id.c7614daada": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.jaffle_shop2.stg_customers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "your-project", "schema": "my_dataset_dbt_test__audit", "fqn": ["jaffle_shop2", "staging", "unique_stg_customers_customer_id"], "unique_id": "test.jaffle_shop2.unique_stg_customers_customer_id.c7614daada", "package_name": "jaffle_shop2", "root_path": "/Users/yu/local/src/github/jaffle_shop", "path": "unique_stg_customers_customer_id.sql", "original_file_path": "models/staging/schema.yml", "name": "unique_stg_customers_customer_id", "alias": "unique_stg_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_customers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663072921.6675131, "column_name": "customer_id", "file_key_name": "models.stg_customers"}, "test.jaffle_shop2.not_null_stg_customers_customer_id.e2cfb1f9aa": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_customers')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.jaffle_shop2.stg_customers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "your-project", "schema": "my_dataset_dbt_test__audit", "fqn": ["jaffle_shop2", "staging", "not_null_stg_customers_customer_id"], "unique_id": "test.jaffle_shop2.not_null_stg_customers_customer_id.e2cfb1f9aa", "package_name": "jaffle_shop2", "root_path": "/Users/yu/local/src/github/jaffle_shop", "path": "not_null_stg_customers_customer_id.sql", "original_file_path": "models/staging/schema.yml", "name": "not_null_stg_customers_customer_id", "alias": "not_null_stg_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_customers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663072921.668622, "column_name": "customer_id", "file_key_name": "models.stg_customers"}, "test.jaffle_shop2.unique_stg_orders_order_id.e3b841c71a": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.jaffle_shop2.stg_orders"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "your-project", "schema": "my_dataset_dbt_test__audit", "fqn": ["jaffle_shop2", "staging", "unique_stg_orders_order_id"], "unique_id": "test.jaffle_shop2.unique_stg_orders_order_id.e3b841c71a", "package_name": "jaffle_shop2", "root_path": "/Users/yu/local/src/github/jaffle_shop", "path": "unique_stg_orders_order_id.sql", "original_file_path": "models/staging/schema.yml", "name": "unique_stg_orders_order_id", "alias": "unique_stg_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_orders"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663072921.669648, "column_name": "order_id", "file_key_name": "models.stg_orders"}, "test.jaffle_shop2.not_null_stg_orders_order_id.81cfe2fe64": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.jaffle_shop2.stg_orders"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "your-project", "schema": "my_dataset_dbt_test__audit", "fqn": ["jaffle_shop2", "staging", "not_null_stg_orders_order_id"], "unique_id": "test.jaffle_shop2.not_null_stg_orders_order_id.81cfe2fe64", "package_name": "jaffle_shop2", "root_path": "/Users/yu/local/src/github/jaffle_shop", "path": "not_null_stg_orders_order_id.sql", "original_file_path": "models/staging/schema.yml", "name": "not_null_stg_orders_order_id", "alias": "not_null_stg_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_orders"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663072921.670766, "column_name": "order_id", "file_key_name": "models.stg_orders"}, "test.jaffle_shop2.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58\") }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["placed", "shipped", "completed", "return_pending", "returned"], "column_name": "status", "model": "{{ get_where_subquery(ref('stg_orders')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.jaffle_shop2.stg_orders"]}, "config": {"enabled": true, "alias": "accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "your-project", "schema": "my_dataset_dbt_test__audit", "fqn": ["jaffle_shop2", "staging", "accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned"], "unique_id": "test.jaffle_shop2.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad", "package_name": "jaffle_shop2", "root_path": "/Users/yu/local/src/github/jaffle_shop", "path": "accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58.sql", "original_file_path": "models/staging/schema.yml", "name": "accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned", "alias": "accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_orders"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_stg_orders_4f514bf94b77b7ea437830eec4421c58"}, "created_at": 1663072921.6717818, "column_name": "status", "file_key_name": "models.stg_orders"}, "test.jaffle_shop2.unique_stg_payments_payment_id.3744510712": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "payment_id", "model": "{{ get_where_subquery(ref('stg_payments')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.jaffle_shop2.stg_payments"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "your-project", "schema": "my_dataset_dbt_test__audit", "fqn": ["jaffle_shop2", "staging", "unique_stg_payments_payment_id"], "unique_id": "test.jaffle_shop2.unique_stg_payments_payment_id.3744510712", "package_name": "jaffle_shop2", "root_path": "/Users/yu/local/src/github/jaffle_shop", "path": "unique_stg_payments_payment_id.sql", "original_file_path": "models/staging/schema.yml", "name": "unique_stg_payments_payment_id", "alias": "unique_stg_payments_payment_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_payments"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663072921.6783712, "column_name": "payment_id", "file_key_name": "models.stg_payments"}, "test.jaffle_shop2.not_null_stg_payments_payment_id.c19cc50075": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_id", "model": "{{ get_where_subquery(ref('stg_payments')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.jaffle_shop2.stg_payments"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "your-project", "schema": "my_dataset_dbt_test__audit", "fqn": ["jaffle_shop2", "staging", "not_null_stg_payments_payment_id"], "unique_id": "test.jaffle_shop2.not_null_stg_payments_payment_id.c19cc50075", "package_name": "jaffle_shop2", "root_path": "/Users/yu/local/src/github/jaffle_shop", "path": "not_null_stg_payments_payment_id.sql", "original_file_path": "models/staging/schema.yml", "name": "not_null_stg_payments_payment_id", "alias": "not_null_stg_payments_payment_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_payments"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663072921.6793861, "column_name": "payment_id", "file_key_name": "models.stg_payments"}, "test.jaffle_shop2.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef\") }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["credit_card", "coupon", "bank_transfer", "gift_card"], "column_name": "payment_method", "model": "{{ get_where_subquery(ref('stg_payments')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.jaffle_shop2.stg_payments"]}, "config": {"enabled": true, "alias": "accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "your-project", "schema": "my_dataset_dbt_test__audit", "fqn": ["jaffle_shop2", "staging", "accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card"], "unique_id": "test.jaffle_shop2.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278", "package_name": "jaffle_shop2", "root_path": "/Users/yu/local/src/github/jaffle_shop", "path": "accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef.sql", "original_file_path": "models/staging/schema.yml", "name": "accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card", "alias": "accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_payments"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_stg_payments_c7909fb19b1f0177c2bf99c7912f06ef"}, "created_at": 1663072921.680546, "column_name": "payment_method", "file_key_name": "models.stg_payments"}, "test.jaffle_shop2.unique_dim_customers_customer_id.15c9f1e2fd": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('dim_customers')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.jaffle_shop2.dim_customers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "your-project", "schema": "my_dataset_dbt_test__audit", "fqn": ["jaffle_shop2", "marts", "core", "unique_dim_customers_customer_id"], "unique_id": "test.jaffle_shop2.unique_dim_customers_customer_id.15c9f1e2fd", "package_name": "jaffle_shop2", "root_path": "/Users/yu/local/src/github/jaffle_shop", "path": "unique_dim_customers_customer_id.sql", "original_file_path": "models/marts/core/schema.yml", "name": "unique_dim_customers_customer_id", "alias": "unique_dim_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_customers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663072921.6863098, "column_name": "customer_id", "file_key_name": "models.dim_customers"}, "test.jaffle_shop2.not_null_dim_customers_customer_id.dd91cd1c8d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('dim_customers')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.jaffle_shop2.dim_customers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "your-project", "schema": "my_dataset_dbt_test__audit", "fqn": ["jaffle_shop2", "marts", "core", "not_null_dim_customers_customer_id"], "unique_id": "test.jaffle_shop2.not_null_dim_customers_customer_id.dd91cd1c8d", "package_name": "jaffle_shop2", "root_path": "/Users/yu/local/src/github/jaffle_shop", "path": "not_null_dim_customers_customer_id.sql", "original_file_path": "models/marts/core/schema.yml", "name": "not_null_dim_customers_customer_id", "alias": "not_null_dim_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_customers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663072921.6873522, "column_name": "customer_id", "file_key_name": "models.dim_customers"}, "test.jaffle_shop2.unique_fct_orders_order_id.523ddb6ce5": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.jaffle_shop2.fct_orders"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "your-project", "schema": "my_dataset_dbt_test__audit", "fqn": ["jaffle_shop2", "marts", "core", "unique_fct_orders_order_id"], "unique_id": "test.jaffle_shop2.unique_fct_orders_order_id.523ddb6ce5", "package_name": "jaffle_shop2", "root_path": "/Users/yu/local/src/github/jaffle_shop", "path": "unique_fct_orders_order_id.sql", "original_file_path": "models/marts/core/schema.yml", "name": "unique_fct_orders_order_id", "alias": "unique_fct_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_orders"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663072921.688355, "column_name": "order_id", "file_key_name": "models.fct_orders"}, "test.jaffle_shop2.not_null_fct_orders_order_id.4e687af8d0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.jaffle_shop2.fct_orders"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "your-project", "schema": "my_dataset_dbt_test__audit", "fqn": ["jaffle_shop2", "marts", "core", "not_null_fct_orders_order_id"], "unique_id": "test.jaffle_shop2.not_null_fct_orders_order_id.4e687af8d0", "package_name": "jaffle_shop2", "root_path": "/Users/yu/local/src/github/jaffle_shop", "path": "not_null_fct_orders_order_id.sql", "original_file_path": "models/marts/core/schema.yml", "name": "not_null_fct_orders_order_id", "alias": "not_null_fct_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_orders"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663072921.6894872, "column_name": "order_id", "file_key_name": "models.fct_orders"}, "test.jaffle_shop2.not_null_fct_orders_customer_id.16fe324f7b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.jaffle_shop2.fct_orders"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "your-project", "schema": "my_dataset_dbt_test__audit", "fqn": ["jaffle_shop2", "marts", "core", "not_null_fct_orders_customer_id"], "unique_id": "test.jaffle_shop2.not_null_fct_orders_customer_id.16fe324f7b", "package_name": "jaffle_shop2", "root_path": "/Users/yu/local/src/github/jaffle_shop", "path": "not_null_fct_orders_customer_id.sql", "original_file_path": "models/marts/core/schema.yml", "name": "not_null_fct_orders_customer_id", "alias": "not_null_fct_orders_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_orders"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663072921.69047, "column_name": "customer_id", "file_key_name": "models.fct_orders"}, "test.jaffle_shop2.relationships_fct_orders_customer_id__customer_id__ref_dim_customers_.d5636051d4": {"raw_sql": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_orders_0c6c6d9e6f30dfb9b653557ebf38e47c\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_customers')", "field": "customer_id", "column_name": "customer_id", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.jaffle_shop2.dim_customers", "model.jaffle_shop2.fct_orders"]}, "config": {"enabled": true, "alias": "relationships_fct_orders_0c6c6d9e6f30dfb9b653557ebf38e47c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "your-project", "schema": "my_dataset_dbt_test__audit", "fqn": ["jaffle_shop2", "marts", "core", "relationships_fct_orders_customer_id__customer_id__ref_dim_customers_"], "unique_id": "test.jaffle_shop2.relationships_fct_orders_customer_id__customer_id__ref_dim_customers_.d5636051d4", "package_name": "jaffle_shop2", "root_path": "/Users/yu/local/src/github/jaffle_shop", "path": "relationships_fct_orders_0c6c6d9e6f30dfb9b653557ebf38e47c.sql", "original_file_path": "models/marts/core/schema.yml", "name": "relationships_fct_orders_customer_id__customer_id__ref_dim_customers_", "alias": "relationships_fct_orders_0c6c6d9e6f30dfb9b653557ebf38e47c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_customers"], ["fct_orders"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fct_orders_0c6c6d9e6f30dfb9b653557ebf38e47c"}, "created_at": 1663072921.691456, "column_name": "customer_id", "file_key_name": "models.fct_orders"}, "test.jaffle_shop2.accepted_values_fct_orders_status__placed__shipped__completed__return_pending__returned.0aa0973768": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_fct_orders_910d5f3356b5e7a6f7932211f0768f81\") }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["placed", "shipped", "completed", "return_pending", "returned"], "column_name": "status", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.jaffle_shop2.fct_orders"]}, "config": {"enabled": true, "alias": "accepted_values_fct_orders_910d5f3356b5e7a6f7932211f0768f81", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "your-project", "schema": "my_dataset_dbt_test__audit", "fqn": ["jaffle_shop2", "marts", "core", "accepted_values_fct_orders_status__placed__shipped__completed__return_pending__returned"], "unique_id": "test.jaffle_shop2.accepted_values_fct_orders_status__placed__shipped__completed__return_pending__returned.0aa0973768", "package_name": "jaffle_shop2", "root_path": "/Users/yu/local/src/github/jaffle_shop", "path": "accepted_values_fct_orders_910d5f3356b5e7a6f7932211f0768f81.sql", "original_file_path": "models/marts/core/schema.yml", "name": "accepted_values_fct_orders_status__placed__shipped__completed__return_pending__returned", "alias": "accepted_values_fct_orders_910d5f3356b5e7a6f7932211f0768f81", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_orders"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_fct_orders_910d5f3356b5e7a6f7932211f0768f81"}, "created_at": 1663072921.695484, "column_name": "status", "file_key_name": "models.fct_orders"}, "test.jaffle_shop2.not_null_fct_orders_amount.66810a8d08": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "amount", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.jaffle_shop2.fct_orders"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "your-project", "schema": "my_dataset_dbt_test__audit", "fqn": ["jaffle_shop2", "marts", "core", "not_null_fct_orders_amount"], "unique_id": "test.jaffle_shop2.not_null_fct_orders_amount.66810a8d08", "package_name": "jaffle_shop2", "root_path": "/Users/yu/local/src/github/jaffle_shop", "path": "not_null_fct_orders_amount.sql", "original_file_path": "models/marts/core/schema.yml", "name": "not_null_fct_orders_amount", "alias": "not_null_fct_orders_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_orders"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663072921.698452, "column_name": "amount", "file_key_name": "models.fct_orders"}, "test.jaffle_shop2.not_null_fct_orders_credit_card_amount.56131cba63": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "credit_card_amount", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.jaffle_shop2.fct_orders"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "your-project", "schema": "my_dataset_dbt_test__audit", "fqn": ["jaffle_shop2", "marts", "core", "not_null_fct_orders_credit_card_amount"], "unique_id": "test.jaffle_shop2.not_null_fct_orders_credit_card_amount.56131cba63", "package_name": "jaffle_shop2", "root_path": "/Users/yu/local/src/github/jaffle_shop", "path": "not_null_fct_orders_credit_card_amount.sql", "original_file_path": "models/marts/core/schema.yml", "name": "not_null_fct_orders_credit_card_amount", "alias": "not_null_fct_orders_credit_card_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_orders"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663072921.699615, "column_name": "credit_card_amount", "file_key_name": "models.fct_orders"}, "test.jaffle_shop2.not_null_fct_orders_coupon_amount.8a700a9568": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "coupon_amount", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.jaffle_shop2.fct_orders"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "your-project", "schema": "my_dataset_dbt_test__audit", "fqn": ["jaffle_shop2", "marts", "core", "not_null_fct_orders_coupon_amount"], "unique_id": "test.jaffle_shop2.not_null_fct_orders_coupon_amount.8a700a9568", "package_name": "jaffle_shop2", "root_path": "/Users/yu/local/src/github/jaffle_shop", "path": "not_null_fct_orders_coupon_amount.sql", "original_file_path": "models/marts/core/schema.yml", "name": "not_null_fct_orders_coupon_amount", "alias": "not_null_fct_orders_coupon_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_orders"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663072921.7006102, "column_name": "coupon_amount", "file_key_name": "models.fct_orders"}, "test.jaffle_shop2.not_null_fct_orders_bank_transfer_amount.d808dd4fab": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "bank_transfer_amount", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.jaffle_shop2.fct_orders"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "your-project", "schema": "my_dataset_dbt_test__audit", "fqn": ["jaffle_shop2", "marts", "core", "not_null_fct_orders_bank_transfer_amount"], "unique_id": "test.jaffle_shop2.not_null_fct_orders_bank_transfer_amount.d808dd4fab", "package_name": "jaffle_shop2", "root_path": "/Users/yu/local/src/github/jaffle_shop", "path": "not_null_fct_orders_bank_transfer_amount.sql", "original_file_path": "models/marts/core/schema.yml", "name": "not_null_fct_orders_bank_transfer_amount", "alias": "not_null_fct_orders_bank_transfer_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_orders"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663072921.701601, "column_name": "bank_transfer_amount", "file_key_name": "models.fct_orders"}, "test.jaffle_shop2.not_null_fct_orders_gift_card_amount.ec93756487": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "gift_card_amount", "model": "{{ get_where_subquery(ref('fct_orders')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.jaffle_shop2.fct_orders"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "your-project", "schema": "my_dataset_dbt_test__audit", "fqn": ["jaffle_shop2", "marts", "core", "not_null_fct_orders_gift_card_amount"], "unique_id": "test.jaffle_shop2.not_null_fct_orders_gift_card_amount.ec93756487", "package_name": "jaffle_shop2", "root_path": "/Users/yu/local/src/github/jaffle_shop", "path": "not_null_fct_orders_gift_card_amount.sql", "original_file_path": "models/marts/core/schema.yml", "name": "not_null_fct_orders_gift_card_amount", "alias": "not_null_fct_orders_gift_card_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_orders"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663072921.702585, "column_name": "gift_card_amount", "file_key_name": "models.fct_orders"}}, "sources": {}, "macros": {"macro.dbt_bigquery.date_sharded_table": {"unique_id": "macro.dbt_bigquery.date_sharded_table", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.595838}, "macro.dbt_bigquery.grant_access_to": {"unique_id": "macro.dbt_bigquery.grant_access_to", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.596051}, "macro.dbt_bigquery.get_partitions_metadata": {"unique_id": "macro.dbt_bigquery.get_partitions_metadata", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.5963058}, "macro.dbt_bigquery.bigquery__get_catalog": {"unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.5994189}, "macro.dbt_bigquery.partition_by": {"unique_id": "macro.dbt_bigquery.partition_by", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.604568}, "macro.dbt_bigquery.cluster_by": {"unique_id": "macro.dbt_bigquery.cluster_by", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.604925}, "macro.dbt_bigquery.bigquery_options": {"unique_id": "macro.dbt_bigquery.bigquery_options", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.605244}, "macro.dbt_bigquery.bigquery_table_options": {"unique_id": "macro.dbt_bigquery.bigquery_table_options", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.605485}, "macro.dbt_bigquery.bigquery__create_table_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, sql) -%}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace table {{ relation }}\n  {{ partition_by(partition_config) }}\n  {{ cluster_by(raw_cluster_by) }}\n  {{ bigquery_table_options(config, model, temporary) }}\n  as (\n    {{ sql }}\n  );\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.606061}, "macro.dbt_bigquery.bigquery_view_options": {"unique_id": "macro.dbt_bigquery.bigquery_view_options", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.606325}, "macro.dbt_bigquery.bigquery__create_view_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  as {{ sql }};\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.606613}, "macro.dbt_bigquery.bigquery__create_schema": {"unique_id": "macro.dbt_bigquery.bigquery__create_schema", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_schema", "macro_sql": "{% macro bigquery__create_schema(relation) -%}\n  {{ adapter.create_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.606729}, "macro.dbt_bigquery.bigquery__drop_schema": {"unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.606838}, "macro.dbt_bigquery.bigquery__drop_relation": {"unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.607015}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.607154}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.607281}, "macro.dbt_bigquery.bigquery__current_timestamp": {"unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  CURRENT_TIMESTAMP()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.6073432}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.6074948}, "macro.dbt_bigquery.bigquery__list_schemas": {"unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.6076338}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.607796}, "macro.dbt_bigquery.bigquery__persist_docs": {"unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.6080482}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.608188}, "macro.dbt_bigquery.bigquery__rename_relation": {"unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.608323}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.608674}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.60902}, "macro.dbt_bigquery.bigquery__alter_column_type": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.609931}, "macro.dbt_bigquery.bigquery__test_unique": {"unique_id": "macro.dbt_bigquery.bigquery__test_unique", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.610079}, "macro.dbt_bigquery.bigquery__upload_file": {"unique_id": "macro.dbt_bigquery.bigquery__upload_file", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.6103308}, "macro.dbt_bigquery.bigquery__create_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.610698}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.610837}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.6114151}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.61201}, "macro.dbt_bigquery.materialization_view_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.612606}, "macro.dbt_bigquery.materialization_table_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery' -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n  {% call statement('main') -%}\n    {{ create_table_as(False, target_relation, sql) }}\n  {% endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.614526}, "macro.dbt_bigquery.materialization_copy_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "name": "materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.615691}, "macro.dbt_bigquery.declare_dbt_max_partition": {"unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, sql) %}\n\n  {% if '_dbt_max_partition' in sql %}\n\n    declare _dbt_max_partition {{ partition_by.data_type }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.617583}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.617981}, "macro.dbt_bigquery.bq_insert_overwrite": {"unique_id": "macro.dbt_bigquery.bq_insert_overwrite", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_insert_overwrite", "macro_sql": "{% macro bq_insert_overwrite(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n\n  {% if partitions is not none and partitions != [] %} {# static #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {{sql}}\n        )\n      {%- endset -%}\n\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=true) }}\n\n  {% else %} {# dynamic #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n        {{ declare_dbt_max_partition(this, partition_by, sql) }}\n\n        -- 1. create a temp table\n        {{ create_table_as(True, tmp_relation, sql) }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              array_agg(distinct {{ partition_by.render() }})\n          from {{ tmp_relation }}\n      );\n\n      {#\n        TODO: include_sql_header is a hack; consider a better approach that includes\n              the sql_header at the materialization-level instead\n      #}\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=false) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.619091}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n    {%- endset %}\n    {% if partition_by is none %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n    {%- set source_sql -%}\n      {%- if tmp_relation_exists -%}\n        (\n          select * from {{ tmp_relation }}\n        )\n      {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n          {{sql}}\n        )\n      {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.61993}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery' -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% else %}\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' %} {# Check first, since otherwise we may not build a temp table #}\n      {% do run_query(\n        declare_dbt_max_partition(this, partition_by, sql) + create_table_as(True, tmp_relation, sql)\n      ) %}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n    ) %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {% endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.622417}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.622862}, "macro.dbt_bigquery.bigquery__create_columns": {"unique_id": "macro.dbt_bigquery.bigquery__create_columns", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.623004}, "macro.dbt_bigquery.bigquery__post_snapshot": {"unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.6231208}, "macro.dbt_bigquery.bigquery__except": {"unique_id": "macro.dbt_bigquery.bigquery__except", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.623295}, "macro.dbt_bigquery.bigquery__dateadd": {"unique_id": "macro.dbt_bigquery.bigquery__dateadd", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.623577}, "macro.dbt_bigquery.bigquery__intersect": {"unique_id": "macro.dbt_bigquery.bigquery__intersect", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.623745}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.6239932}, "macro.dbt_bigquery.bigquery__right": {"unique_id": "macro.dbt_bigquery.bigquery__right", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.624275}, "macro.dbt_bigquery.bigquery__listagg": {"unique_id": "macro.dbt_bigquery.bigquery__listagg", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.624696}, "macro.dbt_bigquery.bigquery__datediff": {"unique_id": "macro.dbt_bigquery.bigquery__datediff", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.6252108}, "macro.dbt_bigquery.bigquery__safe_cast": {"unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.625439}, "macro.dbt_bigquery.bigquery__hash": {"unique_id": "macro.dbt_bigquery.bigquery__hash", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.625668}, "macro.dbt_bigquery.bigquery__position": {"unique_id": "macro.dbt_bigquery.bigquery__position", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.625921}, "macro.dbt_bigquery.bigquery__bool_or": {"unique_id": "macro.dbt_bigquery.bigquery__bool_or", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.626121}, "macro.dbt_bigquery.bigquery__split_part": {"unique_id": "macro.dbt_bigquery.bigquery__split_part", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.6266959}, "macro.dbt_bigquery.bigquery__date_trunc": {"unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.626933}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.62762}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.6279}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.628117}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.629172}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.62935}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.629477}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.629605}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.6297338}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.630141}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.6304069}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.630677}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.631146}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.631387}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.634537}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.634688}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.634881}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.6350038}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.635086}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.635794}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.635942}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.6360939}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_sql'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.637324}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.638516}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.642}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.642252}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.642402}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.642475}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.6426182}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.642717}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.642905}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.643754}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.643944}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.6441789}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.644581}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.6500459}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.6519911}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.652504}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.6527832}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.653197}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.653545}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.654342}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.654838}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.65539}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.660031}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.661494}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.661727}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n        {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.662396}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.66264}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.663203}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.663884}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, temp_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.667966}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.672174}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.673271}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.674346}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.674987}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.6775181}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.678229}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.678435}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.678633}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.679034}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.681613}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.68198}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.682185}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.6836538}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.684073}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.684217}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.684383}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.684615}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.687933}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.6923032}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.693129}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.6933482}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.693776}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.6939461}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.6940632}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.694203}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.694308}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.6944482}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.694548}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.694978}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.695145}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.696307}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.696747}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.696958}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.69751}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.697744}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.697998}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.6984372}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.6986601}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.6990569}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.699401}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.699699}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.700274}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.701359}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.701876}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.702139}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.703795}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.704936}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.705624}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.705835}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.706123}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.70619}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7065651}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.706711}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.70701}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.707119}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7074199}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7075121}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.707894}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.70804}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.708319}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.708385}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7086961}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.708819}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.709165}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.709292}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.709909}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7103329}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.710708}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.710851}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.711203}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.711326}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.711638}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.711784}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.712084}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.712224}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.712526}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.712619}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.712951}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7130728}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.713366}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.713459}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.714304}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7144399}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.714585}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7147179}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.714922}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.715054}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.715195}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.715351}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.715491}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.715626}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.71577}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7158961}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.716206}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7162938}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7166731}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.elementary.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.716913}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.717043}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.717584}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.71773}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.717931}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.718258}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.718378}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7187982}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7189682}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.719315}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.719479}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.719969}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.720097}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.72024}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.720621}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7237802}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7239401}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7241468}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.724423}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7246552}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7249439}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.725109}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7253098}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.725478}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.725625}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7258308}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.726094}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.726401}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.726924}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.727139}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.727273}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7274501}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7280068}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.728139}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.728344}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.728726}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.730315}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.730417}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.730567}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7306619}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.730967}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7311301}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7312179}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7314172}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.731584}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.731785}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.731953}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.732217}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7328289}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7329988}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7332108}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.733419}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7344341}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7351308}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.735281}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.735466}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.735614}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.735863}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.736295}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7376661}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7379}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7380679}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7382112}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.738369}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.73858}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7387571}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7390249}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.739257}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.739403}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.740957}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7410948}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.741374}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.741535}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.741836}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.742038}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7425768}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.74281}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.743513}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.744069}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.744276}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.744548}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.744788}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7450938}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.745161}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.745229}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7456}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.745752}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.746051}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7462242}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.746942}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.747005}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.747069}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.747127}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7471879}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.747335}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7474}, "macro.dbt_utils.postgres__type_timestamp": {"unique_id": "macro.dbt_utils.postgres__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() %}\n    timestamp without time zone\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.747463}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.747522}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.747663}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7477272}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7477849}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.747925}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7479858}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7480488}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.748189}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.748249}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.74831}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.748505}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.748571}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.748632}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.749107}, "macro.dbt_utils.cast_array_to_string": {"unique_id": "macro.dbt_utils.cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "cast_array_to_string", "macro_sql": "{% macro cast_array_to_string(array) %}\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__cast_array_to_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.749548}, "macro.dbt_utils.default__cast_array_to_string": {"unique_id": "macro.dbt_utils.default__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "default__cast_array_to_string", "macro_sql": "{% macro default__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.749673}, "macro.dbt_utils.postgres__cast_array_to_string": {"unique_id": "macro.dbt_utils.postgres__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "postgres__cast_array_to_string", "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ dbt_utils.type_string() }}){%- endset -%}\n    {{ dbt_utils.replace(dbt_utils.replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.749941}, "macro.dbt_utils.redshift__cast_array_to_string": {"unique_id": "macro.dbt_utils.redshift__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "redshift__cast_array_to_string", "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7500658}, "macro.dbt_utils.bigquery__cast_array_to_string": {"unique_id": "macro.dbt_utils.bigquery__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "bigquery__cast_array_to_string", "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.750158}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7505012}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7505972}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7506828}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7512589}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7514071}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.751552}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.751688}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.751859}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.752161}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.752226}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.752293}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.75267}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7528582}, "macro.dbt_utils.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_utils.snowflake__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.752984}, "macro.dbt_utils.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_utils.bigquery__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7531059}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.753658}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.753779}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.753918}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7540538}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.756157}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.75651}, "macro.dbt_utils.bigquery__listagg": {"unique_id": "macro.dbt_utils.bigquery__listagg", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.756757}, "macro.dbt_utils.postgres__listagg": {"unique_id": "macro.dbt_utils.postgres__listagg", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    \n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.757107}, "macro.dbt_utils.redshift__listagg": {"unique_id": "macro.dbt_utils.redshift__listagg", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}  \n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7579598}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.760394}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7605581}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7606988}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.762298}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7624772}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.76288}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.763006}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.763121}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7632298}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7635672}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.763687}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.763798}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.764145}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.764267}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.764374}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.764862}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7649548}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.765045}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7653792}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    \n    any_value({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.76547}, "macro.dbt_utils.postgres__any_value": {"unique_id": "macro.dbt_utils.postgres__any_value", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n    {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\n    min({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7655602}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7659671}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.766091}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.766216}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.766571}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.766662}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7672331}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.767333}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7673962}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.767456}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.767594}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.76769}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7678158}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.767909}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.76802}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7693791}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.769793}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7702012}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.770367}, "macro.dbt_utils.array_concat": {"unique_id": "macro.dbt_utils.array_concat", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.770777}, "macro.dbt_utils.default__array_concat": {"unique_id": "macro.dbt_utils.default__array_concat", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.770895}, "macro.dbt_utils.bigquery__array_concat": {"unique_id": "macro.dbt_utils.bigquery__array_concat", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.771007}, "macro.dbt_utils.redshift__array_concat": {"unique_id": "macro.dbt_utils.redshift__array_concat", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.771116}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7714849}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    \n    bool_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.771635}, "macro.dbt_utils.snowflake__bool_or": {"unique_id": "macro.dbt_utils.snowflake__bool_or", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n    \n    boolor_agg({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.771723}, "macro.dbt_utils.bigquery__bool_or": {"unique_id": "macro.dbt_utils.bigquery__bool_or", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n    \n    logical_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.771808}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.772379}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7726169}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.772748}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7730958}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.773254}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.774637}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.774782}, "macro.dbt_utils._split_part_negative": {"unique_id": "macro.dbt_utils._split_part_negative", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.774979}, "macro.dbt_utils.postgres__split_part": {"unique_id": "macro.dbt_utils.postgres__split_part", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.775276}, "macro.dbt_utils.redshift__split_part": {"unique_id": "macro.dbt_utils.redshift__split_part", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "redshift__split_part", "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.775581}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.775915}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.776295}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7764108}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.776528}, "macro.dbt_utils.array_construct": {"unique_id": "macro.dbt_utils.array_construct", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.777055}, "macro.dbt_utils.default__array_construct": {"unique_id": "macro.dbt_utils.default__array_construct", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.777285}, "macro.dbt_utils.snowflake__array_construct": {"unique_id": "macro.dbt_utils.snowflake__array_construct", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.777468}, "macro.dbt_utils.redshift__array_construct": {"unique_id": "macro.dbt_utils.redshift__array_construct", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.777589}, "macro.dbt_utils.bigquery__array_construct": {"unique_id": "macro.dbt_utils.bigquery__array_construct", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.777725}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.778548}, "macro.dbt_utils.array_append": {"unique_id": "macro.dbt_utils.array_append", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7789571}, "macro.dbt_utils.default__array_append": {"unique_id": "macro.dbt_utils.default__array_append", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.779074}, "macro.dbt_utils.bigquery__array_append": {"unique_id": "macro.dbt_utils.bigquery__array_append", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7792451}, "macro.dbt_utils.redshift__array_append": {"unique_id": "macro.dbt_utils.redshift__array_append", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.779409}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7846851}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.785141}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.785429}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.785863}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7906828}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7911198}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7915468}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.792052}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7926452}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.793}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.793283}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.793838}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.794037}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.794483}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7947452}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.79542}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.795721}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.796155}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.796444}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7968042}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.796958}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7975738}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.798063}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7986372}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7989812}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.7994182}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.799566}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.799928}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.800085}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.800708}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.8012831}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.801864}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.802164}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.802649}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.802912}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.803373}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.803839}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.804501}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.80511}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.805554}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.805701}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.806444}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.8072371}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.810137}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.8115041}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.811828}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.811975}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.812292}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.8124669}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.812774}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.812932}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.8134432}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.814144}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.814688}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.8148968}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.815219}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.815574}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.8159418}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.8166149}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.817379}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.8181891}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.818573}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.818742}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.819197}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.8198621}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.8206348}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.821075}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.821331}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.8220181}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {% endif %}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.822902}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.824529}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.826402}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.828786}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.831498}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.831846}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.832067}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.834336}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.834532}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.834709}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.834879}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.835022}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.8351731}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.835768}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.836608}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.837028}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.837276}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.837653}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.8379462}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.8393579}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.839602}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.8403032}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.8407612}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.84181}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.843176}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.844209}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.84497}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.845464}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.846118}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.846538}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.847071}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.847552}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.847628}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.847703}, "macro.dbt_utils.bigquery__get_table_types_sql": {"unique_id": "macro.dbt_utils.bigquery__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "bigquery__get_table_types_sql", "macro_sql": "{% macro bigquery__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as `table_type`\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.8477728}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.848798}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.849051}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.849584}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.850374}, "macro.elementary.test_all_columns_anomalies": {"unique_id": "macro.elementary.test_all_columns_anomalies", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/tests/test_all_columns_anomalies.sql", "original_file_path": "macros/edr/tests/test_all_columns_anomalies.sql", "name": "test_all_columns_anomalies", "macro_sql": "{% test all_columns_anomalies(model, column_anomalies = none, exclude_prefix = none, exclude_regexp = none, timestamp_column = none, sensitivity = none, backfill_days=none) %}\n    -- depends_on: {{ ref('monitors_runs') }}\n    -- depends_on: {{ ref('data_monitoring_metrics') }}\n    -- depends_on: {{ ref('alerts_data_monitoring') }}\n    -- depends_on: {{ ref('metrics_anomaly_score') }}\n    {%- if execute and flags.WHICH in ['test', 'build'] %}\n        {%- set test_name_in_graph = elementary.get_test_name_in_graph() %}\n        {{- elementary.debug_log('collecting metrics for test: ' ~ test_name_in_graph) }}\n        {#- creates temp relation for test metrics -#}\n        {%- set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n        {%- set schema_name = schema_name ~ '__tests' %}\n        {%- set temp_metrics_table_name = elementary.table_name_with_suffix(test_name_in_graph, '__metrics') %}\n        {{- elementary.debug_log('metrics table: ' ~ database_name ~ '.' ~ schema_name ~ '.' ~ temp_metrics_table_name) }}\n        {%- set temp_table_exists, temp_table_relation = dbt.get_or_create_relation(database=database_name,\n                                                                                   schema=schema_name,\n                                                                                   identifier=temp_metrics_table_name,\n                                                                                   type='table') -%}\n\n        {#- get all columns configuration -#}\n        {%- set full_table_name = elementary.relation_to_full_name(model) %}\n        {%- set model_relation = dbt.load_relation(model) %}\n        {%- if not model_relation %}\n            {{- elementary.test_log('monitored_table_not_found', full_table_name) }}\n            {{- return(elementary.no_results_query()) }}\n        {%- endif %}\n\n        {% set model_graph_node = elementary.get_model_graph_node(model_relation) %}\n        {% set timestamp_column = elementary.get_timestamp_column(timestamp_column, model_graph_node) %}\n\n        {%- set timestamp_column_data_type = elementary.find_normalized_data_type_for_column(model, timestamp_column) %}\n        {{ elementary.debug_log('timestamp_column - ' ~ timestamp_column) }}\n        {{ elementary.debug_log('timestamp_column_data_type - ' ~ timestamp_column_data_type) }}\n        {%- set is_timestamp = elementary.get_is_column_timestamp(model_relation, timestamp_column, timestamp_column_data_type) %}\n        {{- elementary.debug_log('is_timestamp - ' ~ is_timestamp) }}\n\n        {%- set column_objs_and_monitors = elementary.get_all_column_obj_and_monitors(model_relation, column_anomalies) -%}\n        {% set backfill_days = elementary.get_test_argument(argument_name='backfill_days', value=backfill_days) %}\n        {#- execute table monitors and write to temp test table -#}\n        {%- set monitors = [] %}\n        {%- if column_objs_and_monitors | length > 0 %}\n            {{- elementary.test_log('start', full_table_name, 'all columns') }}\n            {%- set empty_table_query = elementary.empty_data_monitoring_metrics() %}\n            {%- do elementary.create_or_replace(False, temp_table_relation, empty_table_query) %}\n            {%- for column_obj_and_monitors in column_objs_and_monitors %}\n                {%- set column_obj = column_obj_and_monitors['column'] %}\n                {%- set column_monitors = column_obj_and_monitors['monitors'] %}\n                {%- set column_name = column_obj.name -%}\n                {%- set ignore_column = elementary.should_ignore_column(column_name, exclude_regexp, exclude_prefix) -%}\n                {%- if not ignore_column -%}\n                    {%- do monitors.extend(column_monitors) -%}\n                    {%- set min_bucket_start = \"'\" ~ elementary.get_min_bucket_start(full_table_name, backfill_days, column_monitors, column_name) ~ \"'\" %}\n                    {{ elementary.debug_log('min_bucket_start - ' ~ min_bucket_start) }}\n                    {{ elementary.test_log('start', full_table_name, column_name) }}\n                    {%- set column_monitoring_query = elementary.column_monitoring_query(model_relation, timestamp_column, is_timestamp, min_bucket_start, column_obj, column_monitors) %}\n                    {%- do run_query(elementary.insert_as_select(temp_table_relation, column_monitoring_query)) -%}\n                {%- else -%}\n                    {{ elementary.debug_log('column ' ~ column_name ~ ' is excluded') }}\n                {%- endif -%}\n            {%- endfor %}\n        {%- endif %}\n        {%- set all_columns_monitors = monitors | unique | list %}\n        {#- query if there is an anomaly in recent metrics -#}\n        {%- set sensitivity = elementary.get_test_argument(argument_name='anomaly_sensitivity', value=sensitivity) %}\n        {%- set anomaly_scores_query = elementary.get_anomaly_scores_query(temp_table_relation, full_table_name, sensitivity, backfill_days, all_columns_monitors, columns_only=true) %}\n        {%- set anomaly_scores_test_table_name = elementary.table_name_with_suffix(test_name_in_graph, '__anomaly_scores') %}\n        {{- elementary.debug_log('anomalies table: ' ~ database_name ~ '.' ~ schema_name ~ '.' ~ anomaly_scores_test_table_name) }}\n        {%- set anomaly_scores_test_table_exists, anomaly_scores_test_table_relation = dbt.get_or_create_relation(database=database_name,\n                                                                                   schema=schema_name,\n                                                                                   identifier=anomaly_scores_test_table_name,\n                                                                                   type='table') -%}\n        {%- do elementary.create_or_replace(False, anomaly_scores_test_table_relation, anomaly_scores_query) %}\n\n        {{- elementary.test_log('end', full_table_name, 'all columns') }}\n\n        {# return anomalies query as standard test query #}\n        {{ elementary.get_anomaly_query(anomaly_scores_test_table_relation, sensitivity, backfill_days) }}\n\n    {%- else %}\n\n        {#- test must run an sql query -#}\n        {{- elementary.no_results_query() }}\n\n    {%- endif %}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_test_name_in_graph", "macro.elementary.debug_log", "macro.elementary.get_package_database_and_schema", "macro.elementary.table_name_with_suffix", "macro.dbt.get_or_create_relation", "macro.elementary.relation_to_full_name", "macro.dbt.load_relation", "macro.elementary.test_log", "macro.elementary.no_results_query", "macro.elementary.get_model_graph_node", "macro.elementary.get_timestamp_column", "macro.elementary.find_normalized_data_type_for_column", "macro.elementary.get_is_column_timestamp", "macro.elementary.get_all_column_obj_and_monitors", "macro.elementary.get_test_argument", "macro.elementary.empty_data_monitoring_metrics", "macro.elementary.create_or_replace", "macro.elementary.should_ignore_column", "macro.elementary.get_min_bucket_start", "macro.elementary.column_monitoring_query", "macro.dbt.run_query", "macro.elementary.insert_as_select", "macro.elementary.get_anomaly_scores_query", "macro.elementary.get_anomaly_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.8562071}, "macro.elementary.should_ignore_column": {"unique_id": "macro.elementary.should_ignore_column", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/tests/test_all_columns_anomalies.sql", "original_file_path": "macros/edr/tests/test_all_columns_anomalies.sql", "name": "should_ignore_column", "macro_sql": "\n\n{%- macro should_ignore_column(column_name, exclude_regexp, exclude_prefix) -%}\n    {%- set regex_module = modules.re -%}\n    {%- if exclude_regexp -%}\n        {%- set is_match = regex_module.match(exclude_regexp, column_name, regex_module.IGNORECASE) %}\n        {%- if is_match -%}\n            {{ return(True) }}\n        {%- endif -%}\n    {%- endif -%}\n    {% if exclude_prefix %}\n        {%- set exclude_regexp = '^' ~ exclude_prefix ~ '.*' %}\n        {%- set is_match = regex_module.match(exclude_regexp, column_name, regex_module.IGNORECASE) %}\n        {%- if is_match -%}\n            {{ return(True) }}\n        {%- endif -%}\n    {%- endif -%}\n    {{ return(False) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.856846}, "macro.elementary.test_schema_changes": {"unique_id": "macro.elementary.test_schema_changes", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/tests/test_schema_changes.sql", "original_file_path": "macros/edr/tests/test_schema_changes.sql", "name": "test_schema_changes", "macro_sql": "{% test schema_changes(model) %}\n    -- depends_on: {{ ref('elementary_test_results') }}\n    -- depends_on: {{ ref('table_changes') }}\n    -- depends_on: {{ ref('column_changes') }}\n    {%- if execute and flags.WHICH in ['test', 'build'] %}\n        {% set test_name_in_graph = elementary.get_test_name_in_graph() %}\n        {{ elementary.debug_log('collecting metrics for test: ' ~ test_name_in_graph) }}\n        {# creates temp relation for test metrics #}\n        {% set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n        {% set schema_name = schema_name ~ '__tests' %}\n        {% set temp_schema_changes_table_name = elementary.table_name_with_suffix(test_name_in_graph, '__schema_changes') %}\n        {{ elementary.debug_log('metrics table: ' ~ database_name ~ '.' ~ schema_name ~ '.' ~ temp_schema_changes_table_name) }}\n        {% set temp_table_exists, temp_table_relation = dbt.get_or_create_relation(database=database_name,\n                                                                                   schema=schema_name,\n                                                                                   identifier=temp_schema_changes_table_name,\n                                                                                   type='table') -%}\n\n        {# get table configuration #}\n        {%- set full_table_name = elementary.relation_to_full_name(model) %}\n        {%- set model_relation = dbt.load_relation(model) %}\n        {% if not model_relation %}\n            {{ elementary.test_log('monitored_table_not_found', full_table_name) }}\n            {{ return(elementary.no_results_query()) }}\n        {% endif %}\n        {%- set last_schema_change_time = elementary.get_last_schema_changes_time() %}\n\n        {# query if there were schema changes since last execution #}\n        {% set schema_changes_alert_query = elementary.get_schema_changes_test_query(full_table_name, last_schema_change_time) %}\n        {% set temp_alerts_table_name = elementary.table_name_with_suffix(test_name_in_graph, '__schema_changes_alerts') %}\n        {{ elementary.debug_log('schema alerts table: ' ~ database_name ~ '.' ~ schema_name ~ '.' ~ temp_alerts_table_name) }}\n        {% set alerts_temp_table_exists, alerts_temp_table_relation = dbt.get_or_create_relation(database=database_name,\n                                                                                   schema=schema_name,\n                                                                                   identifier=temp_alerts_table_name,\n                                                                                   type='table') -%}\n        {% do elementary.create_or_replace(False, alerts_temp_table_relation, schema_changes_alert_query) %}\n        {# return schema changes query as standard test query #}\n        select * from {{ alerts_temp_table_relation }}\n\n    {% else %}\n\n        {# test must run an sql query #}\n        {{ elementary.no_results_query() }}\n\n    {% endif %}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_test_name_in_graph", "macro.elementary.debug_log", "macro.elementary.get_package_database_and_schema", "macro.elementary.table_name_with_suffix", "macro.dbt.get_or_create_relation", "macro.elementary.relation_to_full_name", "macro.dbt.load_relation", "macro.elementary.test_log", "macro.elementary.no_results_query", "macro.elementary.get_last_schema_changes_time", "macro.elementary.get_schema_changes_test_query", "macro.elementary.create_or_replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.859433}, "macro.elementary.test_column_anomalies": {"unique_id": "macro.elementary.test_column_anomalies", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/tests/test_column_anomalies.sql", "original_file_path": "macros/edr/tests/test_column_anomalies.sql", "name": "test_column_anomalies", "macro_sql": "{% test column_anomalies(model, column_name, column_anomalies, timestamp_column=none, sensitivity=none, backfill_days=none) %}\n    -- depends_on: {{ ref('monitors_runs') }}\n    -- depends_on: {{ ref('data_monitoring_metrics') }}\n    -- depends_on: {{ ref('alerts_data_monitoring') }}\n    -- depends_on: {{ ref('metrics_anomaly_score') }}\n    {%- if execute and flags.WHICH in ['test', 'build'] %}\n        {% set test_name_in_graph = elementary.get_test_name_in_graph() %}\n        {{ elementary.debug_log('collecting metrics for test: ' ~ test_name_in_graph) }}\n        {#- creates temp relation for test metrics -#}\n        {% set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n        {% set schema_name = schema_name ~ '__tests' %}\n        {%- set temp_metrics_table_name = elementary.table_name_with_suffix(test_name_in_graph, '__metrics') %}\n        {{ elementary.debug_log('metrics table: ' ~ database_name ~ '.' ~ schema_name ~ '.' ~ temp_metrics_table_name) }}\n        {%- set temp_table_exists, temp_table_relation = dbt.get_or_create_relation(database=database_name,\n                                                                                   schema=schema_name,\n                                                                                   identifier=temp_metrics_table_name,\n                                                                                   type='table') -%}\n\n        {#- get column configuration -#}\n        {%- set full_table_name = elementary.relation_to_full_name(model) %}\n        {%- set model_relation = dbt.load_relation(model) %}\n        {% if not model_relation %}\n            {{ elementary.test_log('monitored_table_not_found', full_table_name) }}\n            {{ return(elementary.no_results_query()) }}\n        {% endif %}\n\n        {% set model_graph_node = elementary.get_model_graph_node(model_relation) %}\n        {% set timestamp_column = elementary.get_timestamp_column(timestamp_column, model_graph_node) %}\n\n        {%- set timestamp_column_data_type = elementary.find_normalized_data_type_for_column(model, timestamp_column) %}\n        {{ elementary.debug_log('timestamp_column - ' ~ timestamp_column) }}\n        {{ elementary.debug_log('timestamp_column_data_type - ' ~ timestamp_column_data_type) }}\n        {%- set is_timestamp = elementary.get_is_column_timestamp(model_relation, timestamp_column, timestamp_column_data_type) %}\n        {{ elementary.debug_log('is_timestamp - ' ~ is_timestamp) }}\n\n        {%- set column_obj_and_monitors = elementary.get_column_obj_and_monitors(model, column_name, column_anomalies) -%}\n        {%- if not column_obj_and_monitors -%}\n            {{ elementary.edr_log('column ' ~ column_name ~ ' object was not found') }}\n            {{ return(elementary.no_results_query()) }}\n        {%- endif -%}\n        {%- set column_monitors = column_obj_and_monitors['monitors'] -%}\n        {%- set column_obj = column_obj_and_monitors['column'] -%}\n        {{ elementary.debug_log('column_monitors - ' ~ column_monitors) }}\n        {% set backfill_days = elementary.get_test_argument(argument_name='backfill_days', value=backfill_days) %}\n        {%- set min_bucket_start = \"'\" ~ elementary.get_min_bucket_start(full_table_name, backfill_days, column_monitors, column_name) ~ \"'\" %}\n        {{ elementary.debug_log('min_bucket_start - ' ~ min_bucket_start) }}\n        {#- execute table monitors and write to temp test table -#}\n        {{ elementary.test_log('start', full_table_name, column_name) }}\n        {%- set column_monitoring_query = elementary.column_monitoring_query(model_relation, timestamp_column, is_timestamp, min_bucket_start, column_obj, column_monitors) %}\n        {{ elementary.debug_log('column_monitoring_query - \\n' ~ column_monitoring_query) }}\n        {%- do elementary.create_or_replace(False, temp_table_relation, column_monitoring_query) %}\n\n        {#- calculate anomaly scores for metrics -#}\n        {%- set temp_table_name = elementary.relation_to_full_name(temp_table_relation) %}\n        {%- set sensitivity = elementary.get_test_argument(argument_name='anomaly_sensitivity', value=sensitivity) %}\n        {% set anomaly_scores_query = elementary.get_anomaly_scores_query(temp_table_relation, full_table_name, sensitivity, backfill_days, column_monitors, column_name) %}\n        {{ elementary.debug_log('anomaly_score_query - \\n' ~ anomaly_scores_query) }}\n        {%- set anomaly_scores_test_table_name = elementary.table_name_with_suffix(test_name_in_graph, '__anomaly_scores') %}\n        {{ elementary.debug_log('anomalies table: ' ~ database_name ~ '.' ~ schema_name ~ '.' ~ anomaly_scores_test_table_name) }}\n        {% set anomaly_scores_test_table_exists, anomaly_scores_test_table_relation = dbt.get_or_create_relation(database=database_name,\n                                                                                   schema=schema_name,\n                                                                                   identifier=anomaly_scores_test_table_name,\n                                                                                   type='table') -%}\n        {%- do elementary.create_or_replace(False, anomaly_scores_test_table_relation, anomaly_scores_query) %}\n        {{ elementary.test_log('end', full_table_name, column_name) }}\n\n        {# return anomalies query as standart test query #}\n        {{ elementary.get_anomaly_query(anomaly_scores_test_table_relation, sensitivity, backfill_days) }}\n    \n    {%- else %}\n\n        {#- test must run an sql query -#}\n        {{ elementary.no_results_query() }}\n\n    {%- endif %}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_test_name_in_graph", "macro.elementary.debug_log", "macro.elementary.get_package_database_and_schema", "macro.elementary.table_name_with_suffix", "macro.dbt.get_or_create_relation", "macro.elementary.relation_to_full_name", "macro.dbt.load_relation", "macro.elementary.test_log", "macro.elementary.no_results_query", "macro.elementary.get_model_graph_node", "macro.elementary.get_timestamp_column", "macro.elementary.find_normalized_data_type_for_column", "macro.elementary.get_is_column_timestamp", "macro.elementary.get_column_obj_and_monitors", "macro.elementary.edr_log", "macro.elementary.get_test_argument", "macro.elementary.get_min_bucket_start", "macro.elementary.column_monitoring_query", "macro.elementary.create_or_replace", "macro.elementary.get_anomaly_scores_query", "macro.elementary.get_anomaly_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.86463}, "macro.elementary.test_table_anomalies": {"unique_id": "macro.elementary.test_table_anomalies", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/tests/test_table_anomalies.sql", "original_file_path": "macros/edr/tests/test_table_anomalies.sql", "name": "test_table_anomalies", "macro_sql": "{% test table_anomalies(model, table_anomalies, freshness_column=none, timestamp_column=none, sensitivity=none, backfill_days=none) %}\n    -- depends_on: {{ ref('monitors_runs') }}\n    -- depends_on: {{ ref('data_monitoring_metrics') }}\n    -- depends_on: {{ ref('alerts_data_monitoring') }}\n    -- depends_on: {{ ref('metrics_anomaly_score') }}\n    {%- if execute and flags.WHICH in ['test', 'build'] %}\n        {% set test_name_in_graph = elementary.get_test_name_in_graph() %}\n        {{ elementary.debug_log('collecting metrics for test: ' ~ test_name_in_graph) }}\n        {#- creates temp relation for test metrics -#}\n        {% set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n        {% set schema_name = schema_name ~ '__tests' %}\n        {%- set temp_metrics_table_name = elementary.table_name_with_suffix(test_name_in_graph, '__metrics') %}\n        {{ elementary.debug_log('metrics table: ' ~ database_name ~ '.' ~ schema_name ~ '.' ~ temp_metrics_table_name) }}\n        {% set temp_table_exists, temp_table_relation = dbt.get_or_create_relation(database=database_name,\n                                                                                   schema=schema_name,\n                                                                                   identifier=temp_metrics_table_name,\n                                                                                   type='table') -%}\n\n        {#- get table configuration -#}\n        {%- set full_table_name = elementary.relation_to_full_name(model) %}\n        {%- set model_relation = dbt.load_relation(model) %}\n        {% if not model_relation %}\n            {{ elementary.test_log('monitored_table_not_found', full_table_name) }}\n            {{ return(elementary.no_results_query()) }}\n        {% endif %}\n\n        {% set model_graph_node = elementary.get_model_graph_node(model_relation) %}\n        {% set timestamp_column = elementary.get_timestamp_column(timestamp_column, model_graph_node) %}\n        {%- set timestamp_column_data_type = elementary.find_normalized_data_type_for_column(model, timestamp_column) %}\n        {{ elementary.debug_log('timestamp_column - ' ~ timestamp_column) }}\n        {{ elementary.debug_log('timestamp_column_data_type - ' ~ timestamp_column_data_type) }}\n        {%- set is_timestamp = elementary.get_is_column_timestamp(model_relation, timestamp_column, timestamp_column_data_type) %}\n        {{ elementary.debug_log('is_timestamp - ' ~ is_timestamp) }}\n\n        {%- set table_monitors = elementary.get_final_table_monitors(table_anomalies) %}\n        {{ elementary.debug_log('table_monitors - ' ~ table_monitors) }}\n        {% set backfill_days = elementary.get_test_argument(argument_name='backfill_days', value=backfill_days) %}\n        {%- set min_bucket_start = \"'\" ~ elementary.get_min_bucket_start(full_table_name, backfill_days, table_monitors) ~ \"'\" %}\n        {{ elementary.debug_log('min_bucket_start - ' ~ min_bucket_start) }}\n        {#- execute table monitors and write to temp test table -#}\n        {{ elementary.test_log('start', full_table_name) }}\n        {%- set table_monitoring_query = elementary.table_monitoring_query(model_relation, timestamp_column, is_timestamp, min_bucket_start, table_monitors, freshness_column) %}\n        {{ elementary.debug_log('table_monitoring_query - \\n' ~ table_monitoring_query) }}\n        {%- do elementary.create_or_replace(False, temp_table_relation, table_monitoring_query) %}\n\n        {#- calculate anomaly scores for metrics -#}\n        {%- set sensitivity = elementary.get_test_argument(argument_name='anomaly_sensitivity', value=sensitivity) %}\n        {% set anomaly_scores_query = elementary.get_anomaly_scores_query(temp_table_relation, full_table_name, sensitivity, backfill_days, table_monitors) %}\n        {{ elementary.debug_log('table monitors anomaly scores query - \\n' ~ anomaly_scores_query) }}\n        {%- set anomaly_scores_test_table_name = elementary.table_name_with_suffix(test_name_in_graph, '__anomaly_scores') %}\n        {{ elementary.debug_log('anomalies table: ' ~ database_name ~ '.' ~ schema_name ~ '.' ~ anomaly_scores_test_table_name) }}\n        {% set anomaly_scores_test_table_exists, anomaly_scores_test_table_relation = dbt.get_or_create_relation(database=database_name,\n                                                                                   schema=schema_name,\n                                                                                   identifier=anomaly_scores_test_table_name,\n                                                                                   type='table') -%}\n        {% do elementary.create_or_replace(False, anomaly_scores_test_table_relation, anomaly_scores_query) %}\n        {{ elementary.test_log('end', full_table_name) }}\n\n        {# return anomalies query as standard test query #}\n        {{ elementary.get_anomaly_query(anomaly_scores_test_table_relation, sensitivity, backfill_days) }}\n\n    {% else %}\n\n        {# test must run an sql query #}\n        {{ elementary.no_results_query() }}\n\n    {% endif %}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_test_name_in_graph", "macro.elementary.debug_log", "macro.elementary.get_package_database_and_schema", "macro.elementary.table_name_with_suffix", "macro.dbt.get_or_create_relation", "macro.elementary.relation_to_full_name", "macro.dbt.load_relation", "macro.elementary.test_log", "macro.elementary.no_results_query", "macro.elementary.get_model_graph_node", "macro.elementary.get_timestamp_column", "macro.elementary.find_normalized_data_type_for_column", "macro.elementary.get_is_column_timestamp", "macro.elementary.get_final_table_monitors", "macro.elementary.get_test_argument", "macro.elementary.get_min_bucket_start", "macro.elementary.table_monitoring_query", "macro.elementary.create_or_replace", "macro.elementary.get_anomaly_scores_query", "macro.elementary.get_anomaly_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.8691359}, "macro.elementary.get_test_unique_id": {"unique_id": "macro.elementary.get_test_unique_id", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/tests/test_utils/get_test_unique_id.sql", "original_file_path": "macros/edr/tests/test_utils/get_test_unique_id.sql", "name": "get_test_unique_id", "macro_sql": "{% macro get_test_unique_id() %}\n    {% set test_unique_id = model.get('unique_id') %}\n    {{ return(test_unique_id) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.869461}, "macro.elementary.find_normalized_data_type_for_column": {"unique_id": "macro.elementary.find_normalized_data_type_for_column", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/tests/test_utils/find_normalized_data_type_for_column.sql", "original_file_path": "macros/edr/tests/test_utils/find_normalized_data_type_for_column.sql", "name": "find_normalized_data_type_for_column", "macro_sql": "{% macro find_normalized_data_type_for_column(model_relation, column_name) %}\n\n{% set columns_from_relation = adapter.get_columns_in_relation(model_relation) %}\n{% if columns_from_relation and columns_from_relation is iterable %}\n    {% for column_obj in columns_from_relation %}\n        {% if column_obj.column | lower == column_name | lower %}\n            {{ return(elementary.normalize_data_type(column_obj.dtype)) }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n{{ return(none) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.normalize_data_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.8701131}, "macro.elementary.get_timestamp_column": {"unique_id": "macro.elementary.get_timestamp_column", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/tests/test_utils/get_timestamp_column.sql", "original_file_path": "macros/edr/tests/test_utils/get_timestamp_column.sql", "name": "get_timestamp_column", "macro_sql": "{% macro get_timestamp_column(timestamp_column, model_node) %}\n    {% if timestamp_column %}\n        {{ return(timestamp_column) }}\n    {% else %}\n        {% set elementary_config = elementary.get_elementary_config_from_node(model_node) %}\n        {% if elementary_config and elementary_config is mapping %}\n            {{ return(elementary_config.get('timestamp_column')) }}\n        {% endif %}\n    {% endif %}\n    {{- return(none) -}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_elementary_config_from_node"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.870708}, "macro.elementary.get_model_graph_node": {"unique_id": "macro.elementary.get_model_graph_node", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/tests/test_utils/get_model_graph_node.sql", "original_file_path": "macros/edr/tests/test_utils/get_model_graph_node.sql", "name": "get_model_graph_node", "macro_sql": "{% macro get_model_graph_node(model_relation) %}\n    {% if execute %}\n        {# model here is actually the test node in the graph #}\n        {% set test_graph_node = model %}\n        {% set test_depends_on_unique_ids = test_graph_node.depends_on.nodes %}\n        {# model relation is the relation object of the model where the test is defined #}\n        {% set model_name = model_relation.name | lower %}\n        {% set depends_on_nodes = elementary.get_nodes_by_unique_ids(test_depends_on_unique_ids) %}\n        {% if depends_on_nodes %}\n            {% for node in depends_on_nodes %}\n                {% if node.name | lower == model_name %}\n                    {{ return(node) }}\n                {% endif %}\n            {% endfor %}\n        {% endif %}\n    {% endif %}\n    {{ return(none) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_nodes_by_unique_ids"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.871549}, "macro.elementary.get_test_execution_id": {"unique_id": "macro.elementary.get_test_execution_id", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/tests/test_utils/get_test_execution_id.sql", "original_file_path": "macros/edr/tests/test_utils/get_test_execution_id.sql", "name": "get_test_execution_id", "macro_sql": "{% macro get_test_execution_id() %}\n    {{ return(elementary.get_node_execution_id(model)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_node_execution_id"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.871789}, "macro.elementary.get_anomaly_query": {"unique_id": "macro.elementary.get_anomaly_query", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/tests/test_utils/get_anomaly_query.sql", "original_file_path": "macros/edr/tests/test_utils/get_anomaly_query.sql", "name": "get_anomaly_query", "macro_sql": "{%- macro get_anomaly_query(anomaly_scores_test_table_relation, sensitivity, backfill_days) -%}\n    {%- set backfill_period = \"'-\" ~ backfill_days ~ \"'\" %}\n    {%- set anomaly_query -%}\n        select\n            *,\n            {{ elementary.anomaly_detection_description() }}\n        from {{ anomaly_scores_test_table_relation }}\n        where abs(anomaly_score) > {{ sensitivity }}\n            {# get anomalies only for a limited period called the backfill period #}\n            and bucket_end >= {{ elementary.timeadd('day', backfill_period, elementary.get_max_bucket_end()) }}\n            {# to avoid false positives return only anomaly scores that were calculated with a big enough training set #}\n            and training_set_size >= {{ elementary.get_config_var('days_back') -1 }}\n    {%- endset -%}\n    {{- return(anomaly_query) -}}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.anomaly_detection_description", "macro.elementary.timeadd", "macro.elementary.get_max_bucket_end", "macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.872503}, "macro.elementary.get_test_name_in_graph": {"unique_id": "macro.elementary.get_test_name_in_graph", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/tests/test_utils/get_test_name_in_graph.sql", "original_file_path": "macros/edr/tests/test_utils/get_test_name_in_graph.sql", "name": "get_test_name_in_graph", "macro_sql": "{% macro get_test_name_in_graph() %}\n    {% set test_name_in_graph = model.name %}\n    {{ return(test_name_in_graph) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.87278}, "macro.elementary.union_metrics_query": {"unique_id": "macro.elementary.union_metrics_query", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/tests/on_run_end/union_metrics_query.sql", "original_file_path": "macros/edr/tests/on_run_end/union_metrics_query.sql", "name": "union_metrics_query", "macro_sql": "{% macro union_metrics_query(temp_metrics_tables) %}\n    {%- if temp_metrics_tables | length > 0 %}\n        {%- set union_temp_query -%}\n            with union_temps_metrics as (\n            {%- for temp_table in temp_metrics_tables -%}\n                select * from {{- temp_table -}}\n                {%- if not loop.last %} union all {% endif %}\n            {%- endfor %}\n            ),\n            metrics_with_duplicates as (\n                select *,\n                    row_number() over (partition by id order by updated_at desc) as row_number\n                from union_temps_metrics\n            )\n            select\n                id,\n                full_table_name,\n                column_name,\n                metric_name,\n                metric_value,\n                source_value,\n                bucket_start,\n                bucket_end,\n                bucket_duration_hours,\n                updated_at\n            from metrics_with_duplicates\n            where row_number = 1\n        {%- endset %}\n        {{ return(union_temp_query) }}\n    {%- endif %}\n    {{ return(none) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.8735979}, "macro.elementary.handle_test_results": {"unique_id": "macro.elementary.handle_test_results", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "name": "handle_test_results", "macro_sql": "{% macro handle_test_results(results) %}\n    {% if execute and flags.WHICH in ['test', 'build'] %}\n        {% set test_metrics_tables = [] %}\n        {% set elementary_test_results = [] %}\n        {% set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n        {% for result in results | selectattr('node.resource_type', '==', 'test') %}\n            {% set status = result.status | lower %}\n            {% set run_result_dict = result.to_dict() %}\n            {% set test_node = elementary.safe_get_with_default(run_result_dict, 'node', {}) %}\n            {% set flatten_test_node = elementary.flatten_test(test_node) %}\n            {% if flatten_test_node.test_namespace == 'elementary' %}\n                {% if flatten_test_node.short_name in ['table_anomalies', 'column_anomalies', 'all_columns_anomalies'] %}\n                    {% set test_metrics_table = elementary.get_elementary_test_table(database_name, schema_name, flatten_test_node.name, '__metrics') %}\n                    {% if test_metrics_table %}\n                        {% do test_metrics_tables.append(test_metrics_table) %}\n                    {% endif %}\n                    {%- if status == 'error' -%}\n                        {% do elementary_test_results.append(elementary.get_dbt_test_result(run_result_dict,\n                                                                                            flatten_test_node,\n                                                                                            'anomaly_detection')) %}\n                    {%- else -%}\n                        {% do elementary_test_results.extend(elementary.get_test_result_per_metric(database_name,\n                                                                                                   schema_name,\n                                                                                                   status,\n                                                                                                   run_result_dict,\n                                                                                                   flatten_test_node)) %}\n                    {%- endif -%}\n                {% elif flatten_test_node.short_name == 'schema_changes' %}\n                    {% if status == 'error' or status == 'pass' %}\n                        {% do elementary_test_results.append(elementary.get_dbt_test_result(run_result_dict,\n                                                                                            flatten_test_node,\n                                                                                            'schema_change')) %}\n                    {%- else -%} {# warn or fail #}\n                        {% do elementary_test_results.extend(elementary.get_test_result_per_schmea_change(database_name,\n                                                                                                          schema_name,\n                                                                                                          run_result_dict,\n                                                                                                          flatten_test_node)) %}\n                    {%- endif -%}\n                {% endif %}\n            {% else %}\n                {% do elementary_test_results.append(elementary.get_dbt_test_result(run_result_dict,\n                                                                                    flatten_test_node,\n                                                                                    'dbt_test')) %}\n            {% endif %}\n        {% endfor %}\n        {{ elementary.merge_data_monitoring_metrics(database_name, schema_name, test_metrics_tables) }}\n        {% if elementary_test_results %}\n            {%- set elementary_test_results_relation = adapter.get_relation(database=database_name,\n                                                                            schema=schema_name,\n                                                                            identifier='elementary_test_results') -%}\n            {%- do elementary.insert_dicts(elementary_test_results_relation, elementary_test_results, should_commit=True) -%}\n        {% endif %}\n    {% endif %}\n    {{ return('') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_package_database_and_schema", "macro.elementary.safe_get_with_default", "macro.elementary.flatten_test", "macro.elementary.get_elementary_test_table", "macro.elementary.get_dbt_test_result", "macro.elementary.get_test_result_per_metric", "macro.elementary.get_test_result_per_schmea_change", "macro.elementary.merge_data_monitoring_metrics", "macro.elementary.insert_dicts"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.899123}, "macro.elementary.get_test_result_per_metric": {"unique_id": "macro.elementary.get_test_result_per_metric", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "name": "get_test_result_per_metric", "macro_sql": "\n\n{%- macro get_test_result_per_metric(database_name, schema_name, status, run_result_dict, flatten_test_node) -%}\n    {% set anomaly_detection_test_results = [] %}\n    {% set test_anomaly_scores_table = elementary.get_elementary_test_table(database_name, schema_name, flatten_test_node.name, '__anomaly_scores') %}\n    {%- if status != 'pass' -%} {# warn or fail #}\n        {% set test_row_dicts = elementary.get_test_result_rows_as_dicts(flatten_test_node) %}\n    {% else %}\n        {% set test_row_dicts = elementary.get_most_recent_anomaly_scores(test_anomaly_scores_table) %}\n    {% endif %}\n    {% for test_row_dict in test_row_dicts %}\n        {% do anomaly_detection_test_results.append(elementary.get_metric_test_result(run_result_dict,\n                                                                                      test_row_dict,\n                                                                                      flatten_test_node,\n                                                                                      test_anomaly_scores_table)) %}\n    {% endfor %}\n    {{- return(anomaly_detection_test_results) -}}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_elementary_test_table", "macro.elementary.get_test_result_rows_as_dicts", "macro.elementary.get_most_recent_anomaly_scores", "macro.elementary.get_metric_test_result"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.8997781}, "macro.elementary.get_test_result_per_schmea_change": {"unique_id": "macro.elementary.get_test_result_per_schmea_change", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "name": "get_test_result_per_schmea_change", "macro_sql": "{%- macro get_test_result_per_schmea_change(database_name, schema_name, run_result_dict, flatten_test_node) -%}\n    {% set schema_change_test_results = [] %}\n    {% set test_row_dicts = elementary.get_test_result_rows_as_dicts(flatten_test_node) %}\n    {% for test_row_dict in test_row_dicts %}\n        {% do schema_change_test_results.append(elementary.get_schema_change_test_result(run_result_dict,\n                                                                                         test_row_dict,\n                                                                                         flatten_test_node)) %}\n    {% endfor %}\n    {{- return(schema_change_test_results) -}}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_test_result_rows_as_dicts", "macro.elementary.get_schema_change_test_result"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.9001641}, "macro.elementary.get_metric_test_result": {"unique_id": "macro.elementary.get_metric_test_result", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "name": "get_metric_test_result", "macro_sql": "{% macro get_metric_test_result(run_result_dict, anomaly_dict, test_node, test_anomaly_scores_table) %}\n    {% set full_table_name = elementary.insensitive_get_dict_value(anomaly_dict, 'full_table_name', '') %}\n    {% set split_full_table_name = full_table_name.split('.') %}\n    {% set database_name = split_full_table_name[0] %}\n    {% set schema_name = split_full_table_name[1] %}\n    {% set table_name = split_full_table_name[2] %}\n    {% set test_params = elementary.insensitive_get_dict_value(test_node, 'test_params', {}) %}\n    {% set test_param_sensitivity = elementary.insensitive_get_dict_value(test_params, 'sensitivity') %}\n    {% set test_param_timestamp_column = elementary.insensitive_get_dict_value(test_params, 'timestamp_column') %}\n    {% set test_param_backfill_days = elementary.insensitive_get_dict_value(test_params, 'backfill_days') %}\n    {% set parent_model_unique_id = elementary.insensitive_get_dict_value(test_node, 'parent_model_unique_id') %}\n    {% set parent_model_node = elementary.get_node(parent_model_unique_id) %}\n    {% set timestamp_column = elementary.get_timestamp_column(test_param_timestamp_column, parent_model_node) %}\n    {% set sensitivity = elementary.get_test_argument(argument_name='anomaly_sensitivity', value=test_param_sensitivity) %}\n    {% set backfill_days = elementary.get_test_argument(argument_name='backfill_days', value=test_param_backfill_days) %}\n    {% do test_params.update({'sensitivity': sensitivity}) %}\n    {% do test_params.update({'timestamp_column': timestamp_column}) %}\n    {% do test_params.update({'backfill_days': backfill_days}) %}\n    {% set column_name = elementary.insensitive_get_dict_value(anomaly_dict, 'column_name') %}\n    {% set metric_name = elementary.insensitive_get_dict_value(anomaly_dict, 'metric_name') %}\n    {% set metric_id = elementary.insensitive_get_dict_value(anomaly_dict, 'metric_id') %}\n    {%- set backfill_period = \"'-\" ~ backfill_days ~ \"'\" %}\n    {% set test_results_query %}\n        with anomaly_scores as (\n            select * from {{ test_anomaly_scores_table }}\n        ),\n        anomaly_scores_with_is_anomalous as (\n        select  *,\n                case when abs(anomaly_score) > {{ sensitivity }}\n                and bucket_end >= {{ elementary.timeadd('day', backfill_period, elementary.get_max_bucket_end()) }}\n                and training_set_size >= {{ elementary.get_config_var('days_back') -1 }} then TRUE else FALSE end as is_anomalous\n            from anomaly_scores\n        )\n        select metric_value as value,\n               case when is_anomalous = TRUE then\n                lag(min_metric_value) over (partition by full_table_name, column_name, metric_name order by bucket_end)\n               else min_metric_value end as min_value,\n               case when is_anomalous = TRUE then\n                lag(max_metric_value) over (partition by full_table_name, column_name, metric_name order by bucket_end)\n                else max_metric_value end as max_value,\n               bucket_start as start_time,\n               bucket_end as end_time,\n               metric_id\n        from anomaly_scores_with_is_anomalous\n        where upper(full_table_name) = upper({{ elementary.const_as_string(full_table_name) }})\n              and metric_name = {{ elementary.const_as_string(metric_name) }}\n             {%- if column_name %}\n                and upper(column_name) = upper({{ elementary.const_as_string(column_name) }})\n             {%- endif %}\n        order by bucket_end\n    {%- endset -%}\n    {% set test_result_dict = {\n        'id': elementary.insensitive_get_dict_value(anomaly_dict, 'id'),\n        'data_issue_id': elementary.insensitive_get_dict_value(anomaly_dict, 'metric_id'),\n        'test_execution_id': elementary.insensitive_get_dict_value(anomaly_dict, 'test_execution_id'),\n        'test_unique_id': elementary.insensitive_get_dict_value(anomaly_dict, 'test_unique_id'),\n        'model_unique_id': elementary.insensitive_get_dict_value(test_node, 'parent_model_unique_id'),\n        'detected_at': elementary.insensitive_get_dict_value(anomaly_dict, 'detected_at'),\n        'database_name': database_name,\n        'schema_name': schema_name,\n        'table_name': table_name,\n        'column_name': column_name,\n        'test_type': 'anomaly_detection',\n        'test_sub_type': metric_name,\n        'test_results_description': elementary.insensitive_get_dict_value(anomaly_dict, 'anomaly_description'),\n        'other': elementary.insensitive_get_dict_value(anomaly_dict, 'anomalous_value'),\n        'owners': elementary.insensitive_get_dict_value(test_node, 'model_owners'),\n        'tags': elementary.insensitive_get_dict_value(test_node, 'model_tags'),\n        'test_results_query': test_results_query,\n        'test_name': elementary.insensitive_get_dict_value(test_node, 'short_name'),\n        'test_params': elementary.insensitive_get_dict_value(test_node, 'test_params'),\n        'severity': elementary.insensitive_get_dict_value(test_node, 'severity'),\n        'status': elementary.insensitive_get_dict_value(run_result_dict, 'status')\n    } %}\n    {{ return(test_result_dict) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.insensitive_get_dict_value", "macro.elementary.get_node", "macro.elementary.get_timestamp_column", "macro.elementary.get_test_argument", "macro.elementary.timeadd", "macro.elementary.get_max_bucket_end", "macro.elementary.get_config_var", "macro.elementary.const_as_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.903402}, "macro.elementary.get_schema_change_test_result": {"unique_id": "macro.elementary.get_schema_change_test_result", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "name": "get_schema_change_test_result", "macro_sql": "{% macro get_schema_change_test_result(run_result_dict, schema_change_dict, test_node) %}\n    {% set test_result_dict = schema_change_dict %}\n    {% do test_result_dict.update({\n        'other': none,\n        'model_unique_id': elementary.insensitive_get_dict_value(test_node, 'parent_model_unique_id'),\n        'owners': elementary.insensitive_get_dict_value(test_node, 'model_owners'),\n        'tags': elementary.insensitive_get_dict_value(test_node, 'model_tags'),\n        'test_results_query': elementary.insensitive_get_dict_value(test_node, 'compiled_sql'),\n        'test_name': elementary.insensitive_get_dict_value(test_node, 'short_name'),\n        'test_params': elementary.insensitive_get_dict_value(test_node, 'test_params'),\n        'severity': elementary.insensitive_get_dict_value(test_node, 'severity'),\n        'status': elementary.insensitive_get_dict_value(run_result_dict, 'status')\n    }) %}\n    {{ return(test_result_dict) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.insensitive_get_dict_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.9041479}, "macro.elementary.get_dbt_test_result": {"unique_id": "macro.elementary.get_dbt_test_result", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "name": "get_dbt_test_result", "macro_sql": "{% macro get_dbt_test_result(run_result_dict, test_node, test_type) %}\n    {% set test_execution_id = elementary.get_node_execution_id(test_node) %}\n    {% set parent_model_unique_id = elementary.insensitive_get_dict_value(test_node, 'parent_model_unique_id') %}\n    {% set parent_model = elementary.get_node(parent_model_unique_id) %}\n    {% set parent_model_name = elementary.get_table_name_from_node(parent_model) %}\n    {% set test_short_name = elementary.insensitive_get_dict_value(test_node, 'short_name') %}\n    {% set test_long_name = elementary.insensitive_get_dict_value(test_node, 'name') %}\n    {%- if test_short_name -%}\n        {% set test_name = test_short_name %}\n    {%- else -%}\n        {% set test_name = test_long_name %}\n    {%- endif -%}\n    {% set test_result_dict = {\n        'id': test_execution_id,\n        'data_issue_id': none,\n        'test_execution_id': test_execution_id,\n        'test_unique_id': elementary.insensitive_get_dict_value(test_node, 'unique_id'),\n        'model_unique_id': elementary.insensitive_get_dict_value(test_node, 'parent_model_unique_id'),\n        'detected_at': run_started_at.strftime('%Y-%m-%d %H:%M:%S'),\n        'database_name': elementary.insensitive_get_dict_value(test_node, 'database_name'),\n        'schema_name': elementary.insensitive_get_dict_value(test_node, 'schema_name'),\n        'table_name': parent_model_name,\n        'column_name': elementary.insensitive_get_dict_value(test_node, 'test_column_name'),\n        'test_type': test_type,\n        'test_sub_type': elementary.insensitive_get_dict_value(test_node, 'type'),\n        'test_results_description': elementary.insensitive_get_dict_value(run_result_dict, 'message'),\n        'other': none,\n        'owners': elementary.insensitive_get_dict_value(test_node, 'model_owners'),\n        'tags': elementary.insensitive_get_dict_value(test_node, 'model_tags'),\n        'test_results_query': elementary.insensitive_get_dict_value(test_node, 'compiled_sql'),\n        'test_name': test_name,\n        'test_params': elementary.insensitive_get_dict_value(test_node, 'test_params'),\n        'severity': elementary.insensitive_get_dict_value(test_node, 'severity'),\n        'status': elementary.insensitive_get_dict_value(run_result_dict, 'status')\n    }%}\n    {{ return(test_result_dict) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_node_execution_id", "macro.elementary.insensitive_get_dict_value", "macro.elementary.get_node", "macro.elementary.get_table_name_from_node"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.905827}, "macro.elementary.get_test_result_rows_as_dicts": {"unique_id": "macro.elementary.get_test_result_rows_as_dicts", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "name": "get_test_result_rows_as_dicts", "macro_sql": "{% macro get_test_result_rows_as_dicts(flatten_test_node, sample_limit = none) %}\n    {% set test_row_dicts = [] %}\n    {% set test_compiled_sql = flatten_test_node.compiled_sql %}\n    {% if test_compiled_sql %}\n        {% if sample_limit %}\n            {% set test_compiled_sql = test_compiled_sql ~ ' limit ' ~ sample_limit %}\n        {% endif %}\n        {% set test_table_agate = run_query(test_compiled_sql) %}\n        {% set test_row_dicts = elementary.agate_to_dicts(test_table_agate) %}\n    {% endif %}\n    {{ return(test_row_dicts) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.elementary.agate_to_dicts"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.906305}, "macro.elementary.get_most_recent_anomaly_scores": {"unique_id": "macro.elementary.get_most_recent_anomaly_scores", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "name": "get_most_recent_anomaly_scores", "macro_sql": "{% macro get_most_recent_anomaly_scores(test_anomaly_scores_table) %}\n    {% set test_metrics_dicts = [] %}\n    {% set most_recent_anomaly_scores_query %}\n        with anomaly_scores as (\n            select *,\n                row_number() over (partition by full_table_name, column_name, metric_name order by bucket_end desc) as row_number\n            from {{ test_anomaly_scores_table }}\n        ),\n        most_recent_scores as (\n            select * from anomaly_scores where row_number = 1\n        )\n        select * from most_recent_scores\n    {% endset %}\n    {% set most_recent_anomaly_scores_agate = run_query(most_recent_anomaly_scores_query) %}\n    {% set most_recent_anomaly_scores = elementary.agate_to_dicts(most_recent_anomaly_scores_agate) %}\n    {{ return(most_recent_anomaly_scores) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.elementary.agate_to_dicts"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.906642}, "macro.elementary.get_elementary_test_table": {"unique_id": "macro.elementary.get_elementary_test_table", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "name": "get_elementary_test_table", "macro_sql": "{% macro get_elementary_test_table(database_name, schema_name, test_name, suffix) %}\n    {% set tests_schema_name = schema_name ~ '__tests' %}\n    {% set test_table_name = elementary.table_name_with_suffix(test_name, suffix) %}\n    {% set test_table_relation = adapter.get_relation(database=database_name,\n                                                      schema=tests_schema_name,\n                                                      identifier=test_table_name) %}\n    {{ return(test_table_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.table_name_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.906999}, "macro.elementary.get_data_monitoring_metrics_relation": {"unique_id": "macro.elementary.get_data_monitoring_metrics_relation", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "name": "get_data_monitoring_metrics_relation", "macro_sql": "{% macro get_data_monitoring_metrics_relation(database_name, schema_name) %}\n    {%- set data_monitoring_metrics_relation = adapter.get_relation(database=database_name,\n                                                                    schema=schema_name,\n                                                                    identifier='data_monitoring_metrics') -%}\n    {{ return(data_monitoring_metrics_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.907222}, "macro.elementary.merge_data_monitoring_metrics": {"unique_id": "macro.elementary.merge_data_monitoring_metrics", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "name": "merge_data_monitoring_metrics", "macro_sql": "{% macro merge_data_monitoring_metrics(database_name, schema_name, test_metrics_tables) %}\n    {%- if test_metrics_tables %}\n        {%- set test_tables_union_query = elementary.union_metrics_query(test_metrics_tables) -%}\n        {%- set target_relation = elementary.get_data_monitoring_metrics_relation(database_name, schema_name) -%}\n        {%- set temp_relation = dbt.make_temp_relation(target_relation) -%}\n        {%- if test_tables_union_query %}\n            {{ elementary.debug_log('Running union query from test tables to ' ~ temp_relation.identifier) }}\n            {%- do run_query(dbt.create_table_as(True, temp_relation, test_tables_union_query)) %}\n            {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n            {{ elementary.debug_log('Merging ' ~ temp_relation.identifier ~ ' to ' ~ target_relation.database ~ '.' ~ target_relation.schema ~ '.' ~ target_relation.identifier) }}\n            {%- if target_relation and temp_relation and dest_columns %}\n                {% set merge_sql = elementary.merge_sql(target_relation, temp_relation, 'id', dest_columns) %}\n                {%- do run_query(merge_sql) %}\n                {%- do adapter.commit() -%}\n                {{ elementary.debug_log('Finished merging') }}\n            {%- else %}\n                {{ elementary.debug_log('Error: could not merge to table: ' ~ target_name) }}\n            {%- endif %}\n        {%- endif %}\n    {%- endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.union_metrics_query", "macro.elementary.get_data_monitoring_metrics_relation", "macro.dbt.make_temp_relation", "macro.elementary.debug_log", "macro.dbt.run_query", "macro.dbt.create_table_as", "macro.elementary.merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.908234}, "macro.elementary.create_elementary_tests_schema": {"unique_id": "macro.elementary.create_elementary_tests_schema", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/tests/on_run_start/create_elementary_tests_schema.sql", "original_file_path": "macros/edr/tests/on_run_start/create_elementary_tests_schema.sql", "name": "create_elementary_tests_schema", "macro_sql": "{% macro create_elementary_tests_schema() %}\n    {% if execute and flags.WHICH == 'test' %}\n        {% set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n        {% set schema_name = schema_name ~ '__tests' %}\n        {%- if not adapter.check_schema_exists(database_name, schema_name) %}\n            {{ elementary.debug_log('schema ' ~ database_name ~ '.' ~ schema_name ~ ' doesnt exist, creating it') }}\n            {% set schema_relation = api.Relation.create(database=database_name, schema=schema_name).without_identifier() %}\n            {%- do dbt.create_schema(schema_relation) %}\n            {% do adapter.commit() %}\n        {%- endif %}\n    {% endif %}\n    {{ return('') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_package_database_and_schema", "macro.elementary.debug_log", "macro.dbt.create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.909179}, "macro.elementary.dbt_model_run_result_description": {"unique_id": "macro.elementary.dbt_model_run_result_description", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/alerts/dbt_run_results_description.sql", "original_file_path": "macros/edr/alerts/dbt_run_results_description.sql", "name": "dbt_model_run_result_description", "macro_sql": "{% macro dbt_model_run_result_description() %}\n    'The model ' || name || ' returned ' || status || ' at ' || generated_at || ' on run ' || invocation_id\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.909356}, "macro.elementary.anomaly_detection_description": {"unique_id": "macro.elementary.anomaly_detection_description", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/alerts/anomaly_detection_description.sql", "original_file_path": "macros/edr/alerts/anomaly_detection_description.sql", "name": "anomaly_detection_description", "macro_sql": "{% macro anomaly_detection_description() %}\n    case\n        when metric_name = 'freshness' then {{ elementary.freshness_description() }}\n        when column_name is null then {{ elementary.table_metric_description() }}\n        when column_name is not null then {{ elementary.column_metric_description() }}\n        else null\n    end as anomaly_description\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.freshness_description", "macro.elementary.table_metric_description", "macro.elementary.column_metric_description"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.9098198}, "macro.elementary.freshness_description": {"unique_id": "macro.elementary.freshness_description", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/alerts/anomaly_detection_description.sql", "original_file_path": "macros/edr/alerts/anomaly_detection_description.sql", "name": "freshness_description", "macro_sql": "{% macro freshness_description() %}\n    'Last update was at ' || anomalous_value || ', ' || abs(round(metric_value/3600,2)) || ' hours ago. Usually the table is updated within ' || abs(round(training_avg/3600,2)) || ' hours.'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.909893}, "macro.elementary.table_metric_description": {"unique_id": "macro.elementary.table_metric_description", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/alerts/anomaly_detection_description.sql", "original_file_path": "macros/edr/alerts/anomaly_detection_description.sql", "name": "table_metric_description", "macro_sql": "{% macro table_metric_description() %}\n    'The last ' || metric_name || ' value is ' || round(metric_value,3) ||\n    '. The average for this metric is ' || round(training_avg,3) || '.'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.909958}, "macro.elementary.column_metric_description": {"unique_id": "macro.elementary.column_metric_description", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/alerts/anomaly_detection_description.sql", "original_file_path": "macros/edr/alerts/anomaly_detection_description.sql", "name": "column_metric_description", "macro_sql": "{% macro column_metric_description() %}\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || round(metric_value,3) ||\n    '. The average for this metric is ' || round(training_avg,3) || '.'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.910023}, "macro.elementary.get_configured_schemas_from_graph": {"unique_id": "macro.elementary.get_configured_schemas_from_graph", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/configuration/get_configured_schemas_from_graph.sql", "original_file_path": "macros/edr/system/configuration/get_configured_schemas_from_graph.sql", "name": "get_configured_schemas_from_graph", "macro_sql": "{% macro get_configured_schemas_from_graph() %}\n    {% set configured_schemas = [] %}\n    {% if execute %}\n        {% for test_node in graph.nodes.values() | selectattr('resource_type', '==', 'test') %}\n            {% set test_metadata = test_node.get('test_metadata') %}\n            {% if test_metadata %}\n                {% set test_name = test_metadata.get('name') %}\n                {% if test_name == 'schema_changes' %}\n                    {% set test_depends_on_unique_ids = test_node.depends_on.nodes %}\n                    {% set depends_on_nodes = elementary.get_nodes_by_unique_ids(test_depends_on_unique_ids) %}\n                    {% for node in depends_on_nodes %}\n                        {% set node_package_name = node.get('package_name') %}\n                        {% if node_package_name != 'elementary' %}\n                            {% if adapter.check_schema_exists(node['database'], node['schema']) %}\n                                {% do configured_schemas.append((node['database'], node['schema'])) %}\n                            {% endif %}\n                        {% endif %}\n                    {% endfor %}\n                {% endif %}\n            {% endif %}\n        {% endfor %}\n    {% endif %}\n    {{ return(configured_schemas | unique | list ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_nodes_by_unique_ids"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.911799}, "macro.elementary.not_edr_run": {"unique_id": "macro.elementary.not_edr_run", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/system_utils/not_edr_run.sql", "original_file_path": "macros/edr/system/system_utils/not_edr_run.sql", "name": "not_edr_run", "macro_sql": "{% macro not_edr_run() %}\n    {%- if elementary.get_config_var('edr_run') %}\n        {{ return(false) }}\n    {%- else %}\n        {{ return(true) }}\n    {%- endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.9121542}, "macro.elementary.monitors_run_end": {"unique_id": "macro.elementary.monitors_run_end", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/system_utils/data_monitors_end.sql", "original_file_path": "macros/edr/system/system_utils/data_monitors_end.sql", "name": "monitors_run_end", "macro_sql": "{% macro monitors_run_end() %}\n\n    {%- set monitors_run_end_query %}\n        update {{ ref('elementary_runs') }}\n            set monitors_run_end = {{ dbt_utils.current_timestamp_in_utc() }}\n        where run_id = '{{ invocation_id }}'\n    {%- endset %}\n\n    {%- do run_query(monitors_run_end_query) -%}\n    {%- do edr_log('Finished running data monitors') -%}\n\n    {{ return('') }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp_in_utc", "macro.dbt.run_query", "macro.elementary.edr_log"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.912642}, "macro.elementary.no_results_query": {"unique_id": "macro.elementary.no_results_query", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/system_utils/no_results_query.sql", "original_file_path": "macros/edr/system/system_utils/no_results_query.sql", "name": "no_results_query", "macro_sql": "{% macro no_results_query() %}\n    with nothing as (select 1 as num)\n    select * from nothing where num = 2\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.912817}, "macro.elementary.get_run_started_at": {"unique_id": "macro.elementary.get_run_started_at", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/system_utils/get_run_started_at.sql", "original_file_path": "macros/edr/system/system_utils/get_run_started_at.sql", "name": "get_run_started_at", "macro_sql": "{% macro get_run_started_at() %}\n    {% if elementary.get_config_var('custom_run_started_at') %}\n        {# dbt run_started_at is fromtype datetime, so we convert the given custom time to be datetime as well. #}\n        {{ return(modules.datetime.datetime.fromisoformat(elementary.get_config_var('custom_run_started_at'))) }}\n    {% else %}\n        {{ return(run_started_at) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.913271}, "macro.elementary.get_test_argument": {"unique_id": "macro.elementary.get_test_argument", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/system_utils/get_test_argument.sql", "original_file_path": "macros/edr/system/system_utils/get_test_argument.sql", "name": "get_test_argument", "macro_sql": "{% macro get_test_argument(argument_name, value=none) %}\n  {% if value %}\n    {{ return(value) }}\n  {% else %}\n    {{ return(elementary.get_config_var(argument_name)) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.91365}, "macro.elementary.get_config_var": {"unique_id": "macro.elementary.get_config_var", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/system_utils/get_config_var.sql", "original_file_path": "macros/edr/system/system_utils/get_config_var.sql", "name": "get_config_var", "macro_sql": "{% macro get_config_var(var_name) %}\n\n{# We use this macro to define and call vars, as the global vars defined in dbt_project.yml\n   of the package are not accesible at on-run-start and on-run-end #}\n\n  {% set default_config = {\n    'days_back': 14,\n    'anomaly_sensitivity': 3,\n    'backfill_days': 2,\n    'alert_dbt_model_fail': true,\n    'alert_dbt_model_skip': true,\n    'elementary_debug_logs': false,\n    'refresh_dbt_artifacts': false,\n    'dbt_artifacts_chunk_size': 50,\n    'edr_cli_run': false,\n    'max_int': 2147483647,\n    'schemas_to_alert_on_new_tables': [],\n    'custom_run_started_at': null,\n    'edr_monitors': {\n      'table': ['schema_changes', 'row_count', 'freshness'],\n      'column_any_type': ['null_count', 'null_percent'],\n      'column_string': ['min_length', 'max_length', 'average_length', 'missing_count', 'missing_percent'],\n      'column_numeric': ['min', 'max', 'zero_count', 'zero_percent', 'average', 'standard_deviation', 'variance']\n    } \n  } %}\n\n  {{ return(var(var_name, default_config.get(var_name))) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.914751}, "macro.elementary.run_start_column": {"unique_id": "macro.elementary.run_start_column", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/system_utils/timestamp_column.sql", "original_file_path": "macros/edr/system/system_utils/timestamp_column.sql", "name": "run_start_column", "macro_sql": "{% macro run_start_column() %}\n    cast ('{{ run_started_at.strftime(\"%Y-%m-%d %H:%M:%S\") }}' as {{ dbt_utils.type_timestamp() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.915051}, "macro.elementary.current_timestamp_column": {"unique_id": "macro.elementary.current_timestamp_column", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/system_utils/timestamp_column.sql", "original_file_path": "macros/edr/system/system_utils/timestamp_column.sql", "name": "current_timestamp_column", "macro_sql": "{% macro current_timestamp_column() %}\n    cast ({{dbt_utils.current_timestamp_in_utc()}} as {{ dbt_utils.type_timestamp() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp_in_utc", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.915183}, "macro.elementary.empty_elementary_test_results": {"unique_id": "macro.elementary.empty_elementary_test_results", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "name": "empty_elementary_test_results", "macro_sql": "{% macro empty_elementary_test_results() %}\n    {{ elementary.empty_table([('id','long_string'),('data_issue_id','string'),('test_execution_id','long_string'),('test_unique_id','long_string'),('model_unique_id','long_string'),('detected_at','timestamp'),('database_name','string'),('schema_name','string'),('table_name','string'),('column_name','string'),('test_type','string'),('test_sub_type','string'),('test_results_description','long_string'),('owners','string'),('tags','string'),('test_results_query','long_string'),('other','string'),('test_name','long_string'),('test_params','long_string'),('severity','string'),('status','string')]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.918474}, "macro.elementary.empty_column_unpivot_cte": {"unique_id": "macro.elementary.empty_column_unpivot_cte", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "name": "empty_column_unpivot_cte", "macro_sql": "{% macro empty_column_unpivot_cte() %}\n    {{ elementary.empty_table([('edr_column_name','string'),('edr_bucket','timestamp'),('metric_name','string'),('metric_value','float')]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.918727}, "macro.elementary.empty_data_monitoring_metrics": {"unique_id": "macro.elementary.empty_data_monitoring_metrics", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "name": "empty_data_monitoring_metrics", "macro_sql": "{% macro empty_data_monitoring_metrics() %}\n    {{ elementary.empty_table([('id','string'),('full_table_name','string'),('column_name','string'),('metric_name','string'),('metric_value','float'),('source_value','string'),('bucket_start','timestamp'),('bucket_end','timestamp'),('bucket_duration_hours','int'),('updated_at','timestamp')]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.919178}, "macro.elementary.empty_column_monitors_cte": {"unique_id": "macro.elementary.empty_column_monitors_cte", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "name": "empty_column_monitors_cte", "macro_sql": "{% macro empty_column_monitors_cte() %}\n    {%- set column_monitors_list = elementary.all_column_monitors() %}\n    {%- set columns_definition = [('column_name', 'string'), ('bucket', 'timestamp')] %}\n    {%- for monitor in column_monitors_list %}\n        {%- do columns_definition.append((monitor,'int'))-%}\n    {%- endfor %}\n    {{ elementary.empty_table(columns_definition) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.all_column_monitors", "macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.919557}, "macro.elementary.empty_table": {"unique_id": "macro.elementary.empty_table", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "name": "empty_table", "macro_sql": "{% macro empty_table(column_name_and_type_list) %}\n\n    {%- set empty_table_query -%}\n        with empty_table as (\n            select\n            {% for column in column_name_and_type_list %}\n                {{ elementary.empty_column(column[0], column[1]) }} {%- if not loop.last -%},{%- endif %}\n            {%- endfor %}\n            )\n        select * from empty_table\n        where 1 = 0\n    {%- endset -%}\n\n    {{- return(empty_table_query)-}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.empty_column"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.919895}, "macro.elementary.empty_column": {"unique_id": "macro.elementary.empty_column", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "name": "empty_column", "macro_sql": "{% macro empty_column(column_name, data_type) %}\n\n    {%- set dummy_values = elementary.dummy_values() %}\n\n    {%- if data_type == 'boolean' %}\n        cast ({{ dummy_values['boolean'] }} as {{ elementary.type_bool()}}) as {{ column_name }}\n    {%- elif data_type == 'timestamp' -%}\n        cast('{{ dummy_values['timestamp'] }}' as {{ dbt_utils.type_timestamp() }}) as {{ column_name }}\n    {%- elif data_type == 'int' %}\n        cast({{ dummy_values['int'] }} as {{ dbt_utils.type_int() }}) as {{ column_name }}\n    {%- elif data_type == 'bigint' %}\n        cast({{ dummy_values['bigint'] }} as {{ dbt_utils.type_bigint() }}) as {{ column_name }}\n    {%- elif data_type == 'float' %}\n        cast({{ dummy_values['float'] }} as {{ dbt_utils.type_float() }}) as {{ column_name }}\n    {%- elif data_type == 'long_string' %}\n        cast('{{ dummy_values['long_string'] }}' as {{ elementary.type_long_string() }}) as {{ column_name }}\n    {%- else %}\n        cast('{{ dummy_values['string'] }}' as {{ elementary.type_string() }}) as {{ column_name }}\n    {%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.dummy_values", "macro.elementary.type_bool", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_bigint", "macro.dbt_utils.type_float", "macro.elementary.type_long_string", "macro.elementary.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.920861}, "macro.elementary.dummy_values": {"unique_id": "macro.elementary.dummy_values", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "name": "dummy_values", "macro_sql": "{% macro dummy_values() %}\n\n    {%- set dummy_values = {\n     'string': \"dummy_string\",\n     'long_string': \"this_is_just_a_long_dummy_string\",\n     'boolean': 'True',\n     'int': 123456789,\n     'bigint': 31474836478,\n     'float': 123456789.99,\n     'timestamp': \"2091-02-17\"\n    } %}\n\n    {{ return(dummy_values) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.921195}, "macro.elementary.edr_log": {"unique_id": "macro.elementary.edr_log", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/system_utils/logs.sql", "original_file_path": "macros/edr/system/system_utils/logs.sql", "name": "edr_log", "macro_sql": "{% macro edr_log(msg) %}\n    {%- if execute %}\n        {% do log('Elementary: ' ~ msg, info=True) %}\n    {%- endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.9221919}, "macro.elementary.debug_log": {"unique_id": "macro.elementary.debug_log", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/system_utils/logs.sql", "original_file_path": "macros/edr/system/system_utils/logs.sql", "name": "debug_log", "macro_sql": "{% macro debug_log(msg) %}\n    {%- if execute %}\n        {% set debug_logs_enabled = elementary.get_config_var('elementary_debug_logs') %}\n        {% if debug_logs_enabled %}\n            {{ elementary.edr_log(msg) }}\n        {% endif %}\n    {%- endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.edr_log"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.922446}, "macro.elementary.test_log": {"unique_id": "macro.elementary.test_log", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/system_utils/logs.sql", "original_file_path": "macros/edr/system/system_utils/logs.sql", "name": "test_log", "macro_sql": "{% macro test_log(msg_type, table_name, column_name=none) %}\n    {% set monitored_table_not_found = 'Monitored table ' ~ table_name ~ ' not found' %}\n    {%- if column_name%}\n        {%- set start = 'Started running data monitors on: ' ~ table_name ~ ' ' ~ column_name %}\n        {%- set end = 'Finished running data monitors on: ' ~ table_name ~ ' ' ~ column_name %}\n        {%- set no_monitors = 'No data monitors to run on: ' ~ table_name ~ ' ' ~ column_name %}\n    {%- else %}\n        {%- set start = 'Started running data monitors on: ' ~ table_name %}\n        {%- set end = 'Finished running data monitors on: ' ~ table_name %}\n        {%- set no_monitors = 'No data monitors to run on: ' ~ table_name %}\n    {%- endif %}\n\n    {%- if msg_type == 'start' %}\n        {% do elementary.edr_log(start) %}\n    {%- elif msg_type == 'end' %}\n        {% do elementary.edr_log(end) %}\n    {%- elif msg_type == 'no_monitors' %}\n        {% do elementary.edr_log(no_monitors) %}\n    {% elif msg_type == 'monitored_table_not_found' %}\n        {% do elementary.edr_log(monitored_table_not_found) %}\n    {%- endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.edr_log"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.923315}, "macro.elementary.daily_buckets_cte": {"unique_id": "macro.elementary.daily_buckets_cte", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/system_utils/daily_buckets_cte.sql", "original_file_path": "macros/edr/system/system_utils/daily_buckets_cte.sql", "name": "daily_buckets_cte", "macro_sql": "{% macro daily_buckets_cte() %}\n    {{ adapter.dispatch('daily_buckets_cte','elementary')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.bigquery__daily_buckets_cte"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.924472}, "macro.elementary.default__daily_buckets_cte": {"unique_id": "macro.elementary.default__daily_buckets_cte", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/system_utils/daily_buckets_cte.sql", "original_file_path": "macros/edr/system/system_utils/daily_buckets_cte.sql", "name": "default__daily_buckets_cte", "macro_sql": "{% macro default__daily_buckets_cte() -%}\n    {%- set max_bucket_end = \"'\"~ run_started_at.strftime(\"%Y-%m-%d 00:00:00\") ~\"'\" %}\n    {%- set min_bucket_end = \"'\"~ (run_started_at - modules.datetime.timedelta(elementary.get_config_var('days_back'))).strftime(\"%Y-%m-%d 00:00:00\") ~\"'\" %}\n\n    {%- set daily_buckets_cte %}\n        with dates as (\n            select {{ elementary.cast_as_timestamp(min_bucket_end) }} as date\n        union all\n        select {{ elementary.timeadd('day', '1', 'date') }}\n        from dates\n        where {{ elementary.timeadd('day', '1', 'date') }} <= {{ elementary.cast_as_timestamp(max_bucket_end) }}\n            )\n        select date as edr_daily_bucket\n        from dates\n    {%- endset %}\n    {{ return(daily_buckets_cte) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.cast_as_timestamp", "macro.elementary.timeadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.925066}, "macro.elementary.bigquery__daily_buckets_cte": {"unique_id": "macro.elementary.bigquery__daily_buckets_cte", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/system_utils/daily_buckets_cte.sql", "original_file_path": "macros/edr/system/system_utils/daily_buckets_cte.sql", "name": "bigquery__daily_buckets_cte", "macro_sql": "{% macro bigquery__daily_buckets_cte() %}\n    {%- set max_bucket_end = \"'\"~ run_started_at.strftime(\"%Y-%m-%d 00:00:00\") ~\"'\" %}\n    {%- set min_bucket_end = \"'\"~ (run_started_at - modules.datetime.timedelta(elementary.get_config_var('days_back'))).strftime(\"%Y-%m-%d 00:00:00\") ~\"'\" %}\n\n    {%- set daily_buckets_cte %}\n        select edr_daily_bucket\n        from unnest(generate_timestamp_array({{ elementary.cast_as_timestamp(min_bucket_end) }}, {{ elementary.cast_as_timestamp(max_bucket_end) }}, interval 1 day)) as edr_daily_bucket\n    {%- endset %}\n    {{ return(daily_buckets_cte) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.cast_as_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.925529}, "macro.elementary.redshift__daily_buckets_cte": {"unique_id": "macro.elementary.redshift__daily_buckets_cte", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/system_utils/daily_buckets_cte.sql", "original_file_path": "macros/edr/system/system_utils/daily_buckets_cte.sql", "name": "redshift__daily_buckets_cte", "macro_sql": "{% macro redshift__daily_buckets_cte() %}\n    {%- set max_bucket_end = \"'\"~ run_started_at.strftime(\"%Y-%m-%d 00:00:00\") ~\"'\" %}\n    {%- set days_back = elementary.get_config_var('days_back') %}\n\n    {%- set daily_buckets_cte %}\n        {%- for i in range(0, days_back+1) %}\n            {%- set daily_bucket = \"'\"~ (run_started_at - modules.datetime.timedelta(i)).strftime(\"%Y-%m-%d 00:00:00\") ~\"'\" %}\n            select {{ elementary.cast_as_timestamp(daily_bucket) }} as edr_daily_bucket\n            {%- if not loop.last %} union all {%- endif %}\n        {%- endfor %}\n    {%- endset %}\n    {{ return(daily_buckets_cte) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.cast_as_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.926123}, "macro.elementary.full_table_name": {"unique_id": "macro.elementary.full_table_name", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "name": "full_table_name", "macro_sql": "{% macro full_table_name(alias) -%}\n    {% if alias is defined %}{%- set alias_dot = alias ~ '.' %}{% endif %}\n    upper({{ alias_dot }}database_name || '.' || {{ alias_dot }}schema_name || '.' || {{ alias_dot }}table_name)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.9286132}, "macro.elementary.full_schema_name": {"unique_id": "macro.elementary.full_schema_name", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "name": "full_schema_name", "macro_sql": "{% macro full_schema_name() -%}\n    upper(database_name || '.' || schema_name)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.928684}, "macro.elementary.full_column_name": {"unique_id": "macro.elementary.full_column_name", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "name": "full_column_name", "macro_sql": "{% macro full_column_name() -%}\n    upper(database_name || '.' || schema_name || '.' || table_name || '.' || column_name)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.928747}, "macro.elementary.full_name_split": {"unique_id": "macro.elementary.full_name_split", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "name": "full_name_split", "macro_sql": "{% macro full_name_split(part_name) %}\n    {{ adapter.dispatch('full_name_split','elementary')(part_name) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.bigquery__full_name_split"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.928891}, "macro.elementary.default__full_name_split": {"unique_id": "macro.elementary.default__full_name_split", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "name": "default__full_name_split", "macro_sql": "{% macro default__full_name_split(part_name) %}\n    {%- if part_name == 'database_name' -%}\n        {%- set part_index = 0 -%}\n    {%- elif part_name == 'schema_name' -%}\n        {%- set part_index = 1 -%}\n    {%- elif part_name == 'table_name' -%}\n        {%- set part_index = 2 -%}\n    {%- else -%}\n        {{ return('') }}\n    {%- endif -%}\n    trim(split(full_table_name,'.')[{{ part_index }}],'\"') as {{ part_name }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.929266}, "macro.elementary.bigquery__full_name_split": {"unique_id": "macro.elementary.bigquery__full_name_split", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "name": "bigquery__full_name_split", "macro_sql": "{% macro bigquery__full_name_split(part_name) %}\n    {%- if part_name == 'database_name' -%}\n        {%- set part_index = 0 %}\n    {%- elif part_name == 'schema_name' -%}\n        {%- set part_index = 1 %}\n    {%- elif part_name == 'table_name' -%}\n        {%- set part_index = 2 -%}\n    {%- else -%}\n        {{ return('') }}\n    {%- endif -%}\n    trim(split(full_table_name,'.')[OFFSET({{ part_index }})],'\"') as {{ part_name }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.9297018}, "macro.elementary.redshift__full_name_split": {"unique_id": "macro.elementary.redshift__full_name_split", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "name": "redshift__full_name_split", "macro_sql": "{% macro redshift__full_name_split(part_name) %}\n    {%- if part_name == 'database_name' -%}\n        {%- set part_index = 1 -%}\n    {%- elif part_name == 'schema_name' -%}\n        {%- set part_index = 2 -%}\n    {%- elif part_name == 'table_name' -%}\n        {%- set part_index = 3 -%}\n    {%- else -%}\n        {{ return('') }}\n    {%- endif -%}\n    trim(split_part(full_table_name,'.',{{ part_index }}),'\"') as {{ part_name }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.930071}, "macro.elementary.relation_to_full_name": {"unique_id": "macro.elementary.relation_to_full_name", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "name": "relation_to_full_name", "macro_sql": "{% macro relation_to_full_name(relation) %}\n    {%- set full_table_name = relation.database | upper ~'.'~ relation.schema | upper ~'.'~ relation.identifier | upper %}\n    {{ return(full_table_name) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.930298}, "macro.elementary.configured_schemas_from_graph_as_tuple": {"unique_id": "macro.elementary.configured_schemas_from_graph_as_tuple", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "name": "configured_schemas_from_graph_as_tuple", "macro_sql": "{% macro configured_schemas_from_graph_as_tuple() %}\n\n    {%- set configured_schema_tuples = elementary.get_configured_schemas_from_graph() %}\n    {%- set schemas_list = [] %}\n\n    {%- for configured_schema_tuple in configured_schema_tuples %}\n        {%- set database_name, schema_name = configured_schema_tuple %}\n        {%- set full_schema_name = database_name | upper ~ '.' ~ schema_name | upper %}\n        {%- do schemas_list.append(full_schema_name) -%}\n    {%- endfor %}\n\n    {% set schemas_tuple = elementary.strings_list_to_tuple(schemas_list) %}\n    {{ return(schemas_tuple) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_configured_schemas_from_graph", "macro.elementary.strings_list_to_tuple"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.930752}, "macro.elementary.from": {"unique_id": "macro.elementary.from", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/system_utils/from.sql", "original_file_path": "macros/edr/system/system_utils/from.sql", "name": "from", "macro_sql": "{% macro from(full_table_name) %}\n    {{ adapter.dispatch('from','elementary')(full_table_name) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.bigquery__from"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.9311948}, "macro.elementary.default__from": {"unique_id": "macro.elementary.default__from", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/system_utils/from.sql", "original_file_path": "macros/edr/system/system_utils/from.sql", "name": "default__from", "macro_sql": "{% macro default__from(full_table_name) %}\n    {%- set upper_full_name = full_table_name | upper %}\n    {%- set split_full_name = upper_full_name.split('.') %}\n    {%- set from_name = '\"'~ split_full_name[0] ~'\".\"'~ split_full_name[1] ~'\".\"'~ split_full_name[2] ~'\"' %}\n    {{ return(from_name) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.931545}, "macro.elementary.bigquery__from": {"unique_id": "macro.elementary.bigquery__from", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/system/system_utils/from.sql", "original_file_path": "macros/edr/system/system_utils/from.sql", "name": "bigquery__from", "macro_sql": "{% macro bigquery__from(full_table_name) %}\n    {%- set lower_full_name = full_table_name | lower %}\n    {%- set split_full_name = lower_full_name.split('.') %}\n    {%- set from_name = '`'~ split_full_name[0] ~'`.`'~ split_full_name[1] ~'`.`'~ split_full_name[2] ~'`' %}\n    {{ return(from_name) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.931888}, "macro.elementary.get_columns_from_information_schema": {"unique_id": "macro.elementary.get_columns_from_information_schema", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "name": "get_columns_from_information_schema", "macro_sql": "{% macro get_columns_from_information_schema(schema_tuple) %}\n    {{ return(adapter.dispatch('get_columns_from_information_schema', 'elementary')(schema_tuple)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.default__get_columns_from_information_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.932373}, "macro.elementary.default__get_columns_from_information_schema": {"unique_id": "macro.elementary.default__get_columns_from_information_schema", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "name": "default__get_columns_from_information_schema", "macro_sql": "{% macro default__get_columns_from_information_schema(schema_tuple) %}\n    {%- set database_name, schema_name = schema_tuple %}\n    {% set schema_relation = api.Relation.create(database=database_name, schema=schema_name).without_identifier() %}\n\n    select\n        upper(table_catalog || '.' || table_schema || '.' || table_name) as full_table_name,\n        upper(table_catalog) as database_name,\n        upper(table_schema) as schema_name,\n        upper(table_name) as table_name,\n        upper(column_name) as column_name,\n        data_type\n    from {{ schema_relation.information_schema('COLUMNS') }}\n    where upper(table_schema) = upper('{{ schema_name }}')\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.932674}, "macro.elementary.redshift__get_columns_from_information_schema": {"unique_id": "macro.elementary.redshift__get_columns_from_information_schema", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "name": "redshift__get_columns_from_information_schema", "macro_sql": "{% macro redshift__get_columns_from_information_schema(schema_tuple) %}\n    {%- set database_name, schema_name = schema_tuple %}\n\n    select\n        upper(table_catalog || '.' || table_schema || '.' || table_name) as full_table_name,\n        upper(table_catalog) as database_name,\n        upper(table_schema) as schema_name,\n        upper(table_name) as table_name,\n        upper(column_name) as column_name,\n        data_type\n    from svv_columns\n        where upper(table_schema) = upper('{{ schema_name }}')\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.932832}, "macro.elementary.get_tables_from_information_schema": {"unique_id": "macro.elementary.get_tables_from_information_schema", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "name": "get_tables_from_information_schema", "macro_sql": "{% macro get_tables_from_information_schema(schema_tuple) %}\n    {{ return(adapter.dispatch('get_tables_from_information_schema','elementary')(schema_tuple)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.default__get_tables_from_information_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.9337149}, "macro.elementary.default__get_tables_from_information_schema": {"unique_id": "macro.elementary.default__get_tables_from_information_schema", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "name": "default__get_tables_from_information_schema", "macro_sql": "{% macro default__get_tables_from_information_schema(schema_tuple) %}\n    {%- set database_name, schema_name = schema_tuple %}\n    {% set schema_relation = api.Relation.create(database=database_name, schema=schema_name).without_identifier() %}\n\n    (with information_schema_tables as (\n\n        select\n            upper(table_catalog) as database_name,\n            upper(table_schema) as schema_name,\n            upper(table_name) as table_name\n        from {{ schema_relation.information_schema('TABLES') }}\n        where upper(table_schema) = upper('{{ schema_name }}')\n\n    ),\n\n    information_schema_schemata as (\n\n        select\n            upper(catalog_name) as database_name,\n            upper(schema_name) as schema_name\n        from {{ dbt.information_schema_name(schema_relation.database) }}.SCHEMATA\n        where upper(schema_name) = upper('{{ schema_name }}')\n\n    )\n\n    select\n        case when tables.table_name is not null\n            then {{ elementary.full_table_name('TABLES') }}\n        else null end as full_table_name,\n        upper(schemas.database_name || '.' || schemas.schema_name) as full_schema_name,\n        schemas.database_name as database_name,\n        schemas.schema_name as schema_name,\n        tables.table_name\n    from information_schema_tables as tables\n    full outer join information_schema_schemata as schemas\n    on (tables.database_name = schemas.database_name and tables.schema_name = schemas.schema_name)\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.elementary.full_table_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.934165}, "macro.elementary.redshift__get_tables_from_information_schema": {"unique_id": "macro.elementary.redshift__get_tables_from_information_schema", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "name": "redshift__get_tables_from_information_schema", "macro_sql": "{% macro redshift__get_tables_from_information_schema(schema_tuple) %}\n    {%- set database_name, schema_name = schema_tuple %}\n\n    (with information_schema_tables as (\n\n        select\n            upper(table_catalog) as database_name,\n            upper(table_schema) as schema_name,\n            upper(table_name) as table_name\n        from svv_tables\n            where upper(table_schema) = upper('{{ schema_name }}') and upper(table_catalog) = upper('{{ database_name }}')\n\n    )\n\n    select\n        {{ elementary.full_table_name() }} as full_table_name,\n        upper(database_name || '.' || schema_name) as full_schema_name,\n        database_name,\n        schema_name,\n        table_name\n    from information_schema_tables\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.full_table_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.934377}, "macro.elementary.upload_dbt_sources": {"unique_id": "macro.elementary.upload_dbt_sources", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_sources.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_sources.sql", "name": "upload_dbt_sources", "macro_sql": "{%- macro upload_dbt_sources() -%}\n    {% set edr_cli_run = elementary.get_config_var('edr_cli_run') %}\n    {% if execute and not edr_cli_run %}\n        {% set sources = graph.sources.values() | selectattr('resource_type', '==', 'source') %}\n        {% do elementary.upload_artifacts_to_table(this, sources, elementary.get_flatten_source_callback()) %}\n    {%- endif -%}\n    {{- return('') -}}\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.upload_artifacts_to_table", "macro.elementary.get_flatten_source_callback"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.9381492}, "macro.elementary.get_dbt_sources_empty_table_query": {"unique_id": "macro.elementary.get_dbt_sources_empty_table_query", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_sources.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_sources.sql", "name": "get_dbt_sources_empty_table_query", "macro_sql": "{% macro get_dbt_sources_empty_table_query() %}\n    {% set dbt_sources_empty_table_query = elementary.empty_table([('unique_id', 'string'),\n                                                                   ('database_name', 'string'),\n                                                                   ('schema_name', 'string'),\n                                                                   ('source_name', 'string'),\n                                                                   ('name', 'string'),\n                                                                   ('identifier', 'string'),\n                                                                   ('loaded_at_field', 'string'),\n                                                                   ('freshness_warn_after', 'string'),\n                                                                   ('freshness_error_after', 'string'),\n                                                                   ('freshness_filter', 'long_string'),\n                                                                   ('relation_name', 'string'),\n                                                                   ('tags', 'long_string'),\n                                                                   ('meta', 'long_string'),\n                                                                   ('owner', 'string'),\n                                                                   ('package_name', 'string'),\n                                                                   ('original_path', 'long_string'),\n                                                                   ('path', 'string'),\n                                                                   ('source_description', 'long_string'),\n                                                                   ('description', 'long_string'),\n                                                                   ('generated_at', 'string')]) %}\n    {{ return(dbt_sources_empty_table_query) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.939036}, "macro.elementary.get_flatten_source_callback": {"unique_id": "macro.elementary.get_flatten_source_callback", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_sources.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_sources.sql", "name": "get_flatten_source_callback", "macro_sql": "\n\n{%- macro get_flatten_source_callback() -%}\n    {{- return(adapter.dispatch('flatten_source', 'elementary')) -}}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.flatten_source", "macro.elementary.default__flatten_source"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.939178}, "macro.elementary.flatten_source": {"unique_id": "macro.elementary.flatten_source", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_sources.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_sources.sql", "name": "flatten_source", "macro_sql": "{%- macro flatten_source(node_dict) -%}\n    {{- return(adapter.dispatch('flatten_source', 'elementary')(node_dict)) -}}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.default__flatten_source"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.9393358}, "macro.elementary.default__flatten_source": {"unique_id": "macro.elementary.default__flatten_source", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_sources.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_sources.sql", "name": "default__flatten_source", "macro_sql": "{% macro default__flatten_source(node_dict) %}\n    {% set freshness_dict = elementary.safe_get_with_default(node_dict, 'freshness', {}) %}\n    {% set source_meta_dict = elementary.safe_get_with_default(node_dict, 'source_meta', {}) %}\n    {% set meta_dict = elementary.safe_get_with_default(node_dict, 'meta', {}) %}\n    {% do meta_dict.update(source_meta_dict) %}\n    {% set owner = meta_dict.get('owner') %}\n    {% set node_tags = elementary.safe_get_with_default(node_dict, 'tags', []) %}\n    {% set meta_tags = elementary.safe_get_with_default(meta_dict, 'tags', []) %}\n    {% set tags = elementary.union_lists(node_tags, meta_tags) %}\n    {% set flatten_source_metadata_dict = {\n         'unique_id': node_dict.get('unique_id'),\n         'database_name': node_dict.get('database'),\n         'schema_name': node_dict.get('schema'),\n         'source_name': node_dict.get('source_name'),\n         'name': node_dict.get('name'),\n         'identifier': node_dict.get('identifier'),\n         'loaded_at_field': node_dict.get('loaded_at_field'),\n         'freshness_warn_after': freshness_dict.get('warn_after', {}),\n         'freshness_error_after': freshness_dict.get('error_after', {}),\n         'freshness_filter': freshness_dict.get('filter'),\n         'relation_name': node_dict.get('relation_name'),\n         'tags': tags,\n         'meta': meta_dict,\n         'owner': owner,\n         'package_name': node_dict.get('package_name'),\n         'original_path': node_dict.get('original_file_path'),\n         'path': node_dict.get('path'),\n         'source_description': node_dict.get('source_description'),\n         'description': node_dict.get('description'),\n         'generated_at': run_started_at.strftime('%Y-%m-%d %H:%M:%S')\n     }%}\n    {{ return(flatten_source_metadata_dict) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.safe_get_with_default", "macro.elementary.union_lists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.9410949}, "macro.elementary.upload_dbt_models": {"unique_id": "macro.elementary.upload_dbt_models", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_models.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_models.sql", "name": "upload_dbt_models", "macro_sql": "{%- macro upload_dbt_models() -%}\n    {% set edr_cli_run = elementary.get_config_var('edr_cli_run') %}\n    {% if execute and not edr_cli_run %}\n        {% set models = graph.nodes.values() | selectattr('resource_type', '==', 'model') %}\n        {% do elementary.upload_artifacts_to_table(this, models, elementary.get_flatten_model_callback()) %}\n    {%- endif -%}\n    {{- return('') -}}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.upload_artifacts_to_table", "macro.elementary.get_flatten_model_callback"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.944607}, "macro.elementary.get_dbt_models_empty_table_query": {"unique_id": "macro.elementary.get_dbt_models_empty_table_query", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_models.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_models.sql", "name": "get_dbt_models_empty_table_query", "macro_sql": "{% macro get_dbt_models_empty_table_query() %}\n    {% set dbt_models_empty_table_query = elementary.empty_table([('unique_id', 'string'),\n                                                                  ('alias', 'string'),\n                                                                  ('checksum', 'string'),\n                                                                  ('materialization', 'string'),\n                                                                  ('tags', 'long_string'),\n                                                                  ('meta', 'long_string'),\n                                                                  ('owner', 'string'),\n                                                                  ('database_name', 'string'),\n                                                                  ('schema_name', 'string'),\n                                                                  ('depends_on_macros', 'long_string'),\n                                                                  ('depends_on_nodes', 'long_string'),\n                                                                  ('description', 'long_string'),\n                                                                  ('name', 'string'),\n                                                                  ('package_name', 'string'),\n                                                                  ('original_path', 'long_string'),\n                                                                  ('path', 'string'),\n                                                                  ('generated_at', 'string')]) %}\n    {{ return(dbt_models_empty_table_query) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.9453812}, "macro.elementary.get_flatten_model_callback": {"unique_id": "macro.elementary.get_flatten_model_callback", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_models.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_models.sql", "name": "get_flatten_model_callback", "macro_sql": "\n\n{%- macro get_flatten_model_callback() -%}\n    {{- return(adapter.dispatch('flatten_model', 'elementary')) -}}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.flatten_model", "macro.elementary.default__flatten_model"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.945523}, "macro.elementary.flatten_model": {"unique_id": "macro.elementary.flatten_model", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_models.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_models.sql", "name": "flatten_model", "macro_sql": "{%- macro flatten_model(node_dict) -%}\n    {{- return(adapter.dispatch('flatten_model', 'elementary')(node_dict)) -}}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.default__flatten_model"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.94568}, "macro.elementary.default__flatten_model": {"unique_id": "macro.elementary.default__flatten_model", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_models.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_models.sql", "name": "default__flatten_model", "macro_sql": "{% macro default__flatten_model(node_dict) %}\n    {% set checksum_dict = elementary.safe_get_with_default(node_dict, 'checksum', {}) %}\n    {% set config_dict = elementary.safe_get_with_default(node_dict, 'config', {}) %}\n    {% set depends_on_dict = elementary.safe_get_with_default(node_dict, 'depends_on', {}) %}\n\n    {% set config_meta_dict = elementary.safe_get_with_default(config_dict, 'meta', {}) %}\n    {% set meta_dict = elementary.safe_get_with_default(node_dict, 'meta', {}) %}\n    {% do meta_dict.update(config_meta_dict) %}\n    {% set owner = meta_dict.get('owner') %}\n\n    {% set config_tags = elementary.safe_get_with_default(config_dict, 'tags', []) %}\n    {% set global_tags = elementary.safe_get_with_default(node_dict, 'tags', []) %}\n    {% set meta_tags = elementary.safe_get_with_default(meta_dict, 'tags', []) %}\n    {% set tags = elementary.union_lists(config_tags, global_tags) %}\n    {% set tags = elementary.union_lists(tags, meta_tags) %}\n\n    {% set flatten_model_metadata_dict = {\n        'unique_id': node_dict.get('unique_id'),\n        'alias': node_dict.get('alias'),\n        'checksum': checksum_dict.get('checksum'),\n        'materialization': config_dict.get('materialized'),\n        'tags': tags,\n        'meta': meta_dict,\n        'owner': owner,\n        'database_name': node_dict.get('database'),\n        'schema_name': node_dict.get('schema'),\n        'depends_on_macros': depends_on_dict.get('macros', []),\n        'depends_on_nodes': depends_on_dict.get('nodes', []),\n        'description': node_dict.get('description'),\n        'name': node_dict.get('name'),\n        'package_name': node_dict.get('package_name'),\n        'original_path': node_dict.get('original_file_path'),\n        'path': node_dict.get('path'),\n        'generated_at': run_started_at.strftime('%Y-%m-%d %H:%M:%S')\n    }%}\n    {{ return(flatten_model_metadata_dict) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.safe_get_with_default", "macro.elementary.union_lists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.947552}, "macro.elementary.upload_dbt_artifacts": {"unique_id": "macro.elementary.upload_dbt_artifacts", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_artifacts.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_artifacts.sql", "name": "upload_dbt_artifacts", "macro_sql": "{% macro upload_dbt_artifacts(results) %}\n    {% set edr_cli_run = elementary.get_config_var('edr_cli_run') %}\n    {% if execute and not edr_cli_run and results %}\n        {% set database_name, schema_name = elementary.get_model_database_and_schema('elementary', 'dbt_run_results') %}\n        {%- set dbt_run_results_relation = adapter.get_relation(database=database_name,\n                                                                schema=schema_name,\n                                                                identifier='dbt_run_results') -%}\n        {%- if dbt_run_results_relation -%}\n            {% do elementary.upload_artifacts_to_table(dbt_run_results_relation, results, elementary.get_flatten_run_result_callback(),\n                                                       should_commit=True) %}\n        {%- endif -%}\n    {% endif %}\n    {{ return ('') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.get_model_database_and_schema", "macro.elementary.upload_artifacts_to_table", "macro.elementary.get_flatten_run_result_callback"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.951614}, "macro.elementary.get_dbt_run_results_empty_table_query": {"unique_id": "macro.elementary.get_dbt_run_results_empty_table_query", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_artifacts.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_artifacts.sql", "name": "get_dbt_run_results_empty_table_query", "macro_sql": "{% macro get_dbt_run_results_empty_table_query() %}\n    {% set dbt_run_results_empty_table_query = elementary.empty_table([('model_execution_id', 'long_string'),\n                                                                       ('unique_id', 'long_string'),\n                                                                       ('invocation_id', 'string'),\n                                                                       ('generated_at', 'string'),\n                                                                       ('name', 'long_string'),\n                                                                       ('status', 'string'),\n                                                                       ('resource_type', 'string'),\n                                                                       ('execution_time', 'float'),\n                                                                       ('execute_started_at', 'string'),\n                                                                       ('execute_completed_at', 'string'),\n                                                                       ('compile_started_at', 'string'),\n                                                                       ('compile_completed_at', 'string'),\n                                                                       ('rows_affected', 'bigint'),\n                                                                       ('full_refresh', 'boolean')]) %}\n    {{ return(dbt_run_results_empty_table_query) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.95228}, "macro.elementary.get_flatten_run_result_callback": {"unique_id": "macro.elementary.get_flatten_run_result_callback", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_artifacts.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_artifacts.sql", "name": "get_flatten_run_result_callback", "macro_sql": "\n\n{%- macro get_flatten_run_result_callback() -%}\n    {{- return(adapter.dispatch('flatten_run_result', 'elementary')) -}}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.flatten_run_result", "macro.elementary.default__flatten_run_result"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.952419}, "macro.elementary.flatten_run_result": {"unique_id": "macro.elementary.flatten_run_result", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_artifacts.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_artifacts.sql", "name": "flatten_run_result", "macro_sql": "{%- macro flatten_run_result(node_dict) -%}\n    {{- return(adapter.dispatch('flatten_run_result', 'elementary')(node_dict)) -}}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.default__flatten_run_result"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.952578}, "macro.elementary.default__flatten_run_result": {"unique_id": "macro.elementary.default__flatten_run_result", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_artifacts.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_artifacts.sql", "name": "default__flatten_run_result", "macro_sql": "{% macro default__flatten_run_result(run_result) %}\n    {% set run_result_dict = run_result.to_dict() %}\n    {% set node = elementary.safe_get_with_default(run_result_dict, 'node', {}) %}\n    {% set flatten_run_result_dict = {\n        'model_execution_id': elementary.get_node_execution_id(node),\n        'invocation_id': invocation_id,\n        'unique_id': node.get('unique_id'),\n        'name': node.get('name'),\n        'generated_at': run_started_at.strftime('%Y-%m-%d %H:%M:%S'),\n        'rows_affected': run_result_dict.get('adapter_response', {}).get('rows_affected'),\n        'execution_time': run_result_dict.get('execution_time'),\n        'status': run_result_dict.get('status'),\n        'resource_type': node.get('resource_type'),\n        'execute_started_at': none,\n        'execute_completed_at': none,\n        'compile_started_at': none,\n        'compile_completed_at': none,\n        'full_refresh': flags.FULL_REFRESH\n    }%}\n\n    {% set timings = elementary.safe_get_with_default(run_result_dict, 'timing', []) %}\n    {% if timings %}\n        {% for timing in timings %}\n            {% if timing is mapping %}\n                {% if timing.get('name') == 'execute' %}\n                    {% do flatten_run_result_dict.update({'execute_started_at': timing.get('started_at'), 'execute_completed_at': timing.get('completed_at')}) %}\n                {% elif timing.get('name') == 'compile' %}\n                    {% do flatten_run_result_dict.update({'compile_started_at': timing.get('started_at'), 'compile_completed_at': timing.get('completed_at')}) %}\n                {% endif %}\n            {% endif %}\n        {% endfor %}\n    {% endif %}\n    {{ return(flatten_run_result_dict) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.safe_get_with_default", "macro.elementary.get_node_execution_id"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.954189}, "macro.elementary.upload_artifacts_to_table": {"unique_id": "macro.elementary.upload_artifacts_to_table", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/dbt_artifacts/upload_artifacts_to_table.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_artifacts_to_table.sql", "name": "upload_artifacts_to_table", "macro_sql": "{% macro upload_artifacts_to_table(table_relation, artifacts, flatten_artifact_callback, should_commit=False) %}\n    {% set flatten_artifact_dicts = [] %}\n    {% for artifact in artifacts %}\n        {% set flatten_artifact_dict = flatten_artifact_callback(artifact) %}\n        {% if flatten_artifact_dict is not none %}\n            {% do flatten_artifact_dicts.append(flatten_artifact_dict) %}\n        {% endif %}\n    {% endfor %}\n    {%- set flatten_artifacts_len = flatten_artifact_dicts | length %}\n    {% if flatten_artifacts_len > 0 %}\n        {{ elementary.debug_log('Inserting ' ~ flatten_artifacts_len ~ ' rows to table ' ~ table_relation) }}\n        {% do elementary.insert_dicts(table_relation, flatten_artifact_dicts, elementary.get_config_var('dbt_artifacts_chunk_size'), should_commit) %}\n    {%- else %}\n        {{ elementary.debug_log('No artifacts to insert to ' ~ table_relation) }}\n    {% endif %}\n    -- remove empty rows\n    {% do elementary.remove_empty_rows(table_relation) %}\n    {%- if should_commit -%}\n        {% do adapter.commit() %}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.debug_log", "macro.elementary.insert_dicts", "macro.elementary.get_config_var", "macro.elementary.remove_empty_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.955424}, "macro.elementary.upload_dbt_metrics": {"unique_id": "macro.elementary.upload_dbt_metrics", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_metrics.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_metrics.sql", "name": "upload_dbt_metrics", "macro_sql": "{%- macro upload_dbt_metrics() -%}\n    {% set edr_cli_run = elementary.get_config_var('edr_cli_run') %}\n    {% if execute and not edr_cli_run %}\n        {% set metrics = graph.metrics.values() | selectattr('resource_type', '==', 'metric') %}\n        {% do elementary.upload_artifacts_to_table(this, metrics, elementary.get_flatten_metric_callback) %}\n    {%- endif -%}\n    {{- return('') -}}\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.upload_artifacts_to_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.958723}, "macro.elementary.get_dbt_metrics_empty_table_query": {"unique_id": "macro.elementary.get_dbt_metrics_empty_table_query", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_metrics.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_metrics.sql", "name": "get_dbt_metrics_empty_table_query", "macro_sql": "{% macro get_dbt_metrics_empty_table_query() %}\n    {% set dbt_metrics_empty_table_query = elementary.empty_table([('unique_id', 'string'),\n                                                                   ('name', 'string'),\n                                                                   ('label', 'string'),\n                                                                   ('model', 'string'),\n                                                                   ('type', 'string'),\n                                                                   ('sql', 'long_string'),\n                                                                   ('timestamp', 'string'),\n                                                                   ('filters', 'long_string'),\n                                                                   ('time_grains', 'long_string'),\n                                                                   ('dimensions', 'long_string'),\n                                                                   ('depends_on_macros', 'long_string'),\n                                                                   ('depends_on_nodes', 'long_string'),\n                                                                   ('description', 'long_string'),\n                                                                   ('tags', 'long_string'),\n                                                                   ('meta', 'long_string'),\n                                                                   ('package_name', 'string'),\n                                                                   ('original_path', 'long_string'),\n                                                                   ('path', 'string'),\n                                                                   ('generated_at', 'string')]) %}\n    {{ return(dbt_metrics_empty_table_query) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.9595819}, "macro.elementary.get_flatten_metric_callback": {"unique_id": "macro.elementary.get_flatten_metric_callback", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_metrics.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_metrics.sql", "name": "get_flatten_metric_callback", "macro_sql": "\n\n{%- macro get_flatten_metric_callback() -%}\n    {{- return(adapter.dispatch('flatten_metric', 'elementary')) -}}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.flatten_metric", "macro.elementary.default__flatten_metric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.959724}, "macro.elementary.flatten_metric": {"unique_id": "macro.elementary.flatten_metric", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_metrics.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_metrics.sql", "name": "flatten_metric", "macro_sql": "{%- macro flatten_metric(node_dict) -%}\n    {{- return(adapter.dispatch('flatten_metric', 'elementary')(node_dict)) -}}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.default__flatten_metric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.959881}, "macro.elementary.default__flatten_metric": {"unique_id": "macro.elementary.default__flatten_metric", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_metrics.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_metrics.sql", "name": "default__flatten_metric", "macro_sql": "{% macro default__flatten_metric(node_dict) %}\n    {% set depends_on_dict = elementary.safe_get_with_default(node_dict, 'depends_on', {}) %}\n    {% set meta_dict = elementary.safe_get_with_default(node_dict, 'meta', {}) %}\n    {% set tags = elementary.safe_get_with_default(node_dict, 'tags', []) %}\n    {% set flatten_metrics_metadata_dict = {\n        'unique_id': node_dict.get('unique_id'),\n        'name': node_dict.get('name'),\n        'label': node_dict.get('label'),\n        'model': node_dict.get('model'),\n        'type': node_dict.get('type'),\n        'sql': node_dict.get('sql'),\n        'timestamp': node_dict.get('timestamp'),\n        'filters': node_dict.get('filters', {}),\n        'time_grains': node_dict.get('time_grains', []),\n        'dimensions': node_dict.get('dimensions', []),\n        'depends_on_macros': depends_on_dict.get('macros', []),\n        'depends_on_nodes': depends_on_dict.get('nodes', []),\n        'description': node_dict.get('description'),\n        'tags': tags,\n        'meta': meta_dict,\n        'package_name': node_dict.get('package_name'),\n        'original_path': node_dict.get('original_file_path'),\n        'path': node_dict.get('path'),\n        'generated_at': run_started_at.strftime('%Y-%m-%d %H:%M:%S')\n    }%}\n    {{ return(flatten_metrics_metadata_dict) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.safe_get_with_default"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.961254}, "macro.elementary.upload_dbt_tests": {"unique_id": "macro.elementary.upload_dbt_tests", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "name": "upload_dbt_tests", "macro_sql": "{%- macro upload_dbt_tests() -%}\n    {% set edr_cli_run = elementary.get_config_var('edr_cli_run') %}\n    {% if execute and not edr_cli_run %}\n        {% set tests = graph.nodes.values() | selectattr('resource_type', '==', 'test') %}\n        {% do elementary.upload_artifacts_to_table(this, tests, elementary.get_flatten_test_callback()) %}\n    {%- endif -%}\n    {{- return('') -}}\n{%- endmacro -%}\n\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.upload_artifacts_to_table", "macro.elementary.get_flatten_test_callback"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.9673102}, "macro.elementary.get_dbt_tests_empty_table_query": {"unique_id": "macro.elementary.get_dbt_tests_empty_table_query", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "name": "get_dbt_tests_empty_table_query", "macro_sql": "{% macro get_dbt_tests_empty_table_query() %}\n    {% set dbt_tests_empty_table_query = elementary.empty_table([('unique_id', 'string'),\n                                                                 ('database_name', 'string'),\n                                                                 ('schema_name', 'string'),\n                                                                 ('name', 'string'),\n                                                                 ('short_name', 'string'),\n                                                                 ('alias', 'string'),\n                                                                 ('test_column_name', 'string'),\n                                                                 ('severity', 'string'),\n                                                                 ('warn_if', 'string'),\n                                                                 ('error_if', 'string'),\n                                                                 ('test_params', 'long_string'),\n                                                                 ('test_namespace', 'string'),\n                                                                 ('tags', 'long_string'),\n                                                                 ('model_tags', 'long_string'),\n                                                                 ('model_owners', 'long_string'),\n                                                                 ('meta', 'long_string'),\n                                                                 ('depends_on_macros', 'long_string'),\n                                                                 ('depends_on_nodes', 'long_string'),\n                                                                 ('parent_model_unique_id', 'string'),\n                                                                 ('description', 'long_string'),\n                                                                 ('package_name', 'string'),\n                                                                 ('type', 'string'),\n                                                                 ('original_path', 'long_string'),\n                                                                 ('compiled_sql', 'long_string'),\n                                                                 ('path', 'string'),\n                                                                 ('generated_at', 'string')]) %}\n    {{ return(dbt_tests_empty_table_query) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.968394}, "macro.elementary.get_flatten_test_callback": {"unique_id": "macro.elementary.get_flatten_test_callback", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "name": "get_flatten_test_callback", "macro_sql": "\n\n{%- macro get_flatten_test_callback() -%}\n    {{- return(adapter.dispatch('flatten_test', 'elementary')) -}}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.flatten_test", "macro.elementary.default__flatten_test"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.9685361}, "macro.elementary.flatten_test": {"unique_id": "macro.elementary.flatten_test", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "name": "flatten_test", "macro_sql": "{%- macro flatten_test(node_dict) -%}\n    {{- return(adapter.dispatch('flatten_test', 'elementary')(node_dict)) -}}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.default__flatten_test"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.968693}, "macro.elementary.default__flatten_test": {"unique_id": "macro.elementary.default__flatten_test", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "name": "default__flatten_test", "macro_sql": "{% macro default__flatten_test(node_dict) %}\n    {% set config_dict = elementary.safe_get_with_default(node_dict, 'config', {}) %}\n    {% set depends_on_dict = elementary.safe_get_with_default(node_dict, 'depends_on', {}) %}\n\n    {% set config_meta_dict = elementary.safe_get_with_default(config_dict, 'meta', {}) %}\n    {% set meta_dict = elementary.safe_get_with_default(node_dict, 'meta', {}) %}\n    {% do meta_dict.update(config_meta_dict) %}\n\n    {% set config_tags = elementary.safe_get_with_default(config_dict, 'tags', []) %}\n    {% set global_tags = elementary.safe_get_with_default(node_dict, 'tags', []) %}\n    {% set meta_tags = elementary.safe_get_with_default(meta_dict, 'tags', []) %}\n    {% set tags = elementary.union_lists(config_tags, global_tags) %}\n    {% set tags = elementary.union_lists(tags, meta_tags) %}\n\n    {% set parent_model_unique_ids = elementary.get_parent_model_unique_ids_from_test_node(node_dict) %}\n    {% set parent_model_nodes = elementary.get_nodes_by_unique_ids(parent_model_unique_ids) %}\n    {% set parent_models_owners = [] %}\n    {% set parent_models_tags = [] %}\n    {% for parent_model_node in parent_model_nodes %}\n        {% set flatten_parent_model_node = elementary.flatten_model(parent_model_node) %}\n        {% set parent_model_owner = flatten_parent_model_node.get('owner') %}\n        {% set parent_model_tags = flatten_parent_model_node.get('tags') %}\n        {% if parent_model_owner %}\n            {% do parent_models_owners.append(parent_model_owner) %}\n        {% endif %}\n        {% if parent_model_tags and parent_model_tags is sequence %}\n            {% do parent_models_tags.extend(parent_model_tags) %}\n        {% endif %}\n    {% endfor %}\n\n    {% set primary_parent_model_database, primary_parent_model_schema = elementary.get_model_database_and_schema_from_test_node(node_dict) %}\n    {% set test_metadata = elementary.safe_get_with_default(node_dict, 'test_metadata', {}) %}\n    {% set test_kwargs = elementary.safe_get_with_default(test_metadata, 'kwargs', {}) %}\n    {% set test_model_jinja = test_kwargs.get('model') %}\n    {%- if parent_model_unique_ids | length == 1 -%}\n        {# if only one parent model for this test, simply use this model #}\n        {% set primary_parent_model_id = parent_model_unique_ids[0] %}\n    {%- else -%}\n        {# if there are multiple parent models for a test, try finding it using the model jinja in the test graph node #}\n        {% set primary_parent_model_id = none %}\n        {% if test_model_jinja %}\n            {% set primary_parent_model_candidates = [] %}\n            {% for parent_model_unique_id in parent_model_unique_ids %}\n                {% set split_parent_model_unique_id = parent_model_unique_id.split('.') %}\n                {% if split_parent_model_unique_id and split_parent_model_unique_id | length > 0 %}\n                    {% set parent_model_name = split_parent_model_unique_id[-1] %}\n                    {% if parent_model_name and parent_model_name in test_model_jinja %}\n                        {% do primary_parent_model_candidates.append(parent_model_unique_id) %}\n                    {% endif %}\n                {% endif %}\n            {% endfor %}\n            {% if primary_parent_model_candidates | length == 1 %}\n                {% set primary_parent_model_id = primary_parent_model_candidates[0] %}\n            {% endif %}\n        {% endif %}\n    {%- endif -%}\n\n    {% set original_file_path = node_dict.get('original_file_path') %}\n    {% set flatten_test_metadata_dict = {\n        'unique_id': node_dict.get('unique_id'),\n        'short_name': test_metadata.get('name'),\n        'alias': node_dict.get('alias'),\n        'test_column_name': node_dict.get('column_name'),\n        'severity': config_dict.get('severity'),\n        'warn_if': config_dict.get('warn_if'),\n        'error_if': config_dict.get('error_if'),\n        'test_params': test_kwargs,\n        'test_namespace': test_metadata.get('namespace'),\n        'tags': tags,\n        'model_tags': parent_models_tags,\n        'model_owners': parent_models_owners,\n        'meta': meta_dict,\n        'database_name': primary_parent_model_database,\n        'schema_name': primary_parent_model_schema,\n        'depends_on_macros': depends_on_dict.get('macros', []),\n        'depends_on_nodes': depends_on_dict.get('nodes', []),\n        'parent_model_unique_id': primary_parent_model_id,\n        'description': node_dict.get('description'),\n        'name': node_dict.get('name'),\n        'package_name': node_dict.get('package_name'),\n        'type': elementary.get_test_type(original_file_path),\n        'original_path': original_file_path,\n        'compiled_sql': node_dict.get('compiled_sql'),\n        'path': node_dict.get('path'),\n        'generated_at': run_started_at.strftime('%Y-%m-%d %H:%M:%S')\n    }%}\n    {{ return(flatten_test_metadata_dict) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.safe_get_with_default", "macro.elementary.union_lists", "macro.elementary.get_parent_model_unique_ids_from_test_node", "macro.elementary.get_nodes_by_unique_ids", "macro.elementary.flatten_model", "macro.elementary.get_model_database_and_schema_from_test_node", "macro.elementary.get_test_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.972579}, "macro.elementary.get_test_type": {"unique_id": "macro.elementary.get_test_type", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_tests.sql", "name": "get_test_type", "macro_sql": "{% macro get_test_type(test_path) %}\n    {% set test_type = 'generic' %}\n    {%- if 'tests/generic' in test_path or 'macros/' in test_path -%}\n        {% set test_type = 'generic' %}\n    {%- elif 'tests/' in test_path -%}\n        {% set test_type = 'singular' %}\n    {%- endif -%}\n    {{- return(test_type) -}}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.972924}, "macro.elementary.upload_dbt_exposures": {"unique_id": "macro.elementary.upload_dbt_exposures", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_exposures.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_exposures.sql", "name": "upload_dbt_exposures", "macro_sql": "{%- macro upload_dbt_exposures() -%}\n    {% set edr_cli_run = elementary.get_config_var('edr_cli_run') %}\n    {% if execute and not edr_cli_run %}\n        {% set exposures = graph.exposures.values() | selectattr('resource_type', '==', 'exposure') %}\n        {% do elementary.upload_artifacts_to_table(this, exposures, elementary.get_flatten_exposure_callback()) %}\n    {%- endif -%}\n    {{- return('') -}}\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.upload_artifacts_to_table", "macro.elementary.get_flatten_exposure_callback"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.975947}, "macro.elementary.get_dbt_exposures_empty_table_query": {"unique_id": "macro.elementary.get_dbt_exposures_empty_table_query", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_exposures.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_exposures.sql", "name": "get_dbt_exposures_empty_table_query", "macro_sql": "{% macro get_dbt_exposures_empty_table_query() %}\n    {% set dbt_exposures_empty_table_query = elementary.empty_table([('unique_id', 'string'),\n                                                                     ('name', 'string'),\n                                                                     ('maturity', 'string'),\n                                                                     ('type', 'string'),\n                                                                     ('owner_email', 'string'),\n                                                                     ('owner_name', 'string'),\n                                                                     ('url', 'long_string'),\n                                                                     ('depends_on_macros', 'long_string'),\n                                                                     ('depends_on_nodes', 'long_string'),\n                                                                     ('description', 'long_string'),\n                                                                     ('tags', 'long_string'),\n                                                                     ('meta', 'long_string'),\n                                                                     ('package_name', 'string'),\n                                                                     ('original_path', 'long_string'),\n                                                                     ('path', 'string'),\n                                                                     ('generated_at', 'string')]) %}\n    {{ return(dbt_exposures_empty_table_query) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.9766881}, "macro.elementary.get_flatten_exposure_callback": {"unique_id": "macro.elementary.get_flatten_exposure_callback", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_exposures.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_exposures.sql", "name": "get_flatten_exposure_callback", "macro_sql": "\n\n{%- macro get_flatten_exposure_callback() -%}\n    {{- return(adapter.dispatch('flatten_exposure', 'elementary')) -}}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.flatten_exposure", "macro.elementary.default__flatten_exposure"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.9768288}, "macro.elementary.flatten_exposure": {"unique_id": "macro.elementary.flatten_exposure", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_exposures.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_exposures.sql", "name": "flatten_exposure", "macro_sql": "{%- macro flatten_exposure(node_dict) -%}\n    {{- return(adapter.dispatch('flatten_exposure', 'elementary')(node_dict)) -}}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.default__flatten_exposure"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.97699}, "macro.elementary.default__flatten_exposure": {"unique_id": "macro.elementary.default__flatten_exposure", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/dbt_artifacts/upload_dbt_exposures.sql", "original_file_path": "macros/edr/dbt_artifacts/upload_dbt_exposures.sql", "name": "default__flatten_exposure", "macro_sql": "{% macro default__flatten_exposure(node_dict) %}\n    {% set owner_dict = elementary.safe_get_with_default(node_dict, 'owner', {}) %}\n    {% set depends_on_dict = elementary.safe_get_with_default(node_dict, 'depends_on', {}) %}\n    {% set meta_dict = elementary.safe_get_with_default(node_dict, 'meta', {}) %}\n    {% set tags = elementary.safe_get_with_default(node_dict, 'tags', []) %}\n    {% set flatten_exposure_metadata_dict = {\n        'unique_id': node_dict.get('unique_id'),\n        'name': node_dict.get('name'),\n        'maturity': node_dict.get('maturity'),\n        'type': node_dict.get('type'),\n        'owner_email': owner_dict.get('email'),\n        'owner_name': owner_dict.get('name'),\n        'url': node_dict.get('url'),\n        'depends_on_macros': depends_on_dict.get('macros', []),\n        'depends_on_nodes': depends_on_dict.get('nodes', []),\n        'description': node_dict.get('description'),\n        'tags': tags,\n        'meta': meta_dict,\n        'package_name': node_dict.get('package_name'),\n        'original_path': node_dict.get('original_file_path'),\n        'path': node_dict.get('path'),\n        'generated_at': run_started_at.strftime('%Y-%m-%d %H:%M:%S')\n      }%}\n    {{ return(flatten_exposure_metadata_dict) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.safe_get_with_default"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.9782841}, "macro.elementary.get_anomaly_scores_query": {"unique_id": "macro.elementary.get_anomaly_scores_query", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/data_monitoring/anomaly_detection/get_anomaly_scores_query.sql", "original_file_path": "macros/edr/data_monitoring/anomaly_detection/get_anomaly_scores_query.sql", "name": "get_anomaly_scores_query", "macro_sql": "{% macro get_anomaly_scores_query(test_metrics_table_relation, full_monitored_table_name, sensitivity, backfill_days, monitors, column_name = none, columns_only=false) %}\n\n    {%- set global_min_bucket_end = elementary.get_global_min_bucket_end_as_datetime() %}\n    {%- set metrics_min_time = \"'\"~ (global_min_bucket_end - modules.datetime.timedelta(backfill_days)).strftime(\"%Y-%m-%d 00:00:00\") ~\"'\" %}\n    {%- set backfill_period = \"'-\" ~ backfill_days ~ \"'\" %}\n    {%- set test_execution_id = elementary.get_test_execution_id() %}\n    {%- set test_unique_id = elementary.get_test_unique_id() %}\n\n    {% set anomaly_scores_query %}\n\n        with data_monitoring_metrics as (\n\n            select * from {{ ref('data_monitoring_metrics') }}\n            {# We use bucket_end because non-timestamp tests have only bucket_end field. #}\n            where bucket_end > {{ elementary.cast_as_timestamp(metrics_min_time) }}\n                and upper(full_table_name) = upper('{{ full_monitored_table_name }}')\n                and metric_name in {{ elementary.strings_list_to_tuple(monitors) }}\n                {%- if column_name %}\n                    and upper(column_name) = upper('{{ column_name }}')\n                {%- endif %}\n                {%- if columns_only %}\n                    and column_name is not null\n                {%- endif %}\n\n        ),\n\n\n        union_metrics as (\n\n            select * from data_monitoring_metrics\n            union all\n            select * from {{ test_metrics_table_relation }}\n\n        ),\n\n        grouped_metrics_duplicates as (\n\n            select\n                *,\n                row_number() over (partition by id order by updated_at desc) as row_number\n            from union_metrics\n\n        ),\n\n        grouped_metrics as (\n\n            select\n                id as metric_id,\n                full_table_name,\n                column_name,\n                metric_name,\n                metric_value,\n                source_value,\n                bucket_start,\n                bucket_end,\n                bucket_duration_hours,\n                updated_at\n            from grouped_metrics_duplicates\n            where row_number = 1\n\n        ),\n\n        daily_buckets as (\n\n            {{ elementary.daily_buckets_cte() }}\n\n        ),\n\n        time_window_aggregation as (\n\n            select\n                *,\n                avg(metric_value) over (partition by metric_name, full_table_name, column_name order by edr_daily_bucket asc rows between {{ elementary.get_config_var('days_back') }} preceding and current row) as training_avg,\n                stddev(metric_value) over (partition by metric_name, full_table_name, column_name order by edr_daily_bucket asc rows between {{ elementary.get_config_var('days_back') }} preceding and current row) as training_stddev,\n                count(metric_value) over (partition by metric_name, full_table_name, column_name order by edr_daily_bucket asc rows between {{ elementary.get_config_var('days_back') }} preceding and current row) as training_set_size,\n                last_value(bucket_end) over (partition by metric_name, full_table_name, column_name order by edr_daily_bucket asc rows between {{ elementary.get_config_var('days_back') }} preceding and current row) training_end,\n                first_value(bucket_end) over (partition by metric_name, full_table_name, column_name order by edr_daily_bucket asc rows between {{ elementary.get_config_var('days_back') }} preceding and current row) as training_start\n            from daily_buckets left join\n                grouped_metrics on (edr_daily_bucket = bucket_end)\n            {{ dbt_utils.group_by(11) }}\n\n        ),\n\n        anomaly_scores as (\n\n            select\n                {{ dbt_utils.surrogate_key([\n                 'metric_id',\n                 elementary.const_as_string(test_execution_id)\n                ]) }} as id,\n                metric_id,\n                {{ elementary.const_as_string(test_execution_id) }} as test_execution_id,\n                {{ elementary.const_as_string(test_unique_id) }} as test_unique_id,\n                {{ elementary.current_timestamp_column() }} as detected_at,\n                full_table_name,\n                column_name,\n                metric_name,\n                case\n                    when training_stddev = 0 then 0\n                    else (metric_value - training_avg) / (training_stddev)\n                end as anomaly_score,\n                {{ sensitivity }} as anomaly_score_threshold,\n                source_value as anomalous_value,\n                bucket_start,\n                bucket_end,\n                metric_value,\n                (-1) * {{ sensitivity }} * training_stddev + training_avg as min_metric_value,\n                {{ sensitivity }} * training_stddev + training_avg as max_metric_value,\n                training_avg,\n                training_stddev,\n                training_set_size,\n                training_start,\n                training_end\n            from time_window_aggregation\n            where\n                metric_value is not null\n              and training_avg is not null\n              and training_stddev is not null\n        )\n\n        select * from anomaly_scores\n\n    {% endset %}\n\n    {{ return(anomaly_scores_query) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_global_min_bucket_end_as_datetime", "macro.elementary.get_test_execution_id", "macro.elementary.get_test_unique_id", "macro.elementary.cast_as_timestamp", "macro.elementary.strings_list_to_tuple", "macro.elementary.daily_buckets_cte", "macro.elementary.get_config_var", "macro.dbt_utils.group_by", "macro.dbt_utils.surrogate_key", "macro.elementary.const_as_string", "macro.elementary.current_timestamp_column"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.982878}, "macro.elementary.row_count": {"unique_id": "macro.elementary.row_count", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/data_monitoring/monitors/table_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/table_monitors.sql", "name": "row_count", "macro_sql": "{% macro row_count() -%}\n    count(*)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.9830568}, "macro.elementary.max_length": {"unique_id": "macro.elementary.max_length", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "name": "max_length", "macro_sql": "{% macro max_length(column_name) -%}\n    max(length({{ column_name }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.983437}, "macro.elementary.min_length": {"unique_id": "macro.elementary.min_length", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "name": "min_length", "macro_sql": "{% macro min_length(column_name) -%}\n    min(length({{ column_name }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.983525}, "macro.elementary.average_length": {"unique_id": "macro.elementary.average_length", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "name": "average_length", "macro_sql": "{% macro average_length(column_name) -%}\n    avg(length({{ column_name }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.9836102}, "macro.elementary.missing_count": {"unique_id": "macro.elementary.missing_count", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "name": "missing_count", "macro_sql": "{% macro missing_count(column_name) %}\n    coalesce(sum(case when {{ column_name }} is null then 1 when trim({{ column_name }}, ' ') = '' then 1 when lower({{ column_name }}) = 'null' then 1 else 0 end), 0)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.983735}, "macro.elementary.missing_percent": {"unique_id": "macro.elementary.missing_percent", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "name": "missing_percent", "macro_sql": "{% macro missing_percent(column_name) %}\n    {{ elementary.percent(elementary.missing_count(column_name), elementary.row_count()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.percent", "macro.elementary.missing_count", "macro.elementary.row_count"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.9838989}, "macro.elementary.null_count": {"unique_id": "macro.elementary.null_count", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/data_monitoring/monitors/column_any_type_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_any_type_monitors.sql", "name": "null_count", "macro_sql": "{% macro null_count(column_name) %}\n    coalesce(sum(case when {{ column_name }} is null then 1 else 0 end), 0)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.984134}, "macro.elementary.null_percent": {"unique_id": "macro.elementary.null_percent", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/data_monitoring/monitors/column_any_type_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_any_type_monitors.sql", "name": "null_percent", "macro_sql": "{% macro null_percent(column_name) %}\n    {{ elementary.percent(elementary.null_count(column_name), elementary.row_count()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.percent", "macro.elementary.null_count", "macro.elementary.row_count"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.984299}, "macro.elementary.max": {"unique_id": "macro.elementary.max", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "name": "max", "macro_sql": "{% macro max(column_name) -%}\n    max(cast({{ column_name }} as {{ dbt_utils.type_float() }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.984936}, "macro.elementary.min": {"unique_id": "macro.elementary.min", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "name": "min", "macro_sql": "{% macro min(column_name) -%}\n    min(cast({{ column_name }} as {{ dbt_utils.type_float() }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.985057}, "macro.elementary.average": {"unique_id": "macro.elementary.average", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "name": "average", "macro_sql": "{% macro average(column_name) -%}\n    avg(cast({{ column_name }} as {{ dbt_utils.type_float() }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.985179}, "macro.elementary.zero_count": {"unique_id": "macro.elementary.zero_count", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "name": "zero_count", "macro_sql": "{% macro zero_count(column_name) %}\n    coalesce(sum(case when {{ column_name }} is null then 1 when cast({{ column_name }} as {{ dbt_utils.type_float() }}) = 0 then 1 else 0 end), 0)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.985321}, "macro.elementary.zero_percent": {"unique_id": "macro.elementary.zero_percent", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "name": "zero_percent", "macro_sql": "{% macro zero_percent(column_name) %}\n    {{ elementary.percent(elementary.zero_count(column_name), elementary.row_count()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.percent", "macro.elementary.zero_count", "macro.elementary.row_count"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.985549}, "macro.elementary.standard_deviation": {"unique_id": "macro.elementary.standard_deviation", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "name": "standard_deviation", "macro_sql": "{% macro standard_deviation(column_name) -%}\n    stddev(cast({{ column_name }} as {{ dbt_utils.type_float() }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.985674}, "macro.elementary.variance": {"unique_id": "macro.elementary.variance", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "name": "variance", "macro_sql": "{% macro variance(column_name) -%}\n    variance(cast({{ column_name }} as {{ dbt_utils.type_float() }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.9857972}, "macro.elementary.schemas_to_alert_on_new_tables": {"unique_id": "macro.elementary.schemas_to_alert_on_new_tables", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/data_monitoring/schema_changes/schemas_to_alert_on_new_tables.sql", "original_file_path": "macros/edr/data_monitoring/schema_changes/schemas_to_alert_on_new_tables.sql", "name": "schemas_to_alert_on_new_tables", "macro_sql": "{% macro schemas_to_alert_on_new_tables() %}\n    {%- set schemas_list = elementary.get_config_var('schemas_to_alert_on_new_tables') %}\n    {%- set upper_schemas_list = [] %}\n    {%- for schema in schemas_list %}\n        {%- do upper_schemas_list.append(schema.upper()) %}\n    {%- endfor %}\n    {%- set alert_on_schema_changes = elementary.strings_list_to_tuple(upper_schemas_list) %}\n    {{- return(alert_on_schema_changes) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.strings_list_to_tuple"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.9863338}, "macro.elementary.get_schema_changes_test_query": {"unique_id": "macro.elementary.get_schema_changes_test_query", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/data_monitoring/schema_changes/get_schema_changes_test_query.sql", "original_file_path": "macros/edr/data_monitoring/schema_changes/get_schema_changes_test_query.sql", "name": "get_schema_changes_test_query", "macro_sql": "{% macro get_schema_changes_test_query(full_table_name, last_schema_changes_time=none) %}\n    {%- set test_execution_id = elementary.get_test_execution_id() %}\n    {%- set test_unique_id = elementary.get_test_unique_id() %}\n\n    {%- set schema_changes_test_query %}\n        with column_changes as (\n\n            select * from {{ ref('column_changes') }}\n            where {{ elementary.full_table_name() }} = upper('{{ full_table_name }}')\n\n        ),\n\n        column_changes_test_results as (\n\n            select\n                change_id as data_issue_id,\n                detected_at,\n                database_name,\n                schema_name,\n                table_name,\n                column_name,\n                'schema_change' as test_type,\n                change as test_sub_type,\n                change_description as test_results_description\n            from column_changes\n\n        ),\n\n        all_test_results_with_test_execution_id as (\n            select {{ dbt_utils.surrogate_key([\n                     'data_issue_id',\n                     elementary.const_as_string(test_execution_id)\n                    ]) }} as id,\n                    {{ elementary.const_as_string(test_execution_id) }} as test_execution_id,\n                    {{ elementary.const_as_string(test_unique_id) }} as test_unique_id,\n                    *\n            from column_changes_test_results\n        )\n\n        select * from all_test_results_with_test_execution_id\n        {%- if last_schema_changes_time %}\n            where detected_at > {{ elementary.cast_as_timestamp(elementary.const_as_string(last_schema_changes_time)) }}\n        {%- endif %}\n    {%- endset %}\n    {{ return(schema_changes_test_query) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_test_execution_id", "macro.elementary.get_test_unique_id", "macro.elementary.full_table_name", "macro.dbt_utils.surrogate_key", "macro.elementary.const_as_string", "macro.elementary.cast_as_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.987715}, "macro.elementary.get_last_schema_changes_time": {"unique_id": "macro.elementary.get_last_schema_changes_time", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/data_monitoring/schema_changes/get_last_schema_changes_time.sql", "original_file_path": "macros/edr/data_monitoring/schema_changes/get_last_schema_changes_time.sql", "name": "get_last_schema_changes_time", "macro_sql": "{% macro get_last_schema_changes_time() %}\n    -- depends_on: {{ ref('elementary_test_results') }}\n    {%- if execute -%}\n        {%- set last_schema_changes_time_query %}\n            select max(detected_at) as last_alert_time\n            from {{ ref('elementary_test_results') }}\n            where test_type = 'schema_change' and test_sub_type != 'table_added'\n        {%- endset %}\n\n        {%- set last_schema_changes_query_result = elementary.result_value(last_schema_changes_time_query) %}\n\n        {%- if last_schema_changes_query_result %}\n            {{ return(last_schema_changes_query_result) }}\n        {%- else %}\n            {{ return(none) }}\n        {%- endif %}\n    {%- endif -%}\n    {{- return(none) -}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.result_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.9884229}, "macro.elementary.column_monitoring_query": {"unique_id": "macro.elementary.column_monitoring_query", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/data_monitoring/monitors_query/column_monitoring_query.sql", "original_file_path": "macros/edr/data_monitoring/monitors_query/column_monitoring_query.sql", "name": "column_monitoring_query", "macro_sql": "{% macro column_monitoring_query(monitored_table_relation, timestamp_column, is_timestamp, min_bucket_start, column_obj, column_monitors) %}\n\n    {%- set max_bucket_end = \"'\"~ elementary.get_run_started_at().strftime(\"%Y-%m-%d 00:00:00\")~\"'\" %}\n    {%- set full_table_name_str = \"'\"~ elementary.relation_to_full_name(monitored_table_relation) ~\"'\" -%}\n\n    with filtered_monitored_table as (\n\n        select {{ column_obj.quoted }}\n            {% if is_timestamp -%}\n             , {{ elementary.date_trunc('day', timestamp_column) }} as edr_bucket\n            {%- else %}\n            , {{ elementary.null_timestamp() }} as edr_bucket\n            {%- endif %}\n        from {{ monitored_table_relation }}\n        where\n        {% if is_timestamp -%}\n            {{ elementary.cast_as_timestamp(timestamp_column) }} >= {{ elementary.cast_as_timestamp(min_bucket_start) }}\n            and {{ elementary.cast_as_timestamp(timestamp_column) }} <= {{ elementary.cast_as_timestamp(max_bucket_end) }}\n        {%- else %}\n            true\n        {%- endif %}\n\n    ),\n\n    column_monitors as (\n\n        {%- if column_monitors %}\n            {%- set column = column_obj.quoted -%}\n                select\n                    edr_bucket,\n                    {{ elementary.const_as_string(column_obj.name) }} as edr_column_name,\n                    {%- if 'null_count' in column_monitors -%} {{ elementary.null_count(column) }} {%- else -%} null {% endif %} as null_count,\n                    {%- if 'null_percent' in column_monitors -%} {{ elementary.null_percent(column) }} {%- else -%} null {% endif %} as null_percent,\n                    {%- if 'max' in column_monitors -%} {{ elementary.max(column) }} {%- else -%} null {% endif %} as max,\n                    {%- if 'min' in column_monitors -%} {{ elementary.min(column) }} {%- else -%} null {% endif %} as min,\n                    {%- if 'average' in column_monitors -%} {{ elementary.average(column) }} {%- else -%} null {% endif %} as average,\n                    {%- if 'zero_count' in column_monitors -%} {{ elementary.zero_count(column) }} {%- else -%} null {% endif %} as zero_count,\n                    {%- if 'zero_percent' in column_monitors -%} {{ elementary.zero_percent(column) }} {%- else -%} null {% endif %} as zero_percent,\n                    {%- if 'standard_deviation' in column_monitors -%} {{ elementary.standard_deviation(column) }} {%- else -%} null {% endif %} as standard_deviation,\n                    {%- if 'variance' in column_monitors -%} {{ elementary.variance(column) }} {%- else -%} null {% endif %} as variance,\n                    {%- if 'max_length' in column_monitors -%} {{ elementary.max_length(column) }} {%- else -%} null {% endif %} as max_length,\n                    {%- if 'min_length' in column_monitors -%} {{ elementary.min_length(column) }} {%- else -%} null {% endif %} as min_length,\n                    {%- if 'average_length' in column_monitors -%} {{ elementary.average_length(column) }} {%- else -%} null {% endif %} as average_length,\n                    {%- if 'missing_count' in column_monitors -%} {{ elementary.missing_count(column) }} {%- else -%} null {% endif %} as missing_count,\n                    {%- if 'missing_percent' in column_monitors -%} {{ elementary.missing_percent(column) }} {%- else -%} null {% endif %} as missing_percent\n                from filtered_monitored_table\n                group by 1,2\n        {%- else %}\n            {{ elementary.empty_column_monitors_cte() }}\n        {%- endif %}\n\n    ),\n\n    column_monitors_unpivot as (\n\n        {%- if column_monitors %}\n            {% for monitor in column_monitors %}\n                select edr_column_name, edr_bucket, {{ elementary.cast_as_string(\"'\"~ monitor ~\"'\") }} as metric_name, {{ elementary.cast_as_float(monitor) }} as metric_value from column_monitors where {{ monitor }} is not null\n                {% if not loop.last %} union all {% endif %}\n            {%- endfor %}\n        {%- else %}\n            {{ elementary.empty_column_unpivot_cte() }}\n        {%- endif %}\n\n    ),\n\n    metrics_final as (\n\n        select\n            {{ elementary.cast_as_string(full_table_name_str) }} as full_table_name,\n            edr_column_name as column_name,\n            metric_name,\n            {{ elementary.cast_as_float('metric_value') }} as metric_value,\n            {{ elementary.null_string() }} as source_value,\n            {%- if is_timestamp %}\n                edr_bucket as bucket_start,\n                {{ elementary.timeadd('day',1,'edr_bucket') }} as bucket_end,\n                24 as bucket_duration_hours\n            {%- else %}\n                {{ elementary.null_timestamp() }} as bucket_start,\n                {{ elementary.cast_as_timestamp(max_bucket_end) }} as bucket_end,\n                {{ elementary.null_int() }} as bucket_duration_hours\n            {%- endif %}\n        from column_monitors_unpivot\n\n    )\n\n    select\n        {{ dbt_utils.surrogate_key([\n            'full_table_name',\n            'column_name',\n            'metric_name',\n            'bucket_end'\n        ]) }} as id,\n        full_table_name,\n        column_name,\n        metric_name,\n        metric_value,\n        source_value,\n        bucket_start,\n        bucket_end,\n        bucket_duration_hours,\n        {{- dbt_utils.current_timestamp_in_utc() -}} as updated_at\n    from metrics_final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_run_started_at", "macro.elementary.relation_to_full_name", "macro.elementary.date_trunc", "macro.elementary.null_timestamp", "macro.elementary.cast_as_timestamp", "macro.elementary.const_as_string", "macro.elementary.null_count", "macro.elementary.null_percent", "macro.elementary.max", "macro.elementary.min", "macro.elementary.average", "macro.elementary.zero_count", "macro.elementary.zero_percent", "macro.elementary.standard_deviation", "macro.elementary.variance", "macro.elementary.max_length", "macro.elementary.min_length", "macro.elementary.average_length", "macro.elementary.missing_count", "macro.elementary.missing_percent", "macro.elementary.empty_column_monitors_cte", "macro.elementary.cast_as_string", "macro.elementary.cast_as_float", "macro.elementary.empty_column_unpivot_cte", "macro.elementary.null_string", "macro.elementary.timeadd", "macro.elementary.null_int", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072920.999142}, "macro.elementary.table_monitoring_query": {"unique_id": "macro.elementary.table_monitoring_query", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "original_file_path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "name": "table_monitoring_query", "macro_sql": "{% macro table_monitoring_query(monitored_table_relation, timestamp_column, is_timestamp, min_bucket_start, table_monitors, freshness_column=none) %}\n\n    {%- set max_bucket_end = \"'\"~ elementary.get_run_started_at().strftime(\"%Y-%m-%d 00:00:00\")~\"'\" %}\n    {%- set max_bucket_start = \"'\"~ (run_started_at - modules.datetime.timedelta(1)).strftime(\"%Y-%m-%d 00:00:00\")~\"'\" %}\n    {% set full_table_name_str = \"'\"~ elementary.relation_to_full_name(monitored_table_relation) ~\"'\" %}\n\n    {% if is_timestamp %}\n        with filtered_monitored_table as (\n            select *,\n                   {{ elementary.date_trunc('day', timestamp_column) }} as start_bucket_in_data\n            from {{ monitored_table_relation }}\n            where\n                {{ elementary.cast_as_timestamp(timestamp_column) }} >= {{ elementary.cast_as_timestamp(min_bucket_start) }}\n                and {{ elementary.cast_as_timestamp(timestamp_column) }} <= {{ elementary.cast_as_timestamp(max_bucket_end) }}\n        ),\n\n        daily_buckets as (\n            {{ elementary.daily_buckets_cte() }}\n            where edr_daily_bucket >= {{ elementary.cast_as_timestamp(min_bucket_start) }} and\n                  edr_daily_bucket <= {{ elementary.cast_as_timestamp(max_bucket_start) }} and\n                  edr_daily_bucket >= (select min(start_bucket_in_data) from filtered_monitored_table)\n        ),\n\n        {%- if 'row_count' in table_monitors %}\n\n        daily_row_count as (\n            select edr_daily_bucket,\n                   start_bucket_in_data,\n                   case when start_bucket_in_data is null then\n                       0\n                   else {{ elementary.cast_as_float(elementary.row_count()) }} end as row_count_value\n            from daily_buckets left join filtered_monitored_table on (edr_daily_bucket = start_bucket_in_data)\n            group by 1,2\n        ),\n\n        row_count as (\n            select edr_daily_bucket as edr_bucket,\n                   {{ elementary.const_as_string('row_count') }} as metric_name,\n                   {{ elementary.null_string() }} as source_value,\n                   row_count_value as metric_value\n            from daily_row_count\n        ),\n\n        {%- else %}\n\n        row_count as (\n            {{ elementary.empty_table([('edr_bucket','timestamp'),('metric_name','string'),('source_value','string'),('metric_value','int')]) }}\n        ),\n\n        {%- endif %}\n\n        table_freshness as (\n        {%- if 'freshness' in table_monitors %}\n            {%- if freshness_column is undefined or freshness_column is none %}\n                {%- set freshness_column = timestamp_column %}\n            {%- endif %}\n            select\n                edr_daily_bucket as edr_bucket,\n                {{ elementary.const_as_string('freshness') }} as metric_name,\n                {{ elementary.to_char('max('~freshness_column~')') }} as source_value,\n                {{ elementary.timediff('second', elementary.cast_as_timestamp('max('~freshness_column~')'), elementary.timeadd('day','1','edr_daily_bucket')) }} as metric_value\n            from daily_buckets, {{ monitored_table_relation }}\n            where {{ elementary.cast_as_timestamp(timestamp_column) }} <= {{ elementary.timeadd('day','1','edr_daily_bucket') }}\n            group by 1,2\n        {%- else %}\n            {{ elementary.empty_table([('edr_bucket','timestamp'),('metric_name','string'),('source_value','string'),('metric_value','int')]) }}\n        {%- endif %}\n        ),\n\n        union_metrics as (\n\n        select * from row_count\n        union all\n        select * from table_freshness\n\n        ),\n\n        metrics_final as (\n\n        select\n            {{ elementary.cast_as_string(full_table_name_str) }} as full_table_name,\n            {{ elementary.null_string() }} as column_name,\n            metric_name,\n            {{ elementary.cast_as_float('metric_value') }} as metric_value,\n            source_value,\n            edr_bucket as bucket_start,\n            {{ elementary.timeadd('day',1,'edr_bucket') }} as bucket_end,\n            24 as bucket_duration_hours\n        from\n            union_metrics\n        where (metric_value is not null and cast(metric_value as {{ dbt_utils.type_int() }}) < {{ elementary.get_config_var('max_int') }}) or\n            metric_value is null\n        )\n    {% else %}\n        with row_count as (\n            {%- if 'row_count' in table_monitors %}\n                select\n                    {{ elementary.const_as_string('row_count') }} as metric_name,\n                    {{ elementary.row_count() }} as metric_value\n                from {{ monitored_table_relation }}\n                group by 1\n            {%- else %}\n                {{ elementary.empty_table([('metric_name','string'),('metric_value','int')]) }}\n            {%- endif %}\n        ),\n\n        metrics_final as (\n\n        select\n            {{ elementary.cast_as_string(full_table_name_str) }} as full_table_name,\n            {{ elementary.null_string() }} as column_name,\n            metric_name,\n            {{ elementary.cast_as_float('metric_value') }} as metric_value,\n            {{ elementary.null_string() }} as source_value,\n            {{ elementary.null_timestamp() }} as bucket_start,\n            {{ elementary.cast_as_timestamp(max_bucket_end) }} as bucket_end,\n            {{ elementary.null_int() }} as bucket_duration_hours\n        from row_count\n\n        )\n    {% endif %}\n\n    select\n        {{ dbt_utils.surrogate_key([\n            'full_table_name',\n            'column_name',\n            'metric_name',\n            'bucket_end'\n        ]) }} as id,\n        full_table_name,\n        column_name,\n        metric_name,\n        metric_value,\n        source_value,\n        bucket_start,\n        bucket_end,\n        bucket_duration_hours,\n        {{- dbt_utils.current_timestamp_in_utc() -}} as updated_at\n\n    from metrics_final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_run_started_at", "macro.elementary.relation_to_full_name", "macro.elementary.date_trunc", "macro.elementary.cast_as_timestamp", "macro.elementary.daily_buckets_cte", "macro.elementary.cast_as_float", "macro.elementary.row_count", "macro.elementary.const_as_string", "macro.elementary.null_string", "macro.elementary.empty_table", "macro.elementary.to_char", "macro.elementary.timediff", "macro.elementary.timeadd", "macro.elementary.cast_as_string", "macro.dbt_utils.type_int", "macro.elementary.get_config_var", "macro.elementary.null_timestamp", "macro.elementary.null_int", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.006901}, "macro.elementary.get_column_obj_and_monitors": {"unique_id": "macro.elementary.get_column_obj_and_monitors", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "name": "get_column_obj_and_monitors", "macro_sql": "{% macro get_column_obj_and_monitors(model_relation, column_name, column_tests=none) %}\n\n    {%- set column_obj_and_monitors = [] %}\n    {%- set column_objects = adapter.get_columns_in_relation(model_relation) -%}\n\n    {%- for column_obj in column_objects %}\n        {% if column_obj.name | lower == column_name | lower %}\n            {%- set column_monitors = elementary.column_monitors_by_type(column_obj.dtype, column_tests) %}\n            {%- set column_item = {'column': column_obj, 'monitors': column_monitors} %}\n            {{ return(column_item) }}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(none) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.column_monitors_by_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.008779}, "macro.elementary.get_all_column_obj_and_monitors": {"unique_id": "macro.elementary.get_all_column_obj_and_monitors", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "name": "get_all_column_obj_and_monitors", "macro_sql": "{% macro get_all_column_obj_and_monitors(model_relation, column_tests=none) %}\n\n    {%- set column_obj_and_monitors = [] %}\n    {%- set column_objects = adapter.get_columns_in_relation(model_relation) -%}\n\n    {%- for column_obj in column_objects %}\n        {%- set column_monitors = elementary.column_monitors_by_type(column_obj.dtype, column_tests) %}\n        {%- set column_item = {'column': column_obj, 'monitors': column_monitors} %}\n        {%- do column_obj_and_monitors.append(column_item) -%}\n    {% endfor %}\n\n    {{ return(column_obj_and_monitors) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.column_monitors_by_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.0092611}, "macro.elementary.column_monitors_by_type": {"unique_id": "macro.elementary.column_monitors_by_type", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "name": "column_monitors_by_type", "macro_sql": "{% macro column_monitors_by_type(data_type, column_tests=none) %}\n\n    {%- set normalized_data_type = elementary.normalize_data_type(data_type) %}\n\n    {%- set default_all_types = elementary.get_config_var('edr_monitors')['column_any_type'] | list %}\n    {%- set default_numeric_monitors = elementary.get_config_var('edr_monitors')['column_numeric'] | list %}\n    {%- set default_string_monitors = elementary.get_config_var('edr_monitors')['column_string'] | list %}\n\n    {# if column_tests is null, default is to use all relevant monitors for this data type #}\n    {%- if column_tests %}\n        {%- set monitors_list = column_tests %}\n    {%- else %}\n        {% set monitors_list = [] %}\n        {% do monitors_list.extend(default_all_types) %}\n        {% do monitors_list.extend(default_numeric_monitors) %}\n        {% do monitors_list.extend(default_string_monitors) %}\n    {%- endif %}\n\n    {%- set column_monitors = [] %}\n    {%- set all_types_intersect = elementary.lists_intersection(monitors_list, default_all_types) %}\n    {% do column_monitors.extend(all_types_intersect) %}\n\n    {%- if normalized_data_type == 'numeric' %}\n        {%- set numeric_intersect = elementary.lists_intersection(monitors_list, default_numeric_monitors) %}\n        {% do column_monitors.extend(numeric_intersect) %}\n    {%- endif %}\n\n    {%- if normalized_data_type == 'string' %}\n        {%- set string_intersect = elementary.lists_intersection(monitors_list, default_string_monitors) %}\n        {% do column_monitors.extend(string_intersect) %}\n    {%- endif %}\n\n    {{ return(column_monitors) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.normalize_data_type", "macro.elementary.get_config_var", "macro.elementary.lists_intersection"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.010445}, "macro.elementary.all_column_monitors": {"unique_id": "macro.elementary.all_column_monitors", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "name": "all_column_monitors", "macro_sql": "{% macro all_column_monitors() %}\n    {%- set all_column_monitors = [] %}\n    {%- set numeric = elementary.get_config_var('edr_monitors')['column_numeric'] %}\n    {%- do all_column_monitors.extend(elementary.get_config_var('edr_monitors')['column_any_type']) -%}\n    {%- do all_column_monitors.extend(elementary.get_config_var('edr_monitors')['column_string']) -%}\n    {%- do all_column_monitors.extend(elementary.get_config_var('edr_monitors')['column_numeric']) -%}\n    {{ return(all_column_monitors) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.010937}, "macro.elementary.get_final_table_monitors": {"unique_id": "macro.elementary.get_final_table_monitors", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_table_monitors.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_table_monitors.sql", "name": "get_final_table_monitors", "macro_sql": "{% macro get_final_table_monitors(table_anomalies=none) %}\n    {%- set final_table_monitors = [] %}\n    {%- set default_table_monitors = elementary.get_default_table_monitors() %}\n\n    {%- if table_anomalies and table_anomalies | length > 0 %}\n        {%- set final_table_monitors = elementary.lists_intersection(table_anomalies, default_table_monitors) %}\n    {%- else %}\n        {%- set final_table_monitors = default_table_monitors %}\n    {%- endif %}\n    {# schema_changes is a different flow #}\n    {% if 'schema_changes' in final_table_monitors %}\n        {%- do final_table_monitors.remove('schema_changes') %}\n    {% endif %}\n    {{ return(final_table_monitors) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_default_table_monitors", "macro.elementary.lists_intersection"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.011706}, "macro.elementary.get_default_table_monitors": {"unique_id": "macro.elementary.get_default_table_monitors", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_table_monitors.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_table_monitors.sql", "name": "get_default_table_monitors", "macro_sql": "{% macro get_default_table_monitors() %}\n\n    {%- set default_table_monitors = elementary.get_config_var('edr_monitors')['table'] | list %}\n    {{ return(default_table_monitors) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.011899}, "macro.elementary.get_global_min_bucket_start": {"unique_id": "macro.elementary.get_global_min_bucket_start", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "name": "get_global_min_bucket_start", "macro_sql": "{% macro get_global_min_bucket_start() %}\n    {%- set global_min_bucket_start = \"'\"~ (run_started_at - modules.datetime.timedelta(elementary.get_config_var('days_back'))).strftime(\"%Y-%m-%d 00:00:00\") ~\"'\" %}\n    {{ return(global_min_bucket_start) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.0135}, "macro.elementary.get_global_min_bucket_start_as_datetime": {"unique_id": "macro.elementary.get_global_min_bucket_start_as_datetime", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "name": "get_global_min_bucket_start_as_datetime", "macro_sql": "{% macro get_global_min_bucket_start_as_datetime() %}\n    {%- set global_min_bucket_start = run_started_at - modules.datetime.timedelta(elementary.get_config_var('days_back')) %}\n    {{ return(global_min_bucket_start) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.013706}, "macro.elementary.get_global_min_bucket_end_as_datetime": {"unique_id": "macro.elementary.get_global_min_bucket_end_as_datetime", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "name": "get_global_min_bucket_end_as_datetime", "macro_sql": "{% macro get_global_min_bucket_end_as_datetime() %}\n    {%- set global_min_bucket_end = run_started_at - modules.datetime.timedelta(elementary.get_config_var('days_back') + 1) %}\n    {{ return(global_min_bucket_end) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.01392}, "macro.elementary.get_max_bucket_end": {"unique_id": "macro.elementary.get_max_bucket_end", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "name": "get_max_bucket_end", "macro_sql": "{% macro get_max_bucket_end() %}\n    {%- set max_bucket_end = \"'\"~ run_started_at.strftime(\"%Y-%m-%d 00:00:00\")~\"'\" %}\n    {{ return(max_bucket_end) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.0141}, "macro.elementary.get_backfill_bucket_start": {"unique_id": "macro.elementary.get_backfill_bucket_start", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "name": "get_backfill_bucket_start", "macro_sql": "{% macro get_backfill_bucket_start(backfill_days) %}\n    {%- set backfill_bucket_start = \"'\"~ (run_started_at - modules.datetime.timedelta(backfill_days)).strftime(\"%Y-%m-%d 00:00:00\") ~\"'\" %}\n    {{ return(backfill_bucket_start) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.0143318}, "macro.elementary.get_min_bucket_start": {"unique_id": "macro.elementary.get_min_bucket_start", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "name": "get_min_bucket_start", "macro_sql": "{% macro get_min_bucket_start(full_table_name, backfill_days, monitors=none, column_name=none) %}\n\n    {%- set global_min_bucket_start = elementary.get_global_min_bucket_start() %}\n    {%- set backfill_bucket_start = elementary.get_backfill_bucket_start(backfill_days) %}\n\n    {%- if monitors %}\n        {%- set monitors_tuple = elementary.strings_list_to_tuple(monitors) %}\n    {%- endif %}\n\n    {%- set min_bucket_start_query %}\n        with min_times as (\n            select min(last_bucket_end) as last_run,\n                {{ elementary.cast_as_timestamp(global_min_bucket_start) }} as global_min_start,\n                {{ elementary.cast_as_timestamp(backfill_bucket_start) }} as backfill_start\n            from {{ ref('monitors_runs') }}\n            where upper(full_table_name) = upper('{{ full_table_name }}')\n            {%- if monitors %}\n                and metric_name in {{ monitors_tuple }}\n            {%- endif %}\n            {%- if column_name %}\n                and upper(column_name) = upper('{{ column_name }}')\n            {%- endif %}\n            )\n        select\n            case\n                when last_run is null then global_min_start\n                when last_run < backfill_start then last_run\n                else backfill_start\n            end as min_start\n        from min_times\n    {%- endset %}\n\n    {%- set min_bucket_start_query_result = elementary.result_value(min_bucket_start_query) %}\n\n    {%- if min_bucket_start_query_result %}\n        {{ return(min_bucket_start_query_result) }}\n    {%- else %}\n        {{ return(global_min_bucket_start) }}\n    {%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_global_min_bucket_start", "macro.elementary.get_backfill_bucket_start", "macro.elementary.strings_list_to_tuple", "macro.elementary.cast_as_timestamp", "macro.elementary.result_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.015125}, "macro.elementary.get_is_column_timestamp": {"unique_id": "macro.elementary.get_is_column_timestamp", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_is_column_timestamp.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_is_column_timestamp.sql", "name": "get_is_column_timestamp", "macro_sql": "{% macro get_is_column_timestamp(table_relation,timestamp_column,timestamp_column_data_type) %}\n    {%- if timestamp_column_data_type == 'string' %}\n        {%- set is_timestamp = elementary.try_cast_column_to_timestamp(table_relation, timestamp_column) %}\n    {%- elif timestamp_column_data_type == 'timestamp' %}\n        {%- set is_timestamp = true %}\n    {%- else %}\n        {%- set is_timestamp = false %}\n    {%- endif %}\n    {{ return(is_timestamp) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.try_cast_column_to_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.01566}, "macro.elementary.percent": {"unique_id": "macro.elementary.percent", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/percent_query.sql", "original_file_path": "macros/utils/percent_query.sql", "name": "percent", "macro_sql": "{% macro percent(value, total) %}\n    round(cast({{ value }} as {{ dbt_utils.type_float() }}) / nullif(cast({{ total }} as {{ dbt_utils.type_float() }}), 0) * 100.0, 3)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.015981}, "macro.elementary.trim_quotes": {"unique_id": "macro.elementary.trim_quotes", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/trim_quotes.sql", "original_file_path": "macros/utils/trim_quotes.sql", "name": "trim_quotes", "macro_sql": "{% macro trim_quotes(column_to_trim) %}\n    trim({{ column_to_trim }},'\"')\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.016182}, "macro.elementary.target_database": {"unique_id": "macro.elementary.target_database", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/target_database.sql", "original_file_path": "macros/utils/cross_db_utils/target_database.sql", "name": "target_database", "macro_sql": "{% macro target_database() -%}\n    {{ return(adapter.dispatch('target_database', 'elementary')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.bigquery__target_database"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.0165582}, "macro.elementary.default__target_database": {"unique_id": "macro.elementary.default__target_database", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/target_database.sql", "original_file_path": "macros/utils/cross_db_utils/target_database.sql", "name": "default__target_database", "macro_sql": "{% macro default__target_database() %}\n    {% set database = target.dbname %}\n    {{ return(database) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.016704}, "macro.elementary.snowflake__target_database": {"unique_id": "macro.elementary.snowflake__target_database", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/target_database.sql", "original_file_path": "macros/utils/cross_db_utils/target_database.sql", "name": "snowflake__target_database", "macro_sql": "{% macro snowflake__target_database() %}\n    {% set database = target.database %}\n    {{ return(database) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.0168478}, "macro.elementary.bigquery__target_database": {"unique_id": "macro.elementary.bigquery__target_database", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/target_database.sql", "original_file_path": "macros/utils/cross_db_utils/target_database.sql", "name": "bigquery__target_database", "macro_sql": "{% macro bigquery__target_database() %}\n    {% set database = target.project %}\n    {{ return(database) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.017052}, "macro.elementary.quote_column": {"unique_id": "macro.elementary.quote_column", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/quote_column.sql", "original_file_path": "macros/utils/cross_db_utils/quote_column.sql", "name": "quote_column", "macro_sql": "{% macro quote_column(column_name) %}\n    {{ adapter.dispatch('quote_column','elementary')(column_name) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.default__quote_column"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.017395}, "macro.elementary.default__quote_column": {"unique_id": "macro.elementary.default__quote_column", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/quote_column.sql", "original_file_path": "macros/utils/cross_db_utils/quote_column.sql", "name": "default__quote_column", "macro_sql": "\n\n{%- macro default__quote_column(column_name) -%}\n    {% if adapter.quote(column_name[1:-1]) == column_name %}\n        {{ return(column_name) }}\n    {% else %}\n        {% set quoted_column = adapter.quote(column_name) %}\n        {{ return(quoted_column) }}\n    {% endif %}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.0177228}, "macro.elementary.to_char": {"unique_id": "macro.elementary.to_char", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/to_char.sql", "original_file_path": "macros/utils/cross_db_utils/to_char.sql", "name": "to_char", "macro_sql": "{% macro to_char(column, format) -%}\n    {{ return(adapter.dispatch('to_char', 'elementary')(column, format)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.bigquery__to_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.018215}, "macro.elementary.default__to_char": {"unique_id": "macro.elementary.default__to_char", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/to_char.sql", "original_file_path": "macros/utils/cross_db_utils/to_char.sql", "name": "default__to_char", "macro_sql": "{% macro default__to_char(column, format) %}\n    to_char({{ column }} {%- if format %}, '{{ format }}'){%- else %}){%- endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.0183868}, "macro.elementary.bigquery__to_char": {"unique_id": "macro.elementary.bigquery__to_char", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/to_char.sql", "original_file_path": "macros/utils/cross_db_utils/to_char.sql", "name": "bigquery__to_char", "macro_sql": "{% macro bigquery__to_char(column, format) %}\n    cast({{ column }} as STRING {%- if format %}FORMAT '{{ format }}'){%- else %}){%- endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.018553}, "macro.elementary.redshift__to_char": {"unique_id": "macro.elementary.redshift__to_char", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/to_char.sql", "original_file_path": "macros/utils/cross_db_utils/to_char.sql", "name": "redshift__to_char", "macro_sql": "{% macro redshift__to_char(column, format) %}\n    to_char({{ column }} {%- if format %}, '{{ format }}'){%- else %}, 'YYYY-MM-DD HH:MI:SS'){%- endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.01872}, "macro.elementary.timediff": {"unique_id": "macro.elementary.timediff", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/timediff.sql", "original_file_path": "macros/utils/cross_db_utils/timediff.sql", "name": "timediff", "macro_sql": "{% macro timediff(timepart, first_timestamp, second_timestamp) -%}\n    {{ return(adapter.dispatch('timediff', 'elementary')(timepart, first_timestamp, second_timestamp)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.bigquery__timediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.019124}, "macro.elementary.default__timediff": {"unique_id": "macro.elementary.default__timediff", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/timediff.sql", "original_file_path": "macros/utils/cross_db_utils/timediff.sql", "name": "default__timediff", "macro_sql": "{% macro default__timediff(timepart, first_timestamp, second_timestamp) %}\n    datediff({{ timepart }}, {{ first_timestamp }}, {{ second_timestamp }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.019265}, "macro.elementary.bigquery__timediff": {"unique_id": "macro.elementary.bigquery__timediff", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/timediff.sql", "original_file_path": "macros/utils/cross_db_utils/timediff.sql", "name": "bigquery__timediff", "macro_sql": "{% macro bigquery__timediff(timepart, first_timestamp, second_timestamp) %}\n    timestamp_diff({{ first_timestamp }}, {{ second_timestamp }}, {{ timepart }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.019404}, "macro.elementary.date_trunc": {"unique_id": "macro.elementary.date_trunc", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/date_trunc.sql", "original_file_path": "macros/utils/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(date_part, date_expression) -%}\n    {{ return(adapter.dispatch('date_trunc', 'elementary') (date_part, date_expression)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.0197902}, "macro.elementary.default__date_trunc": {"unique_id": "macro.elementary.default__date_trunc", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/date_trunc.sql", "original_file_path": "macros/utils/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(date_part, date_expression) %}\n    date_trunc('{{date_part}}', cast({{ date_expression }} as {{ dbt_utils.type_timestamp() }}))\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.019936}, "macro.elementary.bigquery__date_trunc": {"unique_id": "macro.elementary.bigquery__date_trunc", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/date_trunc.sql", "original_file_path": "macros/utils/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(date_part, date_expression) %}\n    timestamp_trunc(cast({{ date_expression }} as timestamp), {{ date_part }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.020052}, "macro.elementary.timeadd": {"unique_id": "macro.elementary.timeadd", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/timeadd.sql", "original_file_path": "macros/utils/cross_db_utils/timeadd.sql", "name": "timeadd", "macro_sql": "{% macro timeadd(date_part, number, timestamp_expression) -%}\n    {{ return(adapter.dispatch('timeadd', 'elementary')(date_part, number, timestamp_expression)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.bigquery__timeadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.020462}, "macro.elementary.default__timeadd": {"unique_id": "macro.elementary.default__timeadd", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/timeadd.sql", "original_file_path": "macros/utils/cross_db_utils/timeadd.sql", "name": "default__timeadd", "macro_sql": "{% macro default__timeadd(date_part, number, timestamp_expression) %}\n    dateadd({{ date_part }}, {{ number }}, {{ elementary.cast_as_timestamp(timestamp_expression) }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.cast_as_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.020631}, "macro.elementary.bigquery__timeadd": {"unique_id": "macro.elementary.bigquery__timeadd", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/timeadd.sql", "original_file_path": "macros/utils/cross_db_utils/timeadd.sql", "name": "bigquery__timeadd", "macro_sql": "{% macro bigquery__timeadd(date_part, number, timestamp_expression) %}\n    timestamp_add({{ elementary.cast_as_timestamp(timestamp_expression) }}, INTERVAL {{ number }} {{ date_part }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.cast_as_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.0207942}, "macro.elementary.try_cast_column_to_timestamp": {"unique_id": "macro.elementary.try_cast_column_to_timestamp", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/data_types/try_cast_column_to_timestamp.sql", "original_file_path": "macros/utils/data_types/try_cast_column_to_timestamp.sql", "name": "try_cast_column_to_timestamp", "macro_sql": "{% macro try_cast_column_to_timestamp(table_relation, timestamp_column) %}\n    {{ return(adapter.dispatch('try_cast_column_to_timestamp', 'elementary')(table_relation, timestamp_column)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.default__try_cast_column_to_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.021276}, "macro.elementary.default__try_cast_column_to_timestamp": {"unique_id": "macro.elementary.default__try_cast_column_to_timestamp", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/data_types/try_cast_column_to_timestamp.sql", "original_file_path": "macros/utils/data_types/try_cast_column_to_timestamp.sql", "name": "default__try_cast_column_to_timestamp", "macro_sql": "{% macro default__try_cast_column_to_timestamp(table_relation, timestamp_column) %}\n    {# We only try casting for snowflake and bigquery, as these support safe cast and the query will not fail if the cast fails #}\n    {%- set query %}\n        select {{ dbt_utils.safe_cast(timestamp_column, dbt_utils.type_timestamp()) }} as timestamp_column\n        from {{ table_relation }}\n        where {{ timestamp_column }} is not null\n        limit 1\n    {%- endset %}\n\n    {%- set result = elementary.result_value(query) %}\n    {%- if result is not none %}\n        {{ return(true) }}\n    {%- endif %}\n    {{ return(false) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_timestamp", "macro.elementary.result_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.021775}, "macro.elementary.redshift__try_cast_column_to_timestamp": {"unique_id": "macro.elementary.redshift__try_cast_column_to_timestamp", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/data_types/try_cast_column_to_timestamp.sql", "original_file_path": "macros/utils/data_types/try_cast_column_to_timestamp.sql", "name": "redshift__try_cast_column_to_timestamp", "macro_sql": "{% macro redshift__try_cast_column_to_timestamp(table_relation, timestamp_column) %}\n    {{ return(false) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.021896}, "macro.elementary.data_type_list": {"unique_id": "macro.elementary.data_type_list", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/data_types/data_type_list.sql", "original_file_path": "macros/utils/data_types/data_type_list.sql", "name": "data_type_list", "macro_sql": "{% macro data_type_list(data_type) %}\n    {% set result = adapter.dispatch('data_type_list','elementary')(data_type) %}\n    {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.bigquery__data_type_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.023427}, "macro.elementary.default__data_type_list": {"unique_id": "macro.elementary.default__data_type_list", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/data_types/data_type_list.sql", "original_file_path": "macros/utils/data_types/data_type_list.sql", "name": "default__data_type_list", "macro_sql": "{% macro default__data_type_list(data_type) %}\n\n    {% set string_list = ['character varying','varchar','character','char','text','nchar','bpchar','string'] | list %}\n    {% set numeric_list = ['integer', 'bigint','smallint','decimal','numeric','real','double precision','enum','int2','int4','int','int8','float8','float'] | list %}\n    {% set timestamp_list = ['date', 'timestamp','timestamptz','timestamp without time zone','timestamp with time zone'] | list %}\n\n    {%- if data_type == 'string' %}\n        {{ return(string_list) }}\n    {%- elif data_type == 'numeric' %}\n        {{ return(numeric_list) }}\n    {%- elif data_type == 'timestamp' %}\n        {{ return(timestamp_list) }}\n    {%- else %}\n        {{ return([]) }}\n    {%- endif %}\n\n    {% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.024225}, "macro.elementary.bigquery__data_type_list": {"unique_id": "macro.elementary.bigquery__data_type_list", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/data_types/data_type_list.sql", "original_file_path": "macros/utils/data_types/data_type_list.sql", "name": "bigquery__data_type_list", "macro_sql": "{% macro bigquery__data_type_list(data_type) %}\n\n    {% set string_list = ['STRING'] | list %}\n    {% set numeric_list = ['INT64','NUMERIC','BIGNUMERIC','FLOAT64','INTEGER'] | list %}\n    {% set timestamp_list = ['DATE','DATETIME','TIMESTAMP'] | list %}\n\n    {%- if data_type == 'string' %}\n        {{ return(string_list) }}\n    {%- elif data_type == 'numeric' %}\n        {{ return(numeric_list) }}\n    {%- elif data_type == 'timestamp' %}\n        {{ return(timestamp_list) }}\n    {%- else %}\n        {{ return([]) }}\n    {%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.024826}, "macro.elementary.snowflake__data_type_list": {"unique_id": "macro.elementary.snowflake__data_type_list", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/data_types/data_type_list.sql", "original_file_path": "macros/utils/data_types/data_type_list.sql", "name": "snowflake__data_type_list", "macro_sql": "{% macro snowflake__data_type_list(data_type) %}\n\n    {% set string_list = ['VARCHAR','CHAR','CHARACTER','STRING','TEXT'] | list %}\n    {% set numeric_list = ['NUMBER','DECIMAL','NUMERIC','INT','INTEGER','BIGINT','SMALLINT','TINYINT','BYTEINT','FLOAT','FLOAT4','FLOAT8','DOUBLE','DOUBLE PRECISION','REAL'] | list %}\n    {% set timestamp_list = ['DATE','DATETIME','TIME','TIMESTAMP','TIMESTAMP_LTZ','TIMESTAMP_NTZ','TIMESTAMP_TZ'] | list %}\n\n    {%- if data_type == 'string' %}\n        {{ return(string_list) }}\n    {%- elif data_type == 'numeric' %}\n        {{ return(numeric_list) }}\n    {%- elif data_type == 'timestamp' %}\n        {{ return(timestamp_list) }}\n    {%- else %}\n        {{ return([]) }}\n    {%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.02562}, "macro.elementary.cast_as_timestamp": {"unique_id": "macro.elementary.cast_as_timestamp", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "name": "cast_as_timestamp", "macro_sql": "{%- macro cast_as_timestamp(timestamp_field) -%}\n    cast({{ timestamp_field }} as {{- dbt_utils.type_timestamp() -}})\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.026127}, "macro.elementary.cast_as_float": {"unique_id": "macro.elementary.cast_as_float", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "name": "cast_as_float", "macro_sql": "{%- macro cast_as_float(column) -%}\n    cast({{ column }} as {{ dbt_utils.type_float() }})\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.026249}, "macro.elementary.cast_as_string": {"unique_id": "macro.elementary.cast_as_string", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "name": "cast_as_string", "macro_sql": "{%- macro cast_as_string(column) -%}\n    cast({{ column }} as {{ elementary.type_string() }})\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.026369}, "macro.elementary.cast_as_long_string": {"unique_id": "macro.elementary.cast_as_long_string", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "name": "cast_as_long_string", "macro_sql": "{%- macro cast_as_long_string(column) -%}\n    cast({{ column }} as {{ elementary.type_long_string() }})\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.type_long_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.0264902}, "macro.elementary.cast_as_bool": {"unique_id": "macro.elementary.cast_as_bool", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "name": "cast_as_bool", "macro_sql": "{%- macro cast_as_bool(column) -%}\n    cast({{ column }} as {{ elementary.type_bool() }})\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.type_bool"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.026609}, "macro.elementary.const_as_string": {"unique_id": "macro.elementary.const_as_string", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "name": "const_as_string", "macro_sql": "{%- macro const_as_string(string) -%}\n    cast('{{ string }}' as {{ elementary.type_string() }})\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.0267289}, "macro.elementary.type_bool": {"unique_id": "macro.elementary.type_bool", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "name": "type_bool", "macro_sql": "{%- macro type_bool() -%}\n    {{ return(adapter.dispatch('type_bool', 'elementary')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.bigquery__type_bool"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.027216}, "macro.elementary.default__type_bool": {"unique_id": "macro.elementary.default__type_bool", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "name": "default__type_bool", "macro_sql": "{% macro default__type_bool() %}\n    boolean\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.027293}, "macro.elementary.bigquery__type_bool": {"unique_id": "macro.elementary.bigquery__type_bool", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "name": "bigquery__type_bool", "macro_sql": "{% macro bigquery__type_bool() %}\n    BOOL\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.027352}, "macro.elementary.type_string": {"unique_id": "macro.elementary.type_string", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "name": "type_string", "macro_sql": "\n\n\n{%- macro type_string() -%}\n    {{ return(adapter.dispatch('type_string', 'elementary')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.bigquery__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.027494}, "macro.elementary.default__type_string": {"unique_id": "macro.elementary.default__type_string", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {# Redshift and Postgres #}\n    varchar(4096)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.027565}, "macro.elementary.snowflake__type_string": {"unique_id": "macro.elementary.snowflake__type_string", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    {# Default max varchar size in Snowflake is 16MB #}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.0276322}, "macro.elementary.bigquery__type_string": {"unique_id": "macro.elementary.bigquery__type_string", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "name": "bigquery__type_string", "macro_sql": "{% macro bigquery__type_string() %}\n    {# Default max string size in Bigquery is 65K #}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.0276961}, "macro.elementary.type_long_string": {"unique_id": "macro.elementary.type_long_string", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "name": "type_long_string", "macro_sql": "\n\n\n\n\n{%- macro type_long_string() -%}\n    {{ return(adapter.dispatch('type_long_string', 'elementary')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.default__type_long_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.0278609}, "macro.elementary.default__type_long_string": {"unique_id": "macro.elementary.default__type_long_string", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "name": "default__type_long_string", "macro_sql": "{%- macro default__type_long_string() -%}\n    {{ elementary.type_string() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.0281081}, "macro.elementary.redshift__type_long_string": {"unique_id": "macro.elementary.redshift__type_long_string", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "name": "redshift__type_long_string", "macro_sql": "{%- macro redshift__type_long_string() -%}\n    varchar(16384)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.028172}, "macro.elementary.postgres__type_long_string": {"unique_id": "macro.elementary.postgres__type_long_string", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "name": "postgres__type_long_string", "macro_sql": "{%- macro postgres__type_long_string() -%}\n    varchar(16384)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.028233}, "macro.elementary.normalize_data_type": {"unique_id": "macro.elementary.normalize_data_type", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/data_types/normalize_data_type.sql", "original_file_path": "macros/utils/data_types/normalize_data_type.sql", "name": "normalize_data_type", "macro_sql": "{% macro normalize_data_type(data_type) %}\n    {%- if data_type is defined and data_type is not none %}\n        {%- if data_type in elementary.data_type_list('string') %}\n            {{ return('string') }}\n        {%- elif data_type in elementary.data_type_list('numeric') %}\n            {{ return('numeric') }}\n        {%- elif data_type in elementary.data_type_list('timestamp') %}\n            {{ return('timestamp') }}\n        {%- else %}\n            {{ return('other') }}\n        {% endif %}\n    {%- endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.data_type_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.028966}, "macro.elementary.null_int": {"unique_id": "macro.elementary.null_int", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/data_types/null_as.sql", "original_file_path": "macros/utils/data_types/null_as.sql", "name": "null_int", "macro_sql": "{%- macro null_int() -%}\n    cast(null as {{ dbt_utils.type_int() }})\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.029261}, "macro.elementary.null_timestamp": {"unique_id": "macro.elementary.null_timestamp", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/data_types/null_as.sql", "original_file_path": "macros/utils/data_types/null_as.sql", "name": "null_timestamp", "macro_sql": "{%- macro null_timestamp() -%}\n    cast(null as {{ dbt_utils.type_timestamp() }})\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.029362}, "macro.elementary.null_float": {"unique_id": "macro.elementary.null_float", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/data_types/null_as.sql", "original_file_path": "macros/utils/data_types/null_as.sql", "name": "null_float", "macro_sql": "{%- macro null_float() -%}\n    cast(null as {{ dbt_utils.type_float() }})\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.029456}, "macro.elementary.null_string": {"unique_id": "macro.elementary.null_string", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/data_types/null_as.sql", "original_file_path": "macros/utils/data_types/null_as.sql", "name": "null_string", "macro_sql": "{% macro null_string() %}\n    cast(null as {{ elementary.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.029553}, "macro.elementary.insensitive_get_dict_value": {"unique_id": "macro.elementary.insensitive_get_dict_value", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/dict_utils/insensitive_get_dict_value.sql", "original_file_path": "macros/utils/dict_utils/insensitive_get_dict_value.sql", "name": "insensitive_get_dict_value", "macro_sql": "{% macro insensitive_get_dict_value(dict, key, default) -%}\n    {% set value = elementary.safe_get_with_default(dict, key) %}\n    {%- if value is not none -%}\n        {{- return(value) -}}\n    {%- endif %}\n    {% set value = elementary.safe_get_with_default(dict, key.lower()) %}\n    {%- if value is not none -%}\n        {{- return(value) -}}\n    {%- endif %}\n    {% set value = elementary.safe_get_with_default(dict, key.upper()) %}\n    {%- if value is not none -%}\n        {{- return(value) -}}\n    {%- endif %}\n    {%- if default is defined -%}\n        {{- return(default) -}}\n    {% else %}\n        {{ return(none) }}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.safe_get_with_default"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.030549}, "macro.elementary.safe_get_with_default": {"unique_id": "macro.elementary.safe_get_with_default", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/dict_utils/safe_get_with_default_value.sql", "original_file_path": "macros/utils/dict_utils/safe_get_with_default_value.sql", "name": "safe_get_with_default", "macro_sql": "{% macro safe_get_with_default(dict, key, default) %}\n    {% set value = dict.get(key) %}\n    {% if value is defined and value is not none %}\n        {{ return(value) }}\n    {% endif %}\n    {% if default is defined %}\n        {{ return(default) }}\n    {% endif %}\n    {{ return(none) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.031105}, "macro.elementary.get_node_execution_id": {"unique_id": "macro.elementary.get_node_execution_id", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/graph/get_node_execution_id.sql", "original_file_path": "macros/utils/graph/get_node_execution_id.sql", "name": "get_node_execution_id", "macro_sql": "{% macro get_node_execution_id(node) %}\n    {% set node_execution_id = [invocation_id, node.get('unique_id')] | join('.') %}\n    {{ return(node_execution_id) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.031449}, "macro.elementary.get_node": {"unique_id": "macro.elementary.get_node", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/graph/get_node.sql", "original_file_path": "macros/utils/graph/get_node.sql", "name": "get_node", "macro_sql": "{% macro get_node(node_unique_id) %}\n    {# First let's try to find it in regular nodes #}\n    {%- set node = graph.nodes.get(node_unique_id) -%}\n    {%- if not node -%}\n        {# If not found let's try to find it in source nodes #}\n        {%- set node = graph.sources.get(node_unique_id) -%}\n    {%- endif -%}\n    {{ return(node) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.031874}, "macro.elementary.get_elementary_config_from_node": {"unique_id": "macro.elementary.get_elementary_config_from_node", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/graph/get_elementary_config_from_node.sql", "original_file_path": "macros/utils/graph/get_elementary_config_from_node.sql", "name": "get_elementary_config_from_node", "macro_sql": "{% macro get_elementary_config_from_node(node) %}\n    {% set res = {} %}\n    {% set node_config = node.get('config') %}\n    {% if node_config %}\n        {% set elementary_config = node.config.get('elementary') %}\n        {% if elementary_config and elementary_config is mapping %}\n            {% do res.update(elementary_config) %}\n        {% endif %}\n        {% set config_meta = node.config.get('meta') %}\n        {% if config_meta and config_meta is mapping %}\n            {% set elementary_config = config_meta.get('elementary') %}\n            {% if elementary_config and elementary_config is mapping %}\n                {% do res.update(elementary_config) %}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n    {% set node_meta = node.get('meta') %}\n    {% if node_meta and node_meta is mapping %}\n        {% set elementary_config = node_meta.get('elementary') %}\n        {% if elementary_config and elementary_config is mapping %}\n            {% do res.update(elementary_config) %}\n        {% endif %}\n    {% endif %}\n    {{ return(res) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.033408}, "macro.elementary.get_nodes_from_graph": {"unique_id": "macro.elementary.get_nodes_from_graph", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/graph/get_nodes_from_graph.sql", "original_file_path": "macros/utils/graph/get_nodes_from_graph.sql", "name": "get_nodes_from_graph", "macro_sql": "{% macro get_nodes_from_graph() %}\n    {% set nodes = [] %}\n    {% do nodes.extend(graph.sources.values()) %}\n    {% do nodes.extend(graph.nodes.values()) %}\n    {{ return(nodes) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.033826}, "macro.elementary.get_package_database_and_schema": {"unique_id": "macro.elementary.get_package_database_and_schema", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/graph/get_package_database_and_schema.sql", "original_file_path": "macros/utils/graph/get_package_database_and_schema.sql", "name": "get_package_database_and_schema", "macro_sql": "{% macro get_package_database_and_schema(package_name) %}\n    {% if execute %}\n        {% set node_in_package = graph.nodes.values()\n                                 | selectattr(\"resource_type\", \"==\", \"model\")\n                                 | selectattr(\"package_name\", \"==\", package_name) | first %}\n        {% if node_in_package %}\n            {{ return([node_in_package.database, node_in_package.schema]) }}\n        {% endif %}\n    {% endif %}\n    {{ return([none, none]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.034485}, "macro.elementary.get_parent_model_unique_ids_from_test_node": {"unique_id": "macro.elementary.get_parent_model_unique_ids_from_test_node", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/graph/get_parent_model_unique_ids_from_test_node.sql", "original_file_path": "macros/utils/graph/get_parent_model_unique_ids_from_test_node.sql", "name": "get_parent_model_unique_ids_from_test_node", "macro_sql": "{% macro get_parent_model_unique_ids_from_test_node(test_node) %}\n    {% set nodes_in_current_package = [] %}\n    {% set test_depends_on = test_node.get('depends_on') %}\n    {% if test_depends_on %}\n        {% set depends_on_nodes = test_depends_on.get('nodes') %}\n        {% if depends_on_nodes %}\n            {% set current_package_name = test_node.get('package_name') %}\n            {% if current_package_name %}\n                {% set current_package_name = '.' ~ current_package_name ~ '.' %}\n                {% for node in depends_on_nodes %}\n                    {% if current_package_name in node %}\n                        {% do nodes_in_current_package.append(node) %}\n                    {% endif %}\n                {% endfor %}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n    {{ return(nodes_in_current_package) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.03556}, "macro.elementary.get_nodes_by_unique_ids": {"unique_id": "macro.elementary.get_nodes_by_unique_ids", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/graph/get_nodes_by_unique_ids.sql", "original_file_path": "macros/utils/graph/get_nodes_by_unique_ids.sql", "name": "get_nodes_by_unique_ids", "macro_sql": "{% macro get_nodes_by_unique_ids(unique_ids) %}\n    {% set nodes = []%}\n    {% if execute %}\n        {% if unique_ids and unique_ids is iterable %}\n            {% for unique_id in unique_ids %}\n                {% set node = elementary.get_node(unique_id) %}\n                {% if node %}\n                    {% do nodes.append(node) %}\n                {% endif %}\n            {% endfor %}\n        {% endif %}\n    {% endif %}\n    {{ return(nodes) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_node"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.036314}, "macro.elementary.get_table_name_from_node": {"unique_id": "macro.elementary.get_table_name_from_node", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/graph/get_table_name_from_node.sql", "original_file_path": "macros/utils/graph/get_table_name_from_node.sql", "name": "get_table_name_from_node", "macro_sql": "{% macro get_table_name_from_node(node) %}\n    {% if node.identifier %}\n        {% set table_name = node.identifier %}\n    {% elif node.alias %}\n        {% set table_name = node.alias %}\n    {% else %}\n        {% set table_name = node.name %}\n    {% endif %}\n    {{ return(table_name) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.036834}, "macro.elementary.get_model_database_and_schema": {"unique_id": "macro.elementary.get_model_database_and_schema", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/graph/get_model_database_and_schema.sql", "original_file_path": "macros/utils/graph/get_model_database_and_schema.sql", "name": "get_model_database_and_schema", "macro_sql": "{%- macro get_model_database_and_schema(package_name, model_name) -%}\n    {% if execute %}\n        {% set nodes_in_package = graph.nodes.values()\n                                 | selectattr(\"resource_type\", \"==\", \"model\")\n                                 | selectattr(\"package_name\", \"==\", package_name) %}\n        {% if nodes_in_package %}\n            {%- for node_in_package in nodes_in_package -%}\n                {% do print(\"database: \" ~ node_in_package.database ~ \", schema: \" ~ node_in_package.schema ~  \", unique_id: \" ~ node_in_package.unique_id) %}\n                {#\n                {%- if node_in_package.name | lower == model_name | lower -%}\n                    {{ return([node_in_package.database, node_in_package.schema]) }}\n                {%- endif -%}\n                #}\n            {%- endfor -%}\n        {% endif %}\n    {% endif %}\n    {{ return([none, none]) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.037684}, "macro.elementary.get_model_database_and_schema_from_test_node": {"unique_id": "macro.elementary.get_model_database_and_schema_from_test_node", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/graph/get_model_database_and_schema_from_test_node.sql", "original_file_path": "macros/utils/graph/get_model_database_and_schema_from_test_node.sql", "name": "get_model_database_and_schema_from_test_node", "macro_sql": "{% macro get_model_database_and_schema_from_test_node(test_node) %}\n    {% set test_database = test_node.get('database') %}\n    {% set test_schema = test_node.get('schema') %}\n    {% set config_dict = elementary.safe_get_with_default(test_node, 'config', {}) %}\n    {% set test_schema_sufix = config_dict.get('schema') %}\n    {% if test_schema and test_schema_sufix %}\n        {% set test_schema = test_schema | replace('_' ~ test_schema_sufix, '') %}\n    {% endif %}\n    {{ return([test_database, test_schema]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.safe_get_with_default"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.038433}, "macro.elementary.agate_to_json": {"unique_id": "macro.elementary.agate_to_json", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/run_queries/agate_to_json.sql", "original_file_path": "macros/utils/run_queries/agate_to_json.sql", "name": "agate_to_json", "macro_sql": "{% macro agate_to_json(agate_table) %}\n    {% set serializable_rows = elementary.agate_to_dicts(agate_table) %}\n    {{ return(tojson(serializable_rows)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.agate_to_dicts"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.0387409}, "macro.elementary.result_column_to_list": {"unique_id": "macro.elementary.result_column_to_list", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/run_queries/result_column_to_list.sql", "original_file_path": "macros/utils/run_queries/result_column_to_list.sql", "name": "result_column_to_list", "macro_sql": "{% macro result_column_to_list(single_column_query) %}\n    {% set results_list = [] %}\n\n    {%- if 'select' in single_column_query %}\n        {% call statement('get_query_results', fetch_result=True,auto_begin=false) %}\n            {{ single_column_query }}\n        {% endcall %}\n\n        {% if execute %}\n            {% set results_rows = load_result('get_query_results').table.rows.values() %}\n            {%- if results_rows %}\n                {% for result_row in results_rows %}\n                    {{ results_list.append(results_rows[loop.index0].values()[0]) }}\n                {% endfor %}\n            {%- endif %}\n        {% endif %}\n    {%- endif %}\n\n    {{ return(results_list) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.039698}, "macro.elementary.result_value": {"unique_id": "macro.elementary.result_value", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/run_queries/result_value.sql", "original_file_path": "macros/utils/run_queries/result_value.sql", "name": "result_value", "macro_sql": "{% macro result_value(single_column_query) %}\n\n    {% set results_list = [] %}\n    {% set query = single_column_query %}\n\n    {% if 'select' in query %}\n        {% set results = run_query(query) %}\n        {%- if results %}\n            {%- do results_list.append(results[0].values()[0]) %}\n        {% endif %}\n    {% endif %}\n\n    {%- if results_list|length > 0 %}\n        {%- set result_value = results_list[0] %}\n    {%- else %}\n        {%- set result_value = null %}\n    {%- endif %}\n\n    {{ return(result_value) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.0405262}, "macro.elementary.agate_to_dicts": {"unique_id": "macro.elementary.agate_to_dicts", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/run_queries/agate_to_dicts.sql", "original_file_path": "macros/utils/run_queries/agate_to_dicts.sql", "name": "agate_to_dicts", "macro_sql": "{% macro agate_to_dicts(agate_table) %}\n    {% set column_types = agate_table.column_types %}\n    {% set serializable_rows = [] %}\n    {% for agate_row in agate_table.rows %}\n        {% set serializable_row = {} %}\n        {% for col_name, col_value in agate_row.items() %}\n            {% set serializable_col_value = column_types[loop.index0].jsonify(col_value) %}\n            {% set serializable_col_name = col_name | lower %}\n            {% do serializable_row.update({serializable_col_name: serializable_col_value}) %}\n        {% endfor %}\n        {% do serializable_rows.append(serializable_row) %}\n    {% endfor %}\n    {{ return(serializable_rows) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.0414212}, "macro.elementary.run_query_macro_on_list": {"unique_id": "macro.elementary.run_query_macro_on_list", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/run_queries/run_query_macro_on_list.sql", "original_file_path": "macros/utils/run_queries/run_query_macro_on_list.sql", "name": "run_query_macro_on_list", "macro_sql": "{% macro run_query_macro_on_list(param_list, query_macro) %}\n\n    {% for param in param_list %}\n        {{ query_macro(param) }}\n        {% if not loop.last %}\n            union all\n        {% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.041792}, "macro.elementary.result_row_to_dict": {"unique_id": "macro.elementary.result_row_to_dict", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/run_queries/result_row_to_dict.sql", "original_file_path": "macros/utils/run_queries/result_row_to_dict.sql", "name": "result_row_to_dict", "macro_sql": "{% macro result_row_to_dict(single_column_query) %}\n\n    {% set query = single_column_query %}\n\n    {% set results = run_query(query) %}\n    {%- if results %}\n        {%- for result in results %}\n            {%- set dict = result.dict() %}\n            {{ return(dict) }}\n        {%- endfor %}\n    {% endif %}\n\n    {{ return(null) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.04234}, "macro.elementary.delete_if_incremental": {"unique_id": "macro.elementary.delete_if_incremental", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/table_operations/delete_if_incremental.sql", "original_file_path": "macros/utils/table_operations/delete_if_incremental.sql", "name": "delete_if_incremental", "macro_sql": "{% macro delete_if_incremental(where_clause) %}\n\n    {% set query%}\n        delete from {{ this }}\n        where {{ where_clause }}\n    {% endset %}\n\n    {% if is_incremental() %}\n        {% do run_query(query) %}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.04275}, "macro.elementary.remove_empty_rows": {"unique_id": "macro.elementary.remove_empty_rows", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/table_operations/remove_empty_rows.sql", "original_file_path": "macros/utils/table_operations/remove_empty_rows.sql", "name": "remove_empty_rows", "macro_sql": "{% macro remove_empty_rows(table_relation) %}\n\n    {%- set columns = adapter.get_columns_in_relation(table_relation) -%}\n    {%- set delete_empty_rows_query %}\n        delete from {{ table_relation }} where {% for column in columns -%} {{ column.name }} is NULL {{- \" and \" if not loop.last else \"\" -}} {%- endfor -%}\n    {%- endset %}\n    {%- do run_query(delete_empty_rows_query) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.043283}, "macro.elementary.remove_rows": {"unique_id": "macro.elementary.remove_rows", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/table_operations/remove_rows.sql", "original_file_path": "macros/utils/table_operations/remove_rows.sql", "name": "remove_rows", "macro_sql": "{% macro remove_rows(table_name) %}\n\n    {% set remove_rows_query %}\n        delete from {{ table_name }}\n    {% endset %}\n    {% do run_query(remove_rows_query) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.043584}, "macro.elementary.get_columns_and_types": {"unique_id": "macro.elementary.get_columns_and_types", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/table_operations/get_columns_and_types.sql", "original_file_path": "macros/utils/table_operations/get_columns_and_types.sql", "name": "get_columns_and_types", "macro_sql": "{% macro get_columns_and_types(table_name, schema_name = none, database_name = none) %}\n\n    {# dbt models can be found with identifier only #}\n    {# for non-dbt tables database_name and schema_name are required #}\n\n    {%- if not database_name %}\n        {%- set database_name = elementary.target_database() %}\n    {%- endif %}\n    {%- if not schema_name %}\n        {%- set schema_name = target.schema %}\n    {%- endif %}\n\n    {%- set columns = [] %}\n\n    {%- set relation = adapter.get_relation(\n          database=database_name,\n          schema=schema_name,\n          identifier=table_name) -%}\n\n    {%- set columns_from_relation = adapter.get_columns_in_relation(relation) -%}\n\n    {% for column in columns_from_relation %}\n        {%- set column_item = {'column_name': column['column'], 'data_type': elementary.normalize_data_type(column['dtype'])} %}\n        {%- do columns.append(column_item) -%}\n    {% endfor %}\n\n    {{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.target_database", "macro.elementary.normalize_data_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.044671}, "macro.elementary.create_temp_table": {"unique_id": "macro.elementary.create_temp_table", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/table_operations/create_temp_table.sql", "original_file_path": "macros/utils/table_operations/create_temp_table.sql", "name": "create_temp_table", "macro_sql": "{% macro create_temp_table(database_name, schema_name, table_name, sql_query) %}\n    {% set temp_table_exists, temp_table_relation = dbt.get_or_create_relation(database=database_name,\n                                                                               schema=schema_name,\n                                                                               identifier=table_name,\n                                                                               type='table') -%}\n    {% if temp_table_exists %}\n        {% do adapter.drop_relation(temp_table_relation) %}\n        {% do run_query(dbt.create_table_as(True, temp_table_relation, sql_query)) %}\n    {% else %}\n        {% do run_query(dbt.create_table_as(True, temp_table_relation, sql_query)) %}\n    {% endif %}\n    {{ return(temp_table_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_query", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.045523}, "macro.elementary.insert_dicts": {"unique_id": "macro.elementary.insert_dicts", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/table_operations/insert_dicts.sql", "original_file_path": "macros/utils/table_operations/insert_dicts.sql", "name": "insert_dicts", "macro_sql": "{% macro insert_dicts(table_relation, dicts, chunk_size=50, should_commit=False) %}\n    {% if not table_relation %}\n        {{ elementary.edr_log('Recieved table relation is not valid (make sure elementary models were executed successfully first)') }}\n        {{ return(none) }}\n    {% endif %}\n    {% set columns = adapter.get_columns_in_relation(table_relation) -%}\n    {% if not columns %}\n        {% set table_name = elementary.relation_to_full_name(table_relation) %}\n        {{ elementary.edr_log('Could not extract columns for table - ' ~ table_name ~ ' (might be a permissions issue)') }}\n        {{ return(none) }}\n    {% endif %}\n    {% set dicts_chunks = elementary.split_list_to_chunks(dicts, chunk_size) %}\n    {% for dicts_chunk in dicts_chunks %}\n        {% set insert_dicts_query = elementary.get_insert_dicts_query(table_relation, columns, dicts_chunk) %}\n        {% do run_query(insert_dicts_query) %}\n    {% endfor %}\n    {%- if should_commit -%}\n        {% do adapter.commit() %}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.edr_log", "macro.elementary.relation_to_full_name", "macro.elementary.split_list_to_chunks", "macro.elementary.get_insert_dicts_query", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.048109}, "macro.elementary.get_insert_dicts_query": {"unique_id": "macro.elementary.get_insert_dicts_query", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/table_operations/insert_dicts.sql", "original_file_path": "macros/utils/table_operations/insert_dicts.sql", "name": "get_insert_dicts_query", "macro_sql": "{% macro get_insert_dicts_query(table_relation, columns, dicts) -%}\n    {% set insert_dicts_query %}\n        insert into {{ table_relation }}\n            ({%- for column in columns -%}\n                {{- column.name -}} {{- \",\" if not loop.last else \"\" -}}\n            {%- endfor -%}) values\n            {% for dict in dicts -%}\n                ({%- for column in columns -%}\n                    {%- set column_value = elementary.insensitive_get_dict_value(dict, column.name, none) -%}\n                    {{ elementary.render_value(column_value) }}\n                    {{- \",\" if not loop.last else \"\" -}}\n                 {%- endfor -%}) {{- \",\" if not loop.last else \"\" -}}\n            {%- endfor -%}\n    {% endset %}\n    {{ return(insert_dicts_query) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.insensitive_get_dict_value", "macro.elementary.render_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.048824}, "macro.elementary.escape_special_chars": {"unique_id": "macro.elementary.escape_special_chars", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/table_operations/insert_dicts.sql", "original_file_path": "macros/utils/table_operations/insert_dicts.sql", "name": "escape_special_chars", "macro_sql": "\n\n{%- macro escape_special_chars(string_value) -%}\n    {{- return(string_value | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace(\"\\n\", \"\\\\n\")) -}}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.049047}, "macro.elementary.render_value": {"unique_id": "macro.elementary.render_value", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/table_operations/insert_dicts.sql", "original_file_path": "macros/utils/table_operations/insert_dicts.sql", "name": "render_value", "macro_sql": "{%- macro render_value(value) -%}\n    {%- if value is defined and value is not none -%}\n        {%- if value is number -%}\n            {{- value -}}\n        {%- elif value is string -%}\n            '{{- elementary.escape_special_chars(value) -}}'\n        {%- elif value is mapping or value is sequence -%}\n            '{{- elementary.escape_special_chars(tojson(value)) -}}'\n        {%- else -%}\n            NULL\n        {%- endif -%}\n    {%- else -%}\n        NULL\n    {%- endif -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.escape_special_chars"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.049469}, "macro.elementary.get_row_count": {"unique_id": "macro.elementary.get_row_count", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/table_operations/get_row_count.sql", "original_file_path": "macros/utils/table_operations/get_row_count.sql", "name": "get_row_count", "macro_sql": "{% macro get_row_count(full_table_name) %}\n\n    {% set query_row_count %}\n        select count(*) from {{ full_table_name }}\n    {% endset %}\n    {% if execute %}\n        {% set result = run_query(query_row_count).columns[0].values()[0] %}\n    {% endif %}\n    {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.049957}, "macro.elementary.create_or_replace": {"unique_id": "macro.elementary.create_or_replace", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/table_operations/create_or_replace.sql", "original_file_path": "macros/utils/table_operations/create_or_replace.sql", "name": "create_or_replace", "macro_sql": "{% macro create_or_replace(temporary, relation, sql_query) %}\n    {{ return(adapter.dispatch('create_or_replace', 'elementary')(temporary, relation, sql_query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.default__create_or_replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.050357}, "macro.elementary.default__create_or_replace": {"unique_id": "macro.elementary.default__create_or_replace", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/table_operations/create_or_replace.sql", "original_file_path": "macros/utils/table_operations/create_or_replace.sql", "name": "default__create_or_replace", "macro_sql": "{% macro default__create_or_replace(temporary, relation, sql_query) %}\n    {%- do run_query(dbt.create_table_as(temporary, relation, sql_query)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.0505338}, "macro.elementary.redshift__create_or_replace": {"unique_id": "macro.elementary.redshift__create_or_replace", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/table_operations/create_or_replace.sql", "original_file_path": "macros/utils/table_operations/create_or_replace.sql", "name": "redshift__create_or_replace", "macro_sql": "{% macro redshift__create_or_replace(temporary, relation, sql_query) %}\n    {%- do dbt.drop_relation_if_exists(relation) -%}\n    {%- do run_query(dbt.create_table_as(temporary, relation, sql_query)) %}\n    {% do adapter.commit() %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_query", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.0507991}, "macro.elementary.table_exists_in_target": {"unique_id": "macro.elementary.table_exists_in_target", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/table_operations/table_exists.sql", "original_file_path": "macros/utils/table_operations/table_exists.sql", "name": "table_exists_in_target", "macro_sql": "{% macro table_exists_in_target(table_name, schema_name, database_name) %}\n\n{# dbt models can be found with identifier only #}\n{# for non-dbt tables database_name and schema_name are required #}\n\n    {%- if not database_name is defined %}\n        {%- set database_name = elementary.target_database() %}\n    {%- endif %}\n    {%- if not schema_name is defined %}\n        {%- set schema_name = target.schema %}\n    {%- endif %}\n\n    {%- set source_relation = adapter.get_relation(\n          database=database_name,\n          schema=schema_name,\n          identifier=table_name) -%}\n\n    {%- set table_exists = source_relation is not none -%}\n    {{ return(table_exists) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.target_database"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.051489}, "macro.elementary.insert_as_select": {"unique_id": "macro.elementary.insert_as_select", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/table_operations/insert_as_select.sql", "original_file_path": "macros/utils/table_operations/insert_as_select.sql", "name": "insert_as_select", "macro_sql": "{% macro insert_as_select(table_relation, select_query) %}\n    {# when calling this macro, you need to add depends on ref comment #}\n    {# ref_model and select_query need to have the same columns #}\n\n    {%- set insert_query %}\n        insert into {{ table_relation }}\n        with tmp_table as (\n            {{ select_query }}\n        )\n        select * from tmp_table\n    {%- endset %}\n\n    {{ return(insert_query) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.051871}, "macro.elementary.merge_sql": {"unique_id": "macro.elementary.merge_sql", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/table_operations/merge_sql.sql", "original_file_path": "macros/utils/table_operations/merge_sql.sql", "name": "merge_sql", "macro_sql": "{% macro merge_sql(target_relation, tmp_relation, unique_key, dest_columns) -%}\n    {{ return(adapter.dispatch('merge_sql', 'elementary')(target_relation, tmp_relation, unique_key, dest_columns)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.default__merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.052295}, "macro.elementary.default__merge_sql": {"unique_id": "macro.elementary.default__merge_sql", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/table_operations/merge_sql.sql", "original_file_path": "macros/utils/table_operations/merge_sql.sql", "name": "default__merge_sql", "macro_sql": "{% macro default__merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n    {%- set merge_sql = dbt.get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n    {{ return(merge_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.052526}, "macro.elementary.redshift__merge_sql": {"unique_id": "macro.elementary.redshift__merge_sql", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/table_operations/merge_sql.sql", "original_file_path": "macros/utils/table_operations/merge_sql.sql", "name": "redshift__merge_sql", "macro_sql": "{% macro redshift__merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n    {%- set merge_sql = dbt.get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n    {{ return(merge_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.0527518}, "macro.elementary.get_relation_max_name_length": {"unique_id": "macro.elementary.get_relation_max_name_length", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/table_operations/get_relation_max_length.sql", "original_file_path": "macros/utils/table_operations/get_relation_max_length.sql", "name": "get_relation_max_name_length", "macro_sql": "{% macro get_relation_max_name_length() %}\n    {{ return(adapter.dispatch('get_relation_max_name_length', 'elementary')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.default__get_relation_max_name_length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.0530949}, "macro.elementary.default__get_relation_max_name_length": {"unique_id": "macro.elementary.default__get_relation_max_name_length", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/table_operations/get_relation_max_length.sql", "original_file_path": "macros/utils/table_operations/get_relation_max_length.sql", "name": "default__get_relation_max_name_length", "macro_sql": "{% macro default__get_relation_max_name_length(temporary, relation, sql_query) %}\n    {{ return(none) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.053219}, "macro.elementary.redshift__get_relation_max_name_length": {"unique_id": "macro.elementary.redshift__get_relation_max_name_length", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/table_operations/get_relation_max_length.sql", "original_file_path": "macros/utils/table_operations/get_relation_max_length.sql", "name": "redshift__get_relation_max_name_length", "macro_sql": "{% macro redshift__get_relation_max_name_length(temporary, relation, sql_query) %}\n    {{ return(127) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.053341}, "macro.elementary.postgres__get_relation_max_name_length": {"unique_id": "macro.elementary.postgres__get_relation_max_name_length", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/table_operations/get_relation_max_length.sql", "original_file_path": "macros/utils/table_operations/get_relation_max_length.sql", "name": "postgres__get_relation_max_name_length", "macro_sql": "{% macro postgres__get_relation_max_name_length(temporary, relation, sql_query) %}\n    {{ return(63) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.053462}, "macro.elementary.relation_exists": {"unique_id": "macro.elementary.relation_exists", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/table_operations/relation_exists.sql", "original_file_path": "macros/utils/table_operations/relation_exists.sql", "name": "relation_exists", "macro_sql": "{% macro relation_exists(relation) %}\n    {%- set loaded_relation = load_relation(relation) -%}\n    {% if loaded_relation is not none %}\n        {{ return(True) }}\n    {% endif %}\n    {{ return(False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.05384}, "macro.elementary.table_name_with_suffix": {"unique_id": "macro.elementary.table_name_with_suffix", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/table_operations/table_name_with_suffix.sql", "original_file_path": "macros/utils/table_operations/table_name_with_suffix.sql", "name": "table_name_with_suffix", "macro_sql": "{% macro table_name_with_suffix(table_name, suffix) %}\n    {% set relation_max_name_length = elementary.get_relation_max_name_length()  %}\n    {% if relation_max_name_length %}\n        {% set suffix_length = suffix | length %}\n        {% set table_name_with_suffix = table_name[:relation_max_name_length - suffix_length] ~ suffix %}\n    {% else %}\n        {% set table_name_with_suffix = table_name ~ suffix %}\n    {% endif %}\n    {{ return(table_name_with_suffix) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_relation_max_name_length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.054431}, "macro.elementary.union_lists": {"unique_id": "macro.elementary.union_lists", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/list_utils/union_lists.sql", "original_file_path": "macros/utils/list_utils/union_lists.sql", "name": "union_lists", "macro_sql": "{% macro union_lists(list1, list2) %}\n    {% set union_list = [] %}\n    {% do union_list.extend(list1) %}\n    {% do union_list.extend(list2) %}\n    {{ return(union_list | unique | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.0548348}, "macro.elementary.strings_list_to_tuple": {"unique_id": "macro.elementary.strings_list_to_tuple", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/list_utils/strings_list_to_tuple.sql", "original_file_path": "macros/utils/list_utils/strings_list_to_tuple.sql", "name": "strings_list_to_tuple", "macro_sql": "{% macro strings_list_to_tuple(strings) %}\n    {%- if strings %}\n        ({% for string in strings %} '{{ string }}' {{ \",\" if not loop.last else \"\" }} {% endfor %})\n    {%- else %}\n        ('')\n    {%- endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.055247}, "macro.elementary.split_list_to_chunks": {"unique_id": "macro.elementary.split_list_to_chunks", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/list_utils/split_list_to_chunks.sql", "original_file_path": "macros/utils/list_utils/split_list_to_chunks.sql", "name": "split_list_to_chunks", "macro_sql": "{% macro split_list_to_chunks(item_list, chunk_size = 50) %}\n    {% set chunks = [] %}\n    {% set current_chunk = [] %}\n    {% for item in item_list %}\n        {% set reminder = loop.index0 % chunk_size %}\n        {% if reminder == 0 and current_chunk %}\n            {% do chunks.append(current_chunk.copy()) %}\n            {% do current_chunk.clear() %}\n        {% endif %}\n        {% do current_chunk.append(item) %}\n    {% endfor %}\n    {% if current_chunk %}\n        {% do chunks.append(current_chunk) %}\n    {% endif %}\n    {{ return(chunks) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.056215}, "macro.elementary.lists_intersection": {"unique_id": "macro.elementary.lists_intersection", "package_name": "elementary", "root_path": "/Users/yu/local/src/github/jaffle_shop/dbt_packages/elementary", "path": "macros/utils/list_utils/lists_intersection.sql", "original_file_path": "macros/utils/list_utils/lists_intersection.sql", "name": "lists_intersection", "macro_sql": "{% macro lists_intersection(list_a, list_b) %}\n\n    {%- set new_list = [] %}\n\n    {% for i in list_a %}\n        {% if i in list_b %}\n            {{ new_list.append(i) }}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(new_list) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663072921.056679}}, "docs": {"jaffle_shop2.__overview__": {"unique_id": "jaffle_shop2.__overview__", "package_name": "jaffle_shop2", "root_path": "/Users/yu/local/src/github/jaffle_shop", "path": "overview.md", "original_file_path": "models/overview.md", "name": "__overview__", "block_contents": "## Data Documentation for Jaffle Shop\n\n`jaffle_shop` is a fictional ecommerce store.\n\nThis [dbt](https://www.getdbt.com/) project is for demonstrations and tutorials.\n\nThe source code can be found [here](https://github.com/clrcrl/jaffle_shop)."}, "jaffle_shop2.orders_status": {"unique_id": "jaffle_shop2.orders_status", "package_name": "jaffle_shop2", "root_path": "/Users/yu/local/src/github/jaffle_shop", "path": "marts/core/docs.md", "original_file_path": "models/marts/core/docs.md", "name": "orders_status", "block_contents": "Orders can be one of the following statuses:\n\n| status         | description                                                                                                            |\n|----------------|------------------------------------------------------------------------------------------------------------------------|\n| placed         | The order has been placed but has not yet left the warehouse                                                           |\n| shipped        | The order has ben shipped to the customer and is currently in transit                                                  |\n| completed      | The order has been received by the customer                                                                            |\n| return_pending | The customer has indicated that they would like to return the order, but it has not yet been received at the warehouse |\n| returned       | The order has been returned by the customer and received at the warehouse                                              |"}, "dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/opt/homebrew/lib/python3.10/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.jaffle_shop2.stg_customers": ["seed.jaffle_shop2.raw_customers"], "model.jaffle_shop2.stg_payments": ["seed.jaffle_shop2.raw_payments"], "model.jaffle_shop2.stg_orders": ["seed.jaffle_shop2.raw_orders"], "model.jaffle_shop2.dim_customers": ["model.jaffle_shop2.customer_orders", "model.jaffle_shop2.customer_payments", "model.jaffle_shop2.stg_customers"], "model.jaffle_shop2.fct_orders": ["model.jaffle_shop2.order_payments", "model.jaffle_shop2.stg_orders"], "model.jaffle_shop2.order_payments": ["model.jaffle_shop2.stg_payments"], "model.jaffle_shop2.customer_payments": ["model.jaffle_shop2.stg_orders", "model.jaffle_shop2.stg_payments"], "model.jaffle_shop2.customer_orders": ["model.jaffle_shop2.stg_orders"], "seed.jaffle_shop2.raw_customers": [], "seed.jaffle_shop2.raw_orders": [], "seed.jaffle_shop2.raw_payments": [], "operation.jaffle_shop2.jaffle_shop2-on-run-end-0": [], "model.elementary.alerts_dbt_tests": ["model.elementary.elementary_test_results"], "model.elementary.alerts_schema_changes": ["model.elementary.elementary_test_results"], "model.elementary.alerts_data_monitoring": ["model.elementary.elementary_test_results"], "model.elementary.monitors_runs": ["model.elementary.data_monitoring_metrics"], "model.elementary.elementary_test_results": [], "model.elementary.dbt_tests": [], "model.elementary.dbt_models": [], "model.elementary.dbt_sources": [], "model.elementary.dbt_metrics": [], "model.elementary.dbt_run_results": [], "model.elementary.dbt_exposures": [], "model.elementary.metrics_anomaly_score": ["model.elementary.data_monitoring_metrics"], "model.elementary.anomaly_threshold_sensitivity": ["model.elementary.metrics_anomaly_score"], "model.elementary.schema_columns_snapshot": ["model.elementary.filtered_information_schema_columns"], "model.elementary.table_changes": ["model.elementary.current_schema_tables", "model.elementary.previous_schema_tables"], "model.elementary.column_changes": ["model.elementary.current_schema_columns", "model.elementary.previous_schema_columns"], "model.elementary.schema_tables_snapshot": ["model.elementary.filtered_information_schema_tables"], "model.elementary.previous_schema_tables": ["model.elementary.schema_tables_snapshot"], "model.elementary.current_schema_columns": ["model.elementary.schema_columns_snapshot"], "model.elementary.current_schema_tables": ["model.elementary.schema_tables_snapshot"], "model.elementary.previous_schema_columns": ["model.elementary.schema_columns_snapshot"], "model.elementary.data_monitoring_metrics": [], "model.elementary.filtered_information_schema_columns": [], "model.elementary.filtered_information_schema_tables": [], "operation.elementary.elementary-on-run-start-0": [], "operation.elementary.elementary-on-run-end-0": [], "test.jaffle_shop2.unique_stg_customers_customer_id.c7614daada": ["model.jaffle_shop2.stg_customers"], "test.jaffle_shop2.not_null_stg_customers_customer_id.e2cfb1f9aa": ["model.jaffle_shop2.stg_customers"], "test.jaffle_shop2.unique_stg_orders_order_id.e3b841c71a": ["model.jaffle_shop2.stg_orders"], "test.jaffle_shop2.not_null_stg_orders_order_id.81cfe2fe64": ["model.jaffle_shop2.stg_orders"], "test.jaffle_shop2.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad": ["model.jaffle_shop2.stg_orders"], "test.jaffle_shop2.unique_stg_payments_payment_id.3744510712": ["model.jaffle_shop2.stg_payments"], "test.jaffle_shop2.not_null_stg_payments_payment_id.c19cc50075": ["model.jaffle_shop2.stg_payments"], "test.jaffle_shop2.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278": ["model.jaffle_shop2.stg_payments"], "test.jaffle_shop2.unique_dim_customers_customer_id.15c9f1e2fd": ["model.jaffle_shop2.dim_customers"], "test.jaffle_shop2.not_null_dim_customers_customer_id.dd91cd1c8d": ["model.jaffle_shop2.dim_customers"], "test.jaffle_shop2.unique_fct_orders_order_id.523ddb6ce5": ["model.jaffle_shop2.fct_orders"], "test.jaffle_shop2.not_null_fct_orders_order_id.4e687af8d0": ["model.jaffle_shop2.fct_orders"], "test.jaffle_shop2.not_null_fct_orders_customer_id.16fe324f7b": ["model.jaffle_shop2.fct_orders"], "test.jaffle_shop2.relationships_fct_orders_customer_id__customer_id__ref_dim_customers_.d5636051d4": ["model.jaffle_shop2.dim_customers", "model.jaffle_shop2.fct_orders"], "test.jaffle_shop2.accepted_values_fct_orders_status__placed__shipped__completed__return_pending__returned.0aa0973768": ["model.jaffle_shop2.fct_orders"], "test.jaffle_shop2.not_null_fct_orders_amount.66810a8d08": ["model.jaffle_shop2.fct_orders"], "test.jaffle_shop2.not_null_fct_orders_credit_card_amount.56131cba63": ["model.jaffle_shop2.fct_orders"], "test.jaffle_shop2.not_null_fct_orders_coupon_amount.8a700a9568": ["model.jaffle_shop2.fct_orders"], "test.jaffle_shop2.not_null_fct_orders_bank_transfer_amount.d808dd4fab": ["model.jaffle_shop2.fct_orders"], "test.jaffle_shop2.not_null_fct_orders_gift_card_amount.ec93756487": ["model.jaffle_shop2.fct_orders"]}, "child_map": {"model.jaffle_shop2.stg_customers": ["model.jaffle_shop2.dim_customers", "test.jaffle_shop2.not_null_stg_customers_customer_id.e2cfb1f9aa", "test.jaffle_shop2.unique_stg_customers_customer_id.c7614daada"], "model.jaffle_shop2.stg_payments": ["model.jaffle_shop2.customer_payments", "model.jaffle_shop2.order_payments", "test.jaffle_shop2.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278", "test.jaffle_shop2.not_null_stg_payments_payment_id.c19cc50075", "test.jaffle_shop2.unique_stg_payments_payment_id.3744510712"], "model.jaffle_shop2.stg_orders": ["model.jaffle_shop2.customer_orders", "model.jaffle_shop2.customer_payments", "model.jaffle_shop2.fct_orders", "test.jaffle_shop2.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad", "test.jaffle_shop2.not_null_stg_orders_order_id.81cfe2fe64", "test.jaffle_shop2.unique_stg_orders_order_id.e3b841c71a"], "model.jaffle_shop2.dim_customers": ["test.jaffle_shop2.not_null_dim_customers_customer_id.dd91cd1c8d", "test.jaffle_shop2.relationships_fct_orders_customer_id__customer_id__ref_dim_customers_.d5636051d4", "test.jaffle_shop2.unique_dim_customers_customer_id.15c9f1e2fd"], "model.jaffle_shop2.fct_orders": ["test.jaffle_shop2.accepted_values_fct_orders_status__placed__shipped__completed__return_pending__returned.0aa0973768", "test.jaffle_shop2.not_null_fct_orders_amount.66810a8d08", "test.jaffle_shop2.not_null_fct_orders_bank_transfer_amount.d808dd4fab", "test.jaffle_shop2.not_null_fct_orders_coupon_amount.8a700a9568", "test.jaffle_shop2.not_null_fct_orders_credit_card_amount.56131cba63", "test.jaffle_shop2.not_null_fct_orders_customer_id.16fe324f7b", "test.jaffle_shop2.not_null_fct_orders_gift_card_amount.ec93756487", "test.jaffle_shop2.not_null_fct_orders_order_id.4e687af8d0", "test.jaffle_shop2.relationships_fct_orders_customer_id__customer_id__ref_dim_customers_.d5636051d4", "test.jaffle_shop2.unique_fct_orders_order_id.523ddb6ce5"], "model.jaffle_shop2.order_payments": ["model.jaffle_shop2.fct_orders"], "model.jaffle_shop2.customer_payments": ["model.jaffle_shop2.dim_customers"], "model.jaffle_shop2.customer_orders": ["model.jaffle_shop2.dim_customers"], "seed.jaffle_shop2.raw_customers": ["model.jaffle_shop2.stg_customers"], "seed.jaffle_shop2.raw_orders": ["model.jaffle_shop2.stg_orders"], "seed.jaffle_shop2.raw_payments": ["model.jaffle_shop2.stg_payments"], "operation.jaffle_shop2.jaffle_shop2-on-run-end-0": [], "model.elementary.alerts_dbt_tests": [], "model.elementary.alerts_schema_changes": [], "model.elementary.alerts_data_monitoring": [], "model.elementary.monitors_runs": [], "model.elementary.elementary_test_results": ["model.elementary.alerts_data_monitoring", "model.elementary.alerts_dbt_tests", "model.elementary.alerts_schema_changes"], "model.elementary.dbt_tests": [], "model.elementary.dbt_models": [], "model.elementary.dbt_sources": [], "model.elementary.dbt_metrics": [], "model.elementary.dbt_run_results": [], "model.elementary.dbt_exposures": [], "model.elementary.metrics_anomaly_score": ["model.elementary.anomaly_threshold_sensitivity"], "model.elementary.anomaly_threshold_sensitivity": [], "model.elementary.schema_columns_snapshot": ["model.elementary.current_schema_columns", "model.elementary.previous_schema_columns"], "model.elementary.table_changes": [], "model.elementary.column_changes": [], "model.elementary.schema_tables_snapshot": ["model.elementary.current_schema_tables", "model.elementary.previous_schema_tables"], "model.elementary.previous_schema_tables": ["model.elementary.table_changes"], "model.elementary.current_schema_columns": ["model.elementary.column_changes"], "model.elementary.current_schema_tables": ["model.elementary.table_changes"], "model.elementary.previous_schema_columns": ["model.elementary.column_changes"], "model.elementary.data_monitoring_metrics": ["model.elementary.metrics_anomaly_score", "model.elementary.monitors_runs"], "model.elementary.filtered_information_schema_columns": ["model.elementary.schema_columns_snapshot"], "model.elementary.filtered_information_schema_tables": ["model.elementary.schema_tables_snapshot"], "operation.elementary.elementary-on-run-start-0": [], "operation.elementary.elementary-on-run-end-0": [], "test.jaffle_shop2.unique_stg_customers_customer_id.c7614daada": [], "test.jaffle_shop2.not_null_stg_customers_customer_id.e2cfb1f9aa": [], "test.jaffle_shop2.unique_stg_orders_order_id.e3b841c71a": [], "test.jaffle_shop2.not_null_stg_orders_order_id.81cfe2fe64": [], "test.jaffle_shop2.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned.080fb20aad": [], "test.jaffle_shop2.unique_stg_payments_payment_id.3744510712": [], "test.jaffle_shop2.not_null_stg_payments_payment_id.c19cc50075": [], "test.jaffle_shop2.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card.3c3820f278": [], "test.jaffle_shop2.unique_dim_customers_customer_id.15c9f1e2fd": [], "test.jaffle_shop2.not_null_dim_customers_customer_id.dd91cd1c8d": [], "test.jaffle_shop2.unique_fct_orders_order_id.523ddb6ce5": [], "test.jaffle_shop2.not_null_fct_orders_order_id.4e687af8d0": [], "test.jaffle_shop2.not_null_fct_orders_customer_id.16fe324f7b": [], "test.jaffle_shop2.relationships_fct_orders_customer_id__customer_id__ref_dim_customers_.d5636051d4": [], "test.jaffle_shop2.accepted_values_fct_orders_status__placed__shipped__completed__return_pending__returned.0aa0973768": [], "test.jaffle_shop2.not_null_fct_orders_amount.66810a8d08": [], "test.jaffle_shop2.not_null_fct_orders_credit_card_amount.56131cba63": [], "test.jaffle_shop2.not_null_fct_orders_coupon_amount.8a700a9568": [], "test.jaffle_shop2.not_null_fct_orders_bank_transfer_amount.d808dd4fab": [], "test.jaffle_shop2.not_null_fct_orders_gift_card_amount.ec93756487": []}}
